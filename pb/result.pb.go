// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.11.2
// source: result.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// ParagraphType - paragraph type
type ParagraphType int32

const (
	ParagraphType_PT_NULL     ParagraphType = 0
	ParagraphType_PT_TEXT     ParagraphType = 1
	ParagraphType_PT_IMAGE    ParagraphType = 2
	ParagraphType_PT_HEADLINE ParagraphType = 3
	ParagraphType_PT_POSTLIST ParagraphType = 4
	ParagraphType_PT_COMMENT  ParagraphType = 5
)

// Enum value maps for ParagraphType.
var (
	ParagraphType_name = map[int32]string{
		0: "PT_NULL",
		1: "PT_TEXT",
		2: "PT_IMAGE",
		3: "PT_HEADLINE",
		4: "PT_POSTLIST",
		5: "PT_COMMENT",
	}
	ParagraphType_value = map[string]int32{
		"PT_NULL":     0,
		"PT_TEXT":     1,
		"PT_IMAGE":    2,
		"PT_HEADLINE": 3,
		"PT_POSTLIST": 4,
		"PT_COMMENT":  5,
	}
)

func (x ParagraphType) Enum() *ParagraphType {
	p := new(ParagraphType)
	*p = x
	return p
}

func (x ParagraphType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParagraphType) Descriptor() protoreflect.EnumDescriptor {
	return file_result_proto_enumTypes[0].Descriptor()
}

func (ParagraphType) Type() protoreflect.EnumType {
	return &file_result_proto_enumTypes[0]
}

func (x ParagraphType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParagraphType.Descriptor instead.
func (ParagraphType) EnumDescriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{0}
}

// CrawlerType - crawler type
type CrawlerType int32

const (
	CrawlerType_CT_TRANSLATE2     CrawlerType = 0
	CrawlerType_CT_CB_COMPANY     CrawlerType = 1
	CrawlerType_CT_DTDATA         CrawlerType = 2
	CrawlerType_CT_ANALYZEPAGE    CrawlerType = 3
	CrawlerType_CT_GEOIP          CrawlerType = 5
	CrawlerType_CT_TECHINASIA     CrawlerType = 6
	CrawlerType_CT_STEEPANDCHEAP  CrawlerType = 7
	CrawlerType_CT_JRJ            CrawlerType = 8
	CrawlerType_CT_JD             CrawlerType = 9
	CrawlerType_CT_ALIMAMA        CrawlerType = 10
	CrawlerType_CT_MOUNTAINSTEALS CrawlerType = 11
	CrawlerType_CT_TMALL          CrawlerType = 12
	CrawlerType_CT_TAOBAO         CrawlerType = 13
	CrawlerType_CT_MANHUADB       CrawlerType = 15
	CrawlerType_CT_DOUBAN         CrawlerType = 16
	CrawlerType_CT_TELEGRAPH      CrawlerType = 17
	CrawlerType_CT_OABT           CrawlerType = 18
	CrawlerType_CT_HAO6V          CrawlerType = 19
	CrawlerType_CT_PUBLICTRANSIT  CrawlerType = 20
	CrawlerType_CT_ARTICLE2       CrawlerType = 21
	CrawlerType_CT_6VDY           CrawlerType = 22
)

// Enum value maps for CrawlerType.
var (
	CrawlerType_name = map[int32]string{
		0:  "CT_TRANSLATE2",
		1:  "CT_CB_COMPANY",
		2:  "CT_DTDATA",
		3:  "CT_ANALYZEPAGE",
		5:  "CT_GEOIP",
		6:  "CT_TECHINASIA",
		7:  "CT_STEEPANDCHEAP",
		8:  "CT_JRJ",
		9:  "CT_JD",
		10: "CT_ALIMAMA",
		11: "CT_MOUNTAINSTEALS",
		12: "CT_TMALL",
		13: "CT_TAOBAO",
		15: "CT_MANHUADB",
		16: "CT_DOUBAN",
		17: "CT_TELEGRAPH",
		18: "CT_OABT",
		19: "CT_HAO6V",
		20: "CT_PUBLICTRANSIT",
		21: "CT_ARTICLE2",
		22: "CT_6VDY",
	}
	CrawlerType_value = map[string]int32{
		"CT_TRANSLATE2":     0,
		"CT_CB_COMPANY":     1,
		"CT_DTDATA":         2,
		"CT_ANALYZEPAGE":    3,
		"CT_GEOIP":          5,
		"CT_TECHINASIA":     6,
		"CT_STEEPANDCHEAP":  7,
		"CT_JRJ":            8,
		"CT_JD":             9,
		"CT_ALIMAMA":        10,
		"CT_MOUNTAINSTEALS": 11,
		"CT_TMALL":          12,
		"CT_TAOBAO":         13,
		"CT_MANHUADB":       15,
		"CT_DOUBAN":         16,
		"CT_TELEGRAPH":      17,
		"CT_OABT":           18,
		"CT_HAO6V":          19,
		"CT_PUBLICTRANSIT":  20,
		"CT_ARTICLE2":       21,
		"CT_6VDY":           22,
	}
)

func (x CrawlerType) Enum() *CrawlerType {
	p := new(CrawlerType)
	*p = x
	return p
}

func (x CrawlerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CrawlerType) Descriptor() protoreflect.EnumDescriptor {
	return file_result_proto_enumTypes[1].Descriptor()
}

func (CrawlerType) Type() protoreflect.EnumType {
	return &file_result_proto_enumTypes[1]
}

func (x CrawlerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CrawlerType.Descriptor instead.
func (CrawlerType) EnumDescriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{1}
}

// AnalyzeScreenshotType - screenshot type
type AnalyzeScreenshotType int32

const (
	// AST_JPG - jpg
	AnalyzeScreenshotType_AST_JPG AnalyzeScreenshotType = 0
	// AST_PNG - png
	AnalyzeScreenshotType_AST_PNG AnalyzeScreenshotType = 1
)

// Enum value maps for AnalyzeScreenshotType.
var (
	AnalyzeScreenshotType_name = map[int32]string{
		0: "AST_JPG",
		1: "AST_PNG",
	}
	AnalyzeScreenshotType_value = map[string]int32{
		"AST_JPG": 0,
		"AST_PNG": 1,
	}
)

func (x AnalyzeScreenshotType) Enum() *AnalyzeScreenshotType {
	p := new(AnalyzeScreenshotType)
	*p = x
	return p
}

func (x AnalyzeScreenshotType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnalyzeScreenshotType) Descriptor() protoreflect.EnumDescriptor {
	return file_result_proto_enumTypes[2].Descriptor()
}

func (AnalyzeScreenshotType) Type() protoreflect.EnumType {
	return &file_result_proto_enumTypes[2]
}

func (x AnalyzeScreenshotType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnalyzeScreenshotType.Descriptor instead.
func (AnalyzeScreenshotType) EnumDescriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{2}
}

// ImageInfo - image info
type ImageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HashName string `protobuf:"bytes,1,opt,name=hashName,proto3" json:"hashName,omitempty"`
	Url      string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Width    int32  `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	Height   int32  `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	Data     []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ImageInfo) Reset() {
	*x = ImageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageInfo) ProtoMessage() {}

func (x *ImageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageInfo.ProtoReflect.Descriptor instead.
func (*ImageInfo) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{0}
}

func (x *ImageInfo) GetHashName() string {
	if x != nil {
		return x.HashName
	}
	return ""
}

func (x *ImageInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ImageInfo) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ImageInfo) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ImageInfo) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// Paragraph - paragraph
type Paragraph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pt          ParagraphType `protobuf:"varint,1,opt,name=pt,proto3,enum=jarviscrawlercore.ParagraphType" json:"pt,omitempty"`
	ImgHashName string        `protobuf:"bytes,2,opt,name=imgHashName,proto3" json:"imgHashName,omitempty"`
	Text        string        `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	ImgURL      string        `protobuf:"bytes,4,opt,name=imgURL,proto3" json:"imgURL,omitempty"`
}

func (x *Paragraph) Reset() {
	*x = Paragraph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Paragraph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Paragraph) ProtoMessage() {}

func (x *Paragraph) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Paragraph.ProtoReflect.Descriptor instead.
func (*Paragraph) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{1}
}

func (x *Paragraph) GetPt() ParagraphType {
	if x != nil {
		return x.Pt
	}
	return ParagraphType_PT_NULL
}

func (x *Paragraph) GetImgHashName() string {
	if x != nil {
		return x.ImgHashName
	}
	return ""
}

func (x *Paragraph) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Paragraph) GetImgURL() string {
	if x != nil {
		return x.ImgURL
	}
	return ""
}

// ExportArticleResult - export article result
type ExportArticleResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title      string       `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Author     string       `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	WriteTime  string       `protobuf:"bytes,3,opt,name=writeTime,proto3" json:"writeTime,omitempty"`
	Article    string       `protobuf:"bytes,4,opt,name=article,proto3" json:"article,omitempty"`
	Url        string       `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	Imgs       []*ImageInfo `protobuf:"bytes,6,rep,name=imgs,proto3" json:"imgs,omitempty"`
	TitleImage *ImageInfo   `protobuf:"bytes,7,opt,name=titleImage,proto3" json:"titleImage,omitempty"`
	Tags       []string     `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	Paragraphs []*Paragraph `protobuf:"bytes,9,rep,name=paragraphs,proto3" json:"paragraphs,omitempty"`
	Summary    string       `protobuf:"bytes,10,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *ExportArticleResult) Reset() {
	*x = ExportArticleResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportArticleResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportArticleResult) ProtoMessage() {}

func (x *ExportArticleResult) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportArticleResult.ProtoReflect.Descriptor instead.
func (*ExportArticleResult) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{2}
}

func (x *ExportArticleResult) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ExportArticleResult) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *ExportArticleResult) GetWriteTime() string {
	if x != nil {
		return x.WriteTime
	}
	return ""
}

func (x *ExportArticleResult) GetArticle() string {
	if x != nil {
		return x.Article
	}
	return ""
}

func (x *ExportArticleResult) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ExportArticleResult) GetImgs() []*ImageInfo {
	if x != nil {
		return x.Imgs
	}
	return nil
}

func (x *ExportArticleResult) GetTitleImage() *ImageInfo {
	if x != nil {
		return x.TitleImage
	}
	return nil
}

func (x *ExportArticleResult) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ExportArticleResult) GetParagraphs() []*Paragraph {
	if x != nil {
		return x.Paragraphs
	}
	return nil
}

func (x *ExportArticleResult) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

// Article - article
type Article struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string     `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Author      string     `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	WriteTime   string     `protobuf:"bytes,3,opt,name=writeTime,proto3" json:"writeTime,omitempty"`
	Summary     string     `protobuf:"bytes,4,opt,name=summary,proto3" json:"summary,omitempty"`
	Url         string     `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	Image       *ImageInfo `protobuf:"bytes,6,opt,name=image,proto3" json:"image,omitempty"`
	SecondTitle string     `protobuf:"bytes,7,opt,name=secondTitle,proto3" json:"secondTitle,omitempty"`
	Premium     bool       `protobuf:"varint,8,opt,name=premium,proto3" json:"premium,omitempty"`
	Lang        string     `protobuf:"bytes,9,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (x *Article) Reset() {
	*x = Article{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Article) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Article) ProtoMessage() {}

func (x *Article) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Article.ProtoReflect.Descriptor instead.
func (*Article) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{3}
}

func (x *Article) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Article) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *Article) GetWriteTime() string {
	if x != nil {
		return x.WriteTime
	}
	return ""
}

func (x *Article) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Article) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Article) GetImage() *ImageInfo {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Article) GetSecondTitle() string {
	if x != nil {
		return x.SecondTitle
	}
	return ""
}

func (x *Article) GetPremium() bool {
	if x != nil {
		return x.Premium
	}
	return false
}

func (x *Article) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

// ArticleList - article list
type ArticleList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Articles []*Article `protobuf:"bytes,1,rep,name=articles,proto3" json:"articles,omitempty"`
}

func (x *ArticleList) Reset() {
	*x = ArticleList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleList) ProtoMessage() {}

func (x *ArticleList) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleList.ProtoReflect.Descriptor instead.
func (*ArticleList) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{4}
}

func (x *ArticleList) GetArticles() []*Article {
	if x != nil {
		return x.Articles
	}
	return nil
}

// ConfluenceUpdateItem - confluence all updates - item
type ConfluenceUpdateItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title   string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Url     string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Summary string `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *ConfluenceUpdateItem) Reset() {
	*x = ConfluenceUpdateItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfluenceUpdateItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfluenceUpdateItem) ProtoMessage() {}

func (x *ConfluenceUpdateItem) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfluenceUpdateItem.ProtoReflect.Descriptor instead.
func (*ConfluenceUpdateItem) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{5}
}

func (x *ConfluenceUpdateItem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ConfluenceUpdateItem) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ConfluenceUpdateItem) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

// ConfluenceUpdateGrouping - confluence all updates - grouping
type ConfluenceUpdateGrouping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Author string                  `protobuf:"bytes,1,opt,name=author,proto3" json:"author,omitempty"`
	Items  []*ConfluenceUpdateItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ConfluenceUpdateGrouping) Reset() {
	*x = ConfluenceUpdateGrouping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfluenceUpdateGrouping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfluenceUpdateGrouping) ProtoMessage() {}

func (x *ConfluenceUpdateGrouping) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfluenceUpdateGrouping.ProtoReflect.Descriptor instead.
func (*ConfluenceUpdateGrouping) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{6}
}

func (x *ConfluenceUpdateGrouping) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *ConfluenceUpdateGrouping) GetItems() []*ConfluenceUpdateItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// ConfluenceAllUpdates - confluence all updates
type ConfluenceAllUpdates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates []*ConfluenceUpdateGrouping `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"`
}

func (x *ConfluenceAllUpdates) Reset() {
	*x = ConfluenceAllUpdates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfluenceAllUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfluenceAllUpdates) ProtoMessage() {}

func (x *ConfluenceAllUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfluenceAllUpdates.ProtoReflect.Descriptor instead.
func (*ConfluenceAllUpdates) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{7}
}

func (x *ConfluenceAllUpdates) GetUpdates() []*ConfluenceUpdateGrouping {
	if x != nil {
		return x.Updates
	}
	return nil
}

// YCCompanies - YC Companies
type YCCompanies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Url   string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Info  string `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	Batch string `protobuf:"bytes,4,opt,name=batch,proto3" json:"batch,omitempty"`
	Isapp bool   `protobuf:"varint,5,opt,name=isapp,proto3" json:"isapp,omitempty"`
}

func (x *YCCompanies) Reset() {
	*x = YCCompanies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YCCompanies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YCCompanies) ProtoMessage() {}

func (x *YCCompanies) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YCCompanies.ProtoReflect.Descriptor instead.
func (*YCCompanies) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{8}
}

func (x *YCCompanies) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *YCCompanies) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *YCCompanies) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *YCCompanies) GetBatch() string {
	if x != nil {
		return x.Batch
	}
	return ""
}

func (x *YCCompanies) GetIsapp() bool {
	if x != nil {
		return x.Isapp
	}
	return false
}

// CrunchBaseEmployee - CrunchBase Employee
type CrunchBaseEmployee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Code      string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Title     string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	StartDate string `protobuf:"bytes,4,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate   string `protobuf:"bytes,5,opt,name=endDate,proto3" json:"endDate,omitempty"`
}

func (x *CrunchBaseEmployee) Reset() {
	*x = CrunchBaseEmployee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrunchBaseEmployee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrunchBaseEmployee) ProtoMessage() {}

func (x *CrunchBaseEmployee) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrunchBaseEmployee.ProtoReflect.Descriptor instead.
func (*CrunchBaseEmployee) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{9}
}

func (x *CrunchBaseEmployee) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CrunchBaseEmployee) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CrunchBaseEmployee) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CrunchBaseEmployee) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *CrunchBaseEmployee) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

// CrunchBaseInvestment - CrunchBase Investment
type CrunchBaseInvestment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnnouncedDate    string `protobuf:"bytes,1,opt,name=announcedDate,proto3" json:"announcedDate,omitempty"`
	OrganizationName string `protobuf:"bytes,2,opt,name=organizationName,proto3" json:"organizationName,omitempty"`
	LeadInvestor     bool   `protobuf:"varint,3,opt,name=leadInvestor,proto3" json:"leadInvestor,omitempty"`
	FundingRound     string `protobuf:"bytes,4,opt,name=fundingRound,proto3" json:"fundingRound,omitempty"`
	MoneyRaised      string `protobuf:"bytes,5,opt,name=moneyRaised,proto3" json:"moneyRaised,omitempty"`
}

func (x *CrunchBaseInvestment) Reset() {
	*x = CrunchBaseInvestment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrunchBaseInvestment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrunchBaseInvestment) ProtoMessage() {}

func (x *CrunchBaseInvestment) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrunchBaseInvestment.ProtoReflect.Descriptor instead.
func (*CrunchBaseInvestment) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{10}
}

func (x *CrunchBaseInvestment) GetAnnouncedDate() string {
	if x != nil {
		return x.AnnouncedDate
	}
	return ""
}

func (x *CrunchBaseInvestment) GetOrganizationName() string {
	if x != nil {
		return x.OrganizationName
	}
	return ""
}

func (x *CrunchBaseInvestment) GetLeadInvestor() bool {
	if x != nil {
		return x.LeadInvestor
	}
	return false
}

func (x *CrunchBaseInvestment) GetFundingRound() string {
	if x != nil {
		return x.FundingRound
	}
	return ""
}

func (x *CrunchBaseInvestment) GetMoneyRaised() string {
	if x != nil {
		return x.MoneyRaised
	}
	return ""
}

// CrunchBaseAcquisition - CrunchBase Acquisition
type CrunchBaseAcquisition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AcquiredOrganizationName  string `protobuf:"bytes,1,opt,name=acquiredOrganizationName,proto3" json:"acquiredOrganizationName,omitempty"`
	AcquiredOrganizationCode  string `protobuf:"bytes,2,opt,name=acquiredOrganizationCode,proto3" json:"acquiredOrganizationCode,omitempty"`
	AnnouncedDate             string `protobuf:"bytes,3,opt,name=announcedDate,proto3" json:"announcedDate,omitempty"`
	Price                     string `protobuf:"bytes,4,opt,name=price,proto3" json:"price,omitempty"`
	AcquiringOrganizationName string `protobuf:"bytes,5,opt,name=acquiringOrganizationName,proto3" json:"acquiringOrganizationName,omitempty"`
	AcquiringOrganizationCode string `protobuf:"bytes,6,opt,name=acquiringOrganizationCode,proto3" json:"acquiringOrganizationCode,omitempty"`
}

func (x *CrunchBaseAcquisition) Reset() {
	*x = CrunchBaseAcquisition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrunchBaseAcquisition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrunchBaseAcquisition) ProtoMessage() {}

func (x *CrunchBaseAcquisition) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrunchBaseAcquisition.ProtoReflect.Descriptor instead.
func (*CrunchBaseAcquisition) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{11}
}

func (x *CrunchBaseAcquisition) GetAcquiredOrganizationName() string {
	if x != nil {
		return x.AcquiredOrganizationName
	}
	return ""
}

func (x *CrunchBaseAcquisition) GetAcquiredOrganizationCode() string {
	if x != nil {
		return x.AcquiredOrganizationCode
	}
	return ""
}

func (x *CrunchBaseAcquisition) GetAnnouncedDate() string {
	if x != nil {
		return x.AnnouncedDate
	}
	return ""
}

func (x *CrunchBaseAcquisition) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *CrunchBaseAcquisition) GetAcquiringOrganizationName() string {
	if x != nil {
		return x.AcquiringOrganizationName
	}
	return ""
}

func (x *CrunchBaseAcquisition) GetAcquiringOrganizationCode() string {
	if x != nil {
		return x.AcquiringOrganizationCode
	}
	return ""
}

// CrunchBaseInvestor - CrunchBase Investor
type CrunchBaseInvestor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvestorName string   `protobuf:"bytes,1,opt,name=investorName,proto3" json:"investorName,omitempty"`
	LeadInvestor bool     `protobuf:"varint,2,opt,name=leadInvestor,proto3" json:"leadInvestor,omitempty"`
	Partners     []string `protobuf:"bytes,3,rep,name=Partners,proto3" json:"Partners,omitempty"`
}

func (x *CrunchBaseInvestor) Reset() {
	*x = CrunchBaseInvestor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrunchBaseInvestor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrunchBaseInvestor) ProtoMessage() {}

func (x *CrunchBaseInvestor) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrunchBaseInvestor.ProtoReflect.Descriptor instead.
func (*CrunchBaseInvestor) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{12}
}

func (x *CrunchBaseInvestor) GetInvestorName() string {
	if x != nil {
		return x.InvestorName
	}
	return ""
}

func (x *CrunchBaseInvestor) GetLeadInvestor() bool {
	if x != nil {
		return x.LeadInvestor
	}
	return false
}

func (x *CrunchBaseInvestor) GetPartners() []string {
	if x != nil {
		return x.Partners
	}
	return nil
}

// CrunchBaseFundingRound - CrunchBase FundingRound
type CrunchBaseFundingRound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnnouncedDate   string                `protobuf:"bytes,1,opt,name=announcedDate,proto3" json:"announcedDate,omitempty"`
	TransactionName string                `protobuf:"bytes,2,opt,name=transactionName,proto3" json:"transactionName,omitempty"`
	MoneyRaised     string                `protobuf:"bytes,3,opt,name=moneyRaised,proto3" json:"moneyRaised,omitempty"`
	Investors       []*CrunchBaseInvestor `protobuf:"bytes,100,rep,name=investors,proto3" json:"investors,omitempty"`
}

func (x *CrunchBaseFundingRound) Reset() {
	*x = CrunchBaseFundingRound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrunchBaseFundingRound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrunchBaseFundingRound) ProtoMessage() {}

func (x *CrunchBaseFundingRound) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrunchBaseFundingRound.ProtoReflect.Descriptor instead.
func (*CrunchBaseFundingRound) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{13}
}

func (x *CrunchBaseFundingRound) GetAnnouncedDate() string {
	if x != nil {
		return x.AnnouncedDate
	}
	return ""
}

func (x *CrunchBaseFundingRound) GetTransactionName() string {
	if x != nil {
		return x.TransactionName
	}
	return ""
}

func (x *CrunchBaseFundingRound) GetMoneyRaised() string {
	if x != nil {
		return x.MoneyRaised
	}
	return ""
}

func (x *CrunchBaseFundingRound) GetInvestors() []*CrunchBaseInvestor {
	if x != nil {
		return x.Investors
	}
	return nil
}

// CrunchBaseOrganization - CrunchBase Organization
type CrunchBaseOrganization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Code                string                    `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Categories          []string                  `protobuf:"bytes,3,rep,name=categories,proto3" json:"categories,omitempty"`
	HeadquartersRegions []string                  `protobuf:"bytes,4,rep,name=headquartersRegions,proto3" json:"headquartersRegions,omitempty"`
	FoundedDate         string                    `protobuf:"bytes,5,opt,name=foundedDate,proto3" json:"foundedDate,omitempty"`
	Founders            []string                  `protobuf:"bytes,6,rep,name=founders,proto3" json:"founders,omitempty"`
	OperatingStatus     string                    `protobuf:"bytes,7,opt,name=operatingStatus,proto3" json:"operatingStatus,omitempty"`
	FundingStatus       string                    `protobuf:"bytes,8,opt,name=fundingStatus,proto3" json:"fundingStatus,omitempty"`
	LastFundingType     string                    `protobuf:"bytes,9,opt,name=lastFundingType,proto3" json:"lastFundingType,omitempty"`
	LegalName           string                    `protobuf:"bytes,10,opt,name=legalName,proto3" json:"legalName,omitempty"`
	StockSymbol         string                    `protobuf:"bytes,100,opt,name=stockSymbol,proto3" json:"stockSymbol,omitempty"`
	ValuationIPO        string                    `protobuf:"bytes,101,opt,name=valuationIPO,proto3" json:"valuationIPO,omitempty"`
	PriceIPO            string                    `protobuf:"bytes,102,opt,name=priceIPO,proto3" json:"priceIPO,omitempty"`
	DateIPO             string                    `protobuf:"bytes,103,opt,name=dateIPO,proto3" json:"dateIPO,omitempty"`
	MoneyRaisedIPO      string                    `protobuf:"bytes,104,opt,name=moneyRaisedIPO,proto3" json:"moneyRaisedIPO,omitempty"`
	FundingRounds       []*CrunchBaseFundingRound `protobuf:"bytes,200,rep,name=fundingRounds,proto3" json:"fundingRounds,omitempty"`
	CurEmployees        []*CrunchBaseEmployee     `protobuf:"bytes,301,rep,name=curEmployees,proto3" json:"curEmployees,omitempty"`
	BoardMembers        []*CrunchBaseEmployee     `protobuf:"bytes,401,rep,name=boardMembers,proto3" json:"boardMembers,omitempty"`
	PastEmployees       []*CrunchBaseEmployee     `protobuf:"bytes,501,rep,name=pastEmployees,proto3" json:"pastEmployees,omitempty"`
}

func (x *CrunchBaseOrganization) Reset() {
	*x = CrunchBaseOrganization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrunchBaseOrganization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrunchBaseOrganization) ProtoMessage() {}

func (x *CrunchBaseOrganization) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrunchBaseOrganization.ProtoReflect.Descriptor instead.
func (*CrunchBaseOrganization) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{14}
}

func (x *CrunchBaseOrganization) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CrunchBaseOrganization) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *CrunchBaseOrganization) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *CrunchBaseOrganization) GetHeadquartersRegions() []string {
	if x != nil {
		return x.HeadquartersRegions
	}
	return nil
}

func (x *CrunchBaseOrganization) GetFoundedDate() string {
	if x != nil {
		return x.FoundedDate
	}
	return ""
}

func (x *CrunchBaseOrganization) GetFounders() []string {
	if x != nil {
		return x.Founders
	}
	return nil
}

func (x *CrunchBaseOrganization) GetOperatingStatus() string {
	if x != nil {
		return x.OperatingStatus
	}
	return ""
}

func (x *CrunchBaseOrganization) GetFundingStatus() string {
	if x != nil {
		return x.FundingStatus
	}
	return ""
}

func (x *CrunchBaseOrganization) GetLastFundingType() string {
	if x != nil {
		return x.LastFundingType
	}
	return ""
}

func (x *CrunchBaseOrganization) GetLegalName() string {
	if x != nil {
		return x.LegalName
	}
	return ""
}

func (x *CrunchBaseOrganization) GetStockSymbol() string {
	if x != nil {
		return x.StockSymbol
	}
	return ""
}

func (x *CrunchBaseOrganization) GetValuationIPO() string {
	if x != nil {
		return x.ValuationIPO
	}
	return ""
}

func (x *CrunchBaseOrganization) GetPriceIPO() string {
	if x != nil {
		return x.PriceIPO
	}
	return ""
}

func (x *CrunchBaseOrganization) GetDateIPO() string {
	if x != nil {
		return x.DateIPO
	}
	return ""
}

func (x *CrunchBaseOrganization) GetMoneyRaisedIPO() string {
	if x != nil {
		return x.MoneyRaisedIPO
	}
	return ""
}

func (x *CrunchBaseOrganization) GetFundingRounds() []*CrunchBaseFundingRound {
	if x != nil {
		return x.FundingRounds
	}
	return nil
}

func (x *CrunchBaseOrganization) GetCurEmployees() []*CrunchBaseEmployee {
	if x != nil {
		return x.CurEmployees
	}
	return nil
}

func (x *CrunchBaseOrganization) GetBoardMembers() []*CrunchBaseEmployee {
	if x != nil {
		return x.BoardMembers
	}
	return nil
}

func (x *CrunchBaseOrganization) GetPastEmployees() []*CrunchBaseEmployee {
	if x != nil {
		return x.PastEmployees
	}
	return nil
}

// RequestTranslate - request translate
type RequestTranslate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// text - source text
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// platform - it's like google
	Platform string `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty"`
	// srcLang - source language
	SrcLang string `protobuf:"bytes,3,opt,name=srcLang,proto3" json:"srcLang,omitempty"`
	// destLang - destination language
	DestLang string `protobuf:"bytes,4,opt,name=destLang,proto3" json:"destLang,omitempty"`
	// token - You need to have a valid token in order to get back correctly
	Token string `protobuf:"bytes,100,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *RequestTranslate) Reset() {
	*x = RequestTranslate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestTranslate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestTranslate) ProtoMessage() {}

func (x *RequestTranslate) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestTranslate.ProtoReflect.Descriptor instead.
func (*RequestTranslate) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{15}
}

func (x *RequestTranslate) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *RequestTranslate) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *RequestTranslate) GetSrcLang() string {
	if x != nil {
		return x.SrcLang
	}
	return ""
}

func (x *RequestTranslate) GetDestLang() string {
	if x != nil {
		return x.DestLang
	}
	return ""
}

func (x *RequestTranslate) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// ReplyTranslate - reply translate
type ReplyTranslate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// text - destination text
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *ReplyTranslate) Reset() {
	*x = ReplyTranslate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyTranslate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyTranslate) ProtoMessage() {}

func (x *ReplyTranslate) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyTranslate.ProtoReflect.Descriptor instead.
func (*ReplyTranslate) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{16}
}

func (x *ReplyTranslate) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// RequestArticle - request article
type RequestArticle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// url
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// is need attach jquery
	AttachJQuery bool `protobuf:"varint,2,opt,name=attachJQuery,proto3" json:"attachJQuery,omitempty"`
	// token - You need to have a valid token in order to get back correctly
	Token string `protobuf:"bytes,100,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *RequestArticle) Reset() {
	*x = RequestArticle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestArticle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestArticle) ProtoMessage() {}

func (x *RequestArticle) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestArticle.ProtoReflect.Descriptor instead.
func (*RequestArticle) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{17}
}

func (x *RequestArticle) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *RequestArticle) GetAttachJQuery() bool {
	if x != nil {
		return x.AttachJQuery
	}
	return false
}

func (x *RequestArticle) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// ReplyArticle - reply article
type ReplyArticle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// result
	Result *ExportArticleResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	// totalLength - If the message is too long,
	// it will send data in multiple msg, this is the total length.
	TotalLength int32 `protobuf:"varint,2,opt,name=totalLength,proto3" json:"totalLength,omitempty"`
	// curStart - The starting point of the current data (in bytes).
	CurStart int32 `protobuf:"varint,3,opt,name=curStart,proto3" json:"curStart,omitempty"`
	// curLength - The length of the current data (in bytes).
	CurLength int32 `protobuf:"varint,4,opt,name=curLength,proto3" json:"curLength,omitempty"`
	// hashData - This is the hash of each paragraph.
	HashData string `protobuf:"bytes,5,opt,name=hashData,proto3" json:"hashData,omitempty"`
	// totalHashData - If multiple messages return data,
	// this is the hash value of all data, only sent in the last message.
	TotalHashData string `protobuf:"bytes,6,opt,name=totalHashData,proto3" json:"totalHashData,omitempty"`
	// data
	Data []byte `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ReplyArticle) Reset() {
	*x = ReplyArticle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyArticle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyArticle) ProtoMessage() {}

func (x *ReplyArticle) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyArticle.ProtoReflect.Descriptor instead.
func (*ReplyArticle) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{18}
}

func (x *ReplyArticle) GetResult() *ExportArticleResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReplyArticle) GetTotalLength() int32 {
	if x != nil {
		return x.TotalLength
	}
	return 0
}

func (x *ReplyArticle) GetCurStart() int32 {
	if x != nil {
		return x.CurStart
	}
	return 0
}

func (x *ReplyArticle) GetCurLength() int32 {
	if x != nil {
		return x.CurLength
	}
	return 0
}

func (x *ReplyArticle) GetHashData() string {
	if x != nil {
		return x.HashData
	}
	return ""
}

func (x *ReplyArticle) GetTotalHashData() string {
	if x != nil {
		return x.TotalHashData
	}
	return ""
}

func (x *ReplyArticle) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// RequestArticles - request articles
type RequestArticles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// url
	//
	// Deprecated: Do not use.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// is need attach jquery
	//
	// Deprecated: Do not use.
	AttachJQuery bool `protobuf:"varint,2,opt,name=attachJQuery,proto3" json:"attachJQuery,omitempty"`
	// website
	Website string `protobuf:"bytes,3,opt,name=website,proto3" json:"website,omitempty"`
	// token - You need to have a valid token in order to get back correctly
	Token string `protobuf:"bytes,100,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *RequestArticles) Reset() {
	*x = RequestArticles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestArticles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestArticles) ProtoMessage() {}

func (x *RequestArticles) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestArticles.ProtoReflect.Descriptor instead.
func (*RequestArticles) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{19}
}

// Deprecated: Do not use.
func (x *RequestArticles) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// Deprecated: Do not use.
func (x *RequestArticles) GetAttachJQuery() bool {
	if x != nil {
		return x.AttachJQuery
	}
	return false
}

func (x *RequestArticles) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *RequestArticles) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// ReplyArticles - reply articles
type ReplyArticles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// articles
	Articles *ArticleList `protobuf:"bytes,1,opt,name=articles,proto3" json:"articles,omitempty"`
}

func (x *ReplyArticles) Reset() {
	*x = ReplyArticles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyArticles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyArticles) ProtoMessage() {}

func (x *ReplyArticles) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyArticles.ProtoReflect.Descriptor instead.
func (*ReplyArticles) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{20}
}

func (x *ReplyArticles) GetArticles() *ArticleList {
	if x != nil {
		return x.Articles
	}
	return nil
}

// RequestCrunchBaseCompany - request a company infomation in crunchbase
type RequestCrunchBaseCompany struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Search string `protobuf:"bytes,1,opt,name=search,proto3" json:"search,omitempty"`
}

func (x *RequestCrunchBaseCompany) Reset() {
	*x = RequestCrunchBaseCompany{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCrunchBaseCompany) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCrunchBaseCompany) ProtoMessage() {}

func (x *RequestCrunchBaseCompany) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCrunchBaseCompany.ProtoReflect.Descriptor instead.
func (*RequestCrunchBaseCompany) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{21}
}

func (x *RequestCrunchBaseCompany) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

// RequestTranslate2 - request translate
type RequestTranslate2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// text - source text
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// platform - it's like google
	Platform string `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty"`
	// srcLang - source language
	SrcLang string `protobuf:"bytes,3,opt,name=srcLang,proto3" json:"srcLang,omitempty"`
	// destLang - destination language
	DestLang string `protobuf:"bytes,4,opt,name=destLang,proto3" json:"destLang,omitempty"`
}

func (x *RequestTranslate2) Reset() {
	*x = RequestTranslate2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestTranslate2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestTranslate2) ProtoMessage() {}

func (x *RequestTranslate2) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestTranslate2.ProtoReflect.Descriptor instead.
func (*RequestTranslate2) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{22}
}

func (x *RequestTranslate2) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *RequestTranslate2) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *RequestTranslate2) GetSrcLang() string {
	if x != nil {
		return x.SrcLang
	}
	return ""
}

func (x *RequestTranslate2) GetDestLang() string {
	if x != nil {
		return x.DestLang
	}
	return ""
}

// TranslateResult - reply translate
type TranslateResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// text - destination text
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *TranslateResult) Reset() {
	*x = TranslateResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranslateResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranslateResult) ProtoMessage() {}

func (x *TranslateResult) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranslateResult.ProtoReflect.Descriptor instead.
func (*TranslateResult) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{23}
}

func (x *TranslateResult) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// AnalyzePage - analyze page
type AnalyzePage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// url - url
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// delay = delay in seconds
	Delay int32 `protobuf:"varint,2,opt,name=delay,proto3" json:"delay,omitempty"`
	// viewportWidth -
	ViewportWidth int32 `protobuf:"varint,3,opt,name=viewportWidth,proto3" json:"viewportWidth,omitempty"`
	// viewportHeight -
	ViewportHeight int32 `protobuf:"varint,4,opt,name=viewportHeight,proto3" json:"viewportHeight,omitempty"`
	// deviceScaleFactor -
	DeviceScaleFactor float32 `protobuf:"fixed32,5,opt,name=deviceScaleFactor,proto3" json:"deviceScaleFactor,omitempty"`
	// isMobile -
	IsMobile bool `protobuf:"varint,6,opt,name=isMobile,proto3" json:"isMobile,omitempty"`
	// isLandscape -
	IsLandscape bool `protobuf:"varint,7,opt,name=isLandscape,proto3" json:"isLandscape,omitempty"`
	// needScreenshots -
	NeedScreenshots bool `protobuf:"varint,8,opt,name=needScreenshots,proto3" json:"needScreenshots,omitempty"`
	// needLogs -
	NeedLogs bool `protobuf:"varint,9,opt,name=needLogs,proto3" json:"needLogs,omitempty"`
	// timeout - timeout in secend
	Timeout int32 `protobuf:"varint,10,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *AnalyzePage) Reset() {
	*x = AnalyzePage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzePage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzePage) ProtoMessage() {}

func (x *AnalyzePage) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzePage.ProtoReflect.Descriptor instead.
func (*AnalyzePage) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{24}
}

func (x *AnalyzePage) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AnalyzePage) GetDelay() int32 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *AnalyzePage) GetViewportWidth() int32 {
	if x != nil {
		return x.ViewportWidth
	}
	return 0
}

func (x *AnalyzePage) GetViewportHeight() int32 {
	if x != nil {
		return x.ViewportHeight
	}
	return 0
}

func (x *AnalyzePage) GetDeviceScaleFactor() float32 {
	if x != nil {
		return x.DeviceScaleFactor
	}
	return 0
}

func (x *AnalyzePage) GetIsMobile() bool {
	if x != nil {
		return x.IsMobile
	}
	return false
}

func (x *AnalyzePage) GetIsLandscape() bool {
	if x != nil {
		return x.IsLandscape
	}
	return false
}

func (x *AnalyzePage) GetNeedScreenshots() bool {
	if x != nil {
		return x.NeedScreenshots
	}
	return false
}

func (x *AnalyzePage) GetNeedLogs() bool {
	if x != nil {
		return x.NeedLogs
	}
	return false
}

func (x *AnalyzePage) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

// AnalyzeScreenshot - screenshot
type AnalyzeScreenshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name - name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// type - type
	Type AnalyzeScreenshotType `protobuf:"varint,2,opt,name=type,proto3,enum=jarviscrawlercore.AnalyzeScreenshotType" json:"type,omitempty"`
	// buf - buffer
	Buf []byte `protobuf:"bytes,3,opt,name=buf,proto3" json:"buf,omitempty"`
}

func (x *AnalyzeScreenshot) Reset() {
	*x = AnalyzeScreenshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeScreenshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeScreenshot) ProtoMessage() {}

func (x *AnalyzeScreenshot) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeScreenshot.ProtoReflect.Descriptor instead.
func (*AnalyzeScreenshot) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{25}
}

func (x *AnalyzeScreenshot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AnalyzeScreenshot) GetType() AnalyzeScreenshotType {
	if x != nil {
		return x.Type
	}
	return AnalyzeScreenshotType_AST_JPG
}

func (x *AnalyzeScreenshot) GetBuf() []byte {
	if x != nil {
		return x.Buf
	}
	return nil
}

// AnalyzeImage - analyze request infomation
type AnalyzeReqInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// url - url
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// downloadTime - download time
	DownloadTime int32 `protobuf:"varint,2,opt,name=downloadTime,proto3" json:"downloadTime,omitempty"`
	// bufBytes - buffer bytes
	BufBytes int32 `protobuf:"varint,3,opt,name=bufBytes,proto3" json:"bufBytes,omitempty"`
	// status - http status
	Status int32 `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	// startTime - start time
	StartTime int64 `protobuf:"varint,5,opt,name=startTime,proto3" json:"startTime,omitempty"`
	// isGZip - is gzip
	IsGZip bool `protobuf:"varint,6,opt,name=isGZip,proto3" json:"isGZip,omitempty"`
	// contentType - Content-Type
	ContentType string `protobuf:"bytes,7,opt,name=contentType,proto3" json:"contentType,omitempty"`
	// ipaddr - ip address, it's like 127.0.0.1;192.168.0.1;
	Ipaddr string `protobuf:"bytes,8,opt,name=ipaddr,proto3" json:"ipaddr,omitempty"`
	// remoteaddr - remote address, it's like 127.0.0.1:443
	Remoteaddr string `protobuf:"bytes,9,opt,name=remoteaddr,proto3" json:"remoteaddr,omitempty"`
	// imgWidth -
	ImgWidth int32 `protobuf:"varint,100,opt,name=imgWidth,proto3" json:"imgWidth,omitempty"`
	// imgHeight -
	ImgHeight int32 `protobuf:"varint,101,opt,name=imgHeight,proto3" json:"imgHeight,omitempty"`
}

func (x *AnalyzeReqInfo) Reset() {
	*x = AnalyzeReqInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzeReqInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeReqInfo) ProtoMessage() {}

func (x *AnalyzeReqInfo) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeReqInfo.ProtoReflect.Descriptor instead.
func (*AnalyzeReqInfo) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{26}
}

func (x *AnalyzeReqInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AnalyzeReqInfo) GetDownloadTime() int32 {
	if x != nil {
		return x.DownloadTime
	}
	return 0
}

func (x *AnalyzeReqInfo) GetBufBytes() int32 {
	if x != nil {
		return x.BufBytes
	}
	return 0
}

func (x *AnalyzeReqInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *AnalyzeReqInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *AnalyzeReqInfo) GetIsGZip() bool {
	if x != nil {
		return x.IsGZip
	}
	return false
}

func (x *AnalyzeReqInfo) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *AnalyzeReqInfo) GetIpaddr() string {
	if x != nil {
		return x.Ipaddr
	}
	return ""
}

func (x *AnalyzeReqInfo) GetRemoteaddr() string {
	if x != nil {
		return x.Remoteaddr
	}
	return ""
}

func (x *AnalyzeReqInfo) GetImgWidth() int32 {
	if x != nil {
		return x.ImgWidth
	}
	return 0
}

func (x *AnalyzeReqInfo) GetImgHeight() int32 {
	if x != nil {
		return x.ImgHeight
	}
	return 0
}

// ReplyAnalyzePage - reply analyze page
type ReplyAnalyzePage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pageTime - page time
	PageTime int32 `protobuf:"varint,1,opt,name=pageTime,proto3" json:"pageTime,omitempty"`
	// pageBytes - page bytes
	PageBytes int32 `protobuf:"varint,2,opt,name=pageBytes,proto3" json:"pageBytes,omitempty"`
	// errs - error list
	Errs []string `protobuf:"bytes,100,rep,name=errs,proto3" json:"errs,omitempty"`
	// reqs - request list
	Reqs []*AnalyzeReqInfo `protobuf:"bytes,101,rep,name=reqs,proto3" json:"reqs,omitempty"`
	// screenshots - screenshot list
	Screenshots []*AnalyzeScreenshot `protobuf:"bytes,102,rep,name=screenshots,proto3" json:"screenshots,omitempty"`
	// logs - console.log list
	Logs []string `protobuf:"bytes,103,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (x *ReplyAnalyzePage) Reset() {
	*x = ReplyAnalyzePage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyAnalyzePage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyAnalyzePage) ProtoMessage() {}

func (x *ReplyAnalyzePage) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyAnalyzePage.ProtoReflect.Descriptor instead.
func (*ReplyAnalyzePage) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{27}
}

func (x *ReplyAnalyzePage) GetPageTime() int32 {
	if x != nil {
		return x.PageTime
	}
	return 0
}

func (x *ReplyAnalyzePage) GetPageBytes() int32 {
	if x != nil {
		return x.PageBytes
	}
	return 0
}

func (x *ReplyAnalyzePage) GetErrs() []string {
	if x != nil {
		return x.Errs
	}
	return nil
}

func (x *ReplyAnalyzePage) GetReqs() []*AnalyzeReqInfo {
	if x != nil {
		return x.Reqs
	}
	return nil
}

func (x *ReplyAnalyzePage) GetScreenshots() []*AnalyzeScreenshot {
	if x != nil {
		return x.Screenshots
	}
	return nil
}

func (x *ReplyAnalyzePage) GetLogs() []string {
	if x != nil {
		return x.Logs
	}
	return nil
}

// CrawlerStatistics - cralwer statistics
type CrawlerStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNums    int32 `protobuf:"varint,1,opt,name=pageNums,proto3" json:"pageNums,omitempty"`
	ByteNums    int32 `protobuf:"varint,2,opt,name=byteNums,proto3" json:"byteNums,omitempty"`
	Time        int32 `protobuf:"varint,3,opt,name=time,proto3" json:"time,omitempty"`
	RequestNums int32 `protobuf:"varint,4,opt,name=requestNums,proto3" json:"requestNums,omitempty"`
}

func (x *CrawlerStatistics) Reset() {
	*x = CrawlerStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrawlerStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrawlerStatistics) ProtoMessage() {}

func (x *CrawlerStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrawlerStatistics.ProtoReflect.Descriptor instead.
func (*CrawlerStatistics) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{28}
}

func (x *CrawlerStatistics) GetPageNums() int32 {
	if x != nil {
		return x.PageNums
	}
	return 0
}

func (x *CrawlerStatistics) GetByteNums() int32 {
	if x != nil {
		return x.ByteNums
	}
	return 0
}

func (x *CrawlerStatistics) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *CrawlerStatistics) GetRequestNums() int32 {
	if x != nil {
		return x.RequestNums
	}
	return 0
}

// RequestCrawler - request crawler
type RequestCrawler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token       string      `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	CrawlerType CrawlerType `protobuf:"varint,2,opt,name=crawlerType,proto3,enum=jarviscrawlercore.CrawlerType" json:"crawlerType,omitempty"`
	Timeout     int32       `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Types that are assignable to CrawlerParam:
	//	*RequestCrawler_CbCompany
	//	*RequestCrawler_Translate2
	//	*RequestCrawler_Dtdata
	//	*RequestCrawler_AnalyzePage
	//	*RequestCrawler_Geoip
	//	*RequestCrawler_Techinasia
	//	*RequestCrawler_Steepandcheap
	//	*RequestCrawler_Jrj
	//	*RequestCrawler_Jd
	//	*RequestCrawler_Alimama
	//	*RequestCrawler_Mountainsteals
	//	*RequestCrawler_Tmall
	//	*RequestCrawler_Taobao
	//	*RequestCrawler_Manhuadb
	//	*RequestCrawler_Douban
	//	*RequestCrawler_Telegraph
	//	*RequestCrawler_Oabt
	//	*RequestCrawler_Hao6V
	//	*RequestCrawler_Publictransit
	//	*RequestCrawler_Article2
	//	*RequestCrawler_P6Vdy
	CrawlerParam isRequestCrawler_CrawlerParam `protobuf_oneof:"crawlerParam"`
}

func (x *RequestCrawler) Reset() {
	*x = RequestCrawler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCrawler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCrawler) ProtoMessage() {}

func (x *RequestCrawler) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCrawler.ProtoReflect.Descriptor instead.
func (*RequestCrawler) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{29}
}

func (x *RequestCrawler) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RequestCrawler) GetCrawlerType() CrawlerType {
	if x != nil {
		return x.CrawlerType
	}
	return CrawlerType_CT_TRANSLATE2
}

func (x *RequestCrawler) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (m *RequestCrawler) GetCrawlerParam() isRequestCrawler_CrawlerParam {
	if m != nil {
		return m.CrawlerParam
	}
	return nil
}

func (x *RequestCrawler) GetCbCompany() *RequestCrunchBaseCompany {
	if x, ok := x.GetCrawlerParam().(*RequestCrawler_CbCompany); ok {
		return x.CbCompany
	}
	return nil
}

func (x *RequestCrawler) GetTranslate2() *RequestTranslate2 {
	if x, ok := x.GetCrawlerParam().(*RequestCrawler_Translate2); ok {
		return x.Translate2
	}
	return nil
}

func (x *RequestCrawler) GetDtdata() *RequestDTData {
	if x, ok := x.GetCrawlerParam().(*RequestCrawler_Dtdata); ok {
		return x.Dtdata
	}
	return nil
}

func (x *RequestCrawler) GetAnalyzePage() *AnalyzePage {
	if x, ok := x.GetCrawlerParam().(*RequestCrawler_AnalyzePage); ok {
		return x.AnalyzePage
	}
	return nil
}

func (x *RequestCrawler) GetGeoip() *RequestGeoIP {
	if x, ok := x.GetCrawlerParam().(*RequestCrawler_Geoip); ok {
		return x.Geoip
	}
	return nil
}

func (x *RequestCrawler) GetTechinasia() *RequestTechInAsia {
	if x, ok := x.GetCrawlerParam().(*RequestCrawler_Techinasia); ok {
		return x.Techinasia
	}
	return nil
}

func (x *RequestCrawler) GetSteepandcheap() *RequestSteepAndCheap {
	if x, ok := x.GetCrawlerParam().(*RequestCrawler_Steepandcheap); ok {
		return x.Steepandcheap
	}
	return nil
}

func (x *RequestCrawler) GetJrj() *RequestJRJ {
	if x, ok := x.GetCrawlerParam().(*RequestCrawler_Jrj); ok {
		return x.Jrj
	}
	return nil
}

func (x *RequestCrawler) GetJd() *RequestJD {
	if x, ok := x.GetCrawlerParam().(*RequestCrawler_Jd); ok {
		return x.Jd
	}
	return nil
}

func (x *RequestCrawler) GetAlimama() *RequestAlimama {
	if x, ok := x.GetCrawlerParam().(*RequestCrawler_Alimama); ok {
		return x.Alimama
	}
	return nil
}

func (x *RequestCrawler) GetMountainsteals() *RequestMountainSteals {
	if x, ok := x.GetCrawlerParam().(*RequestCrawler_Mountainsteals); ok {
		return x.Mountainsteals
	}
	return nil
}

func (x *RequestCrawler) GetTmall() *RequestTmall {
	if x, ok := x.GetCrawlerParam().(*RequestCrawler_Tmall); ok {
		return x.Tmall
	}
	return nil
}

func (x *RequestCrawler) GetTaobao() *RequestTaobao {
	if x, ok := x.GetCrawlerParam().(*RequestCrawler_Taobao); ok {
		return x.Taobao
	}
	return nil
}

func (x *RequestCrawler) GetManhuadb() *RequestManhuaDB {
	if x, ok := x.GetCrawlerParam().(*RequestCrawler_Manhuadb); ok {
		return x.Manhuadb
	}
	return nil
}

func (x *RequestCrawler) GetDouban() *RequestDouban {
	if x, ok := x.GetCrawlerParam().(*RequestCrawler_Douban); ok {
		return x.Douban
	}
	return nil
}

func (x *RequestCrawler) GetTelegraph() *RequestTelegraph {
	if x, ok := x.GetCrawlerParam().(*RequestCrawler_Telegraph); ok {
		return x.Telegraph
	}
	return nil
}

func (x *RequestCrawler) GetOabt() *RequestOABT {
	if x, ok := x.GetCrawlerParam().(*RequestCrawler_Oabt); ok {
		return x.Oabt
	}
	return nil
}

func (x *RequestCrawler) GetHao6V() *RequestHao6V {
	if x, ok := x.GetCrawlerParam().(*RequestCrawler_Hao6V); ok {
		return x.Hao6V
	}
	return nil
}

func (x *RequestCrawler) GetPublictransit() *RequestPublicTransit {
	if x, ok := x.GetCrawlerParam().(*RequestCrawler_Publictransit); ok {
		return x.Publictransit
	}
	return nil
}

func (x *RequestCrawler) GetArticle2() *RequestArticle2 {
	if x, ok := x.GetCrawlerParam().(*RequestCrawler_Article2); ok {
		return x.Article2
	}
	return nil
}

func (x *RequestCrawler) GetP6Vdy() *RequestP6Vdy {
	if x, ok := x.GetCrawlerParam().(*RequestCrawler_P6Vdy); ok {
		return x.P6Vdy
	}
	return nil
}

type isRequestCrawler_CrawlerParam interface {
	isRequestCrawler_CrawlerParam()
}

type RequestCrawler_CbCompany struct {
	CbCompany *RequestCrunchBaseCompany `protobuf:"bytes,100,opt,name=cbCompany,proto3,oneof"`
}

type RequestCrawler_Translate2 struct {
	Translate2 *RequestTranslate2 `protobuf:"bytes,101,opt,name=translate2,proto3,oneof"`
}

type RequestCrawler_Dtdata struct {
	Dtdata *RequestDTData `protobuf:"bytes,102,opt,name=dtdata,proto3,oneof"`
}

type RequestCrawler_AnalyzePage struct {
	AnalyzePage *AnalyzePage `protobuf:"bytes,103,opt,name=analyzePage,proto3,oneof"`
}

type RequestCrawler_Geoip struct {
	Geoip *RequestGeoIP `protobuf:"bytes,105,opt,name=geoip,proto3,oneof"`
}

type RequestCrawler_Techinasia struct {
	Techinasia *RequestTechInAsia `protobuf:"bytes,106,opt,name=techinasia,proto3,oneof"`
}

type RequestCrawler_Steepandcheap struct {
	Steepandcheap *RequestSteepAndCheap `protobuf:"bytes,107,opt,name=steepandcheap,proto3,oneof"`
}

type RequestCrawler_Jrj struct {
	Jrj *RequestJRJ `protobuf:"bytes,108,opt,name=jrj,proto3,oneof"`
}

type RequestCrawler_Jd struct {
	Jd *RequestJD `protobuf:"bytes,109,opt,name=jd,proto3,oneof"`
}

type RequestCrawler_Alimama struct {
	Alimama *RequestAlimama `protobuf:"bytes,110,opt,name=alimama,proto3,oneof"`
}

type RequestCrawler_Mountainsteals struct {
	Mountainsteals *RequestMountainSteals `protobuf:"bytes,111,opt,name=mountainsteals,proto3,oneof"`
}

type RequestCrawler_Tmall struct {
	Tmall *RequestTmall `protobuf:"bytes,112,opt,name=tmall,proto3,oneof"`
}

type RequestCrawler_Taobao struct {
	Taobao *RequestTaobao `protobuf:"bytes,113,opt,name=taobao,proto3,oneof"`
}

type RequestCrawler_Manhuadb struct {
	Manhuadb *RequestManhuaDB `protobuf:"bytes,115,opt,name=manhuadb,proto3,oneof"`
}

type RequestCrawler_Douban struct {
	Douban *RequestDouban `protobuf:"bytes,116,opt,name=douban,proto3,oneof"`
}

type RequestCrawler_Telegraph struct {
	Telegraph *RequestTelegraph `protobuf:"bytes,117,opt,name=telegraph,proto3,oneof"`
}

type RequestCrawler_Oabt struct {
	Oabt *RequestOABT `protobuf:"bytes,118,opt,name=oabt,proto3,oneof"`
}

type RequestCrawler_Hao6V struct {
	Hao6V *RequestHao6V `protobuf:"bytes,119,opt,name=hao6v,proto3,oneof"`
}

type RequestCrawler_Publictransit struct {
	Publictransit *RequestPublicTransit `protobuf:"bytes,120,opt,name=publictransit,proto3,oneof"`
}

type RequestCrawler_Article2 struct {
	Article2 *RequestArticle2 `protobuf:"bytes,121,opt,name=article2,proto3,oneof"`
}

type RequestCrawler_P6Vdy struct {
	P6Vdy *RequestP6Vdy `protobuf:"bytes,122,opt,name=p6vdy,proto3,oneof"`
}

func (*RequestCrawler_CbCompany) isRequestCrawler_CrawlerParam() {}

func (*RequestCrawler_Translate2) isRequestCrawler_CrawlerParam() {}

func (*RequestCrawler_Dtdata) isRequestCrawler_CrawlerParam() {}

func (*RequestCrawler_AnalyzePage) isRequestCrawler_CrawlerParam() {}

func (*RequestCrawler_Geoip) isRequestCrawler_CrawlerParam() {}

func (*RequestCrawler_Techinasia) isRequestCrawler_CrawlerParam() {}

func (*RequestCrawler_Steepandcheap) isRequestCrawler_CrawlerParam() {}

func (*RequestCrawler_Jrj) isRequestCrawler_CrawlerParam() {}

func (*RequestCrawler_Jd) isRequestCrawler_CrawlerParam() {}

func (*RequestCrawler_Alimama) isRequestCrawler_CrawlerParam() {}

func (*RequestCrawler_Mountainsteals) isRequestCrawler_CrawlerParam() {}

func (*RequestCrawler_Tmall) isRequestCrawler_CrawlerParam() {}

func (*RequestCrawler_Taobao) isRequestCrawler_CrawlerParam() {}

func (*RequestCrawler_Manhuadb) isRequestCrawler_CrawlerParam() {}

func (*RequestCrawler_Douban) isRequestCrawler_CrawlerParam() {}

func (*RequestCrawler_Telegraph) isRequestCrawler_CrawlerParam() {}

func (*RequestCrawler_Oabt) isRequestCrawler_CrawlerParam() {}

func (*RequestCrawler_Hao6V) isRequestCrawler_CrawlerParam() {}

func (*RequestCrawler_Publictransit) isRequestCrawler_CrawlerParam() {}

func (*RequestCrawler_Article2) isRequestCrawler_CrawlerParam() {}

func (*RequestCrawler_P6Vdy) isRequestCrawler_CrawlerParam() {}

// ReplyCrawler - reply crawler
type ReplyCrawler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrawlerType CrawlerType        `protobuf:"varint,1,opt,name=crawlerType,proto3,enum=jarviscrawlercore.CrawlerType" json:"crawlerType,omitempty"`
	Statistics  *CrawlerStatistics `protobuf:"bytes,2,opt,name=statistics,proto3" json:"statistics,omitempty"`
	// Deprecated: Do not use.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// Types that are assignable to CrawlerResult:
	//	*ReplyCrawler_CbCompany
	//	*ReplyCrawler_TranslateResult
	//	*ReplyCrawler_Dtdata
	//	*ReplyCrawler_AnalyzePage
	//	*ReplyCrawler_Geoip
	//	*ReplyCrawler_Techinasia
	//	*ReplyCrawler_Steepandcheap
	//	*ReplyCrawler_Jrj
	//	*ReplyCrawler_Jd
	//	*ReplyCrawler_Alimama
	//	*ReplyCrawler_Mountainsteals
	//	*ReplyCrawler_Tmall
	//	*ReplyCrawler_Taobao
	//	*ReplyCrawler_Manhuadb
	//	*ReplyCrawler_Douban
	//	*ReplyCrawler_Telegraph
	//	*ReplyCrawler_Oabt
	//	*ReplyCrawler_Hao6V
	//	*ReplyCrawler_Publictransit
	//	*ReplyCrawler_Article2
	//	*ReplyCrawler_P6Vdy
	CrawlerResult isReplyCrawler_CrawlerResult `protobuf_oneof:"crawlerResult"`
}

func (x *ReplyCrawler) Reset() {
	*x = ReplyCrawler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyCrawler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyCrawler) ProtoMessage() {}

func (x *ReplyCrawler) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyCrawler.ProtoReflect.Descriptor instead.
func (*ReplyCrawler) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{30}
}

func (x *ReplyCrawler) GetCrawlerType() CrawlerType {
	if x != nil {
		return x.CrawlerType
	}
	return CrawlerType_CT_TRANSLATE2
}

func (x *ReplyCrawler) GetStatistics() *CrawlerStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

// Deprecated: Do not use.
func (x *ReplyCrawler) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (m *ReplyCrawler) GetCrawlerResult() isReplyCrawler_CrawlerResult {
	if m != nil {
		return m.CrawlerResult
	}
	return nil
}

func (x *ReplyCrawler) GetCbCompany() *CrunchBaseOrganization {
	if x, ok := x.GetCrawlerResult().(*ReplyCrawler_CbCompany); ok {
		return x.CbCompany
	}
	return nil
}

func (x *ReplyCrawler) GetTranslateResult() *TranslateResult {
	if x, ok := x.GetCrawlerResult().(*ReplyCrawler_TranslateResult); ok {
		return x.TranslateResult
	}
	return nil
}

func (x *ReplyCrawler) GetDtdata() *ReplyDTData {
	if x, ok := x.GetCrawlerResult().(*ReplyCrawler_Dtdata); ok {
		return x.Dtdata
	}
	return nil
}

func (x *ReplyCrawler) GetAnalyzePage() *ReplyAnalyzePage {
	if x, ok := x.GetCrawlerResult().(*ReplyCrawler_AnalyzePage); ok {
		return x.AnalyzePage
	}
	return nil
}

func (x *ReplyCrawler) GetGeoip() *ReplyGeoIP {
	if x, ok := x.GetCrawlerResult().(*ReplyCrawler_Geoip); ok {
		return x.Geoip
	}
	return nil
}

func (x *ReplyCrawler) GetTechinasia() *ReplyTechInAsia {
	if x, ok := x.GetCrawlerResult().(*ReplyCrawler_Techinasia); ok {
		return x.Techinasia
	}
	return nil
}

func (x *ReplyCrawler) GetSteepandcheap() *ReplySteepAndCheap {
	if x, ok := x.GetCrawlerResult().(*ReplyCrawler_Steepandcheap); ok {
		return x.Steepandcheap
	}
	return nil
}

func (x *ReplyCrawler) GetJrj() *ReplyJRJ {
	if x, ok := x.GetCrawlerResult().(*ReplyCrawler_Jrj); ok {
		return x.Jrj
	}
	return nil
}

func (x *ReplyCrawler) GetJd() *ReplyJD {
	if x, ok := x.GetCrawlerResult().(*ReplyCrawler_Jd); ok {
		return x.Jd
	}
	return nil
}

func (x *ReplyCrawler) GetAlimama() *ReplyAlimama {
	if x, ok := x.GetCrawlerResult().(*ReplyCrawler_Alimama); ok {
		return x.Alimama
	}
	return nil
}

func (x *ReplyCrawler) GetMountainsteals() *ReplyMountainSteals {
	if x, ok := x.GetCrawlerResult().(*ReplyCrawler_Mountainsteals); ok {
		return x.Mountainsteals
	}
	return nil
}

func (x *ReplyCrawler) GetTmall() *ReplyTmall {
	if x, ok := x.GetCrawlerResult().(*ReplyCrawler_Tmall); ok {
		return x.Tmall
	}
	return nil
}

func (x *ReplyCrawler) GetTaobao() *ReplyTaobao {
	if x, ok := x.GetCrawlerResult().(*ReplyCrawler_Taobao); ok {
		return x.Taobao
	}
	return nil
}

func (x *ReplyCrawler) GetManhuadb() *ReplyManhuaDB {
	if x, ok := x.GetCrawlerResult().(*ReplyCrawler_Manhuadb); ok {
		return x.Manhuadb
	}
	return nil
}

func (x *ReplyCrawler) GetDouban() *ReplyDouban {
	if x, ok := x.GetCrawlerResult().(*ReplyCrawler_Douban); ok {
		return x.Douban
	}
	return nil
}

func (x *ReplyCrawler) GetTelegraph() *ReplyTelegraph {
	if x, ok := x.GetCrawlerResult().(*ReplyCrawler_Telegraph); ok {
		return x.Telegraph
	}
	return nil
}

func (x *ReplyCrawler) GetOabt() *ReplyOABT {
	if x, ok := x.GetCrawlerResult().(*ReplyCrawler_Oabt); ok {
		return x.Oabt
	}
	return nil
}

func (x *ReplyCrawler) GetHao6V() *ReplyHao6V {
	if x, ok := x.GetCrawlerResult().(*ReplyCrawler_Hao6V); ok {
		return x.Hao6V
	}
	return nil
}

func (x *ReplyCrawler) GetPublictransit() *ReplyPublicTransit {
	if x, ok := x.GetCrawlerResult().(*ReplyCrawler_Publictransit); ok {
		return x.Publictransit
	}
	return nil
}

func (x *ReplyCrawler) GetArticle2() *ReplyArticle2 {
	if x, ok := x.GetCrawlerResult().(*ReplyCrawler_Article2); ok {
		return x.Article2
	}
	return nil
}

func (x *ReplyCrawler) GetP6Vdy() *ReplyP6Vdy {
	if x, ok := x.GetCrawlerResult().(*ReplyCrawler_P6Vdy); ok {
		return x.P6Vdy
	}
	return nil
}

type isReplyCrawler_CrawlerResult interface {
	isReplyCrawler_CrawlerResult()
}

type ReplyCrawler_CbCompany struct {
	CbCompany *CrunchBaseOrganization `protobuf:"bytes,100,opt,name=cbCompany,proto3,oneof"`
}

type ReplyCrawler_TranslateResult struct {
	TranslateResult *TranslateResult `protobuf:"bytes,101,opt,name=translateResult,proto3,oneof"`
}

type ReplyCrawler_Dtdata struct {
	Dtdata *ReplyDTData `protobuf:"bytes,102,opt,name=dtdata,proto3,oneof"`
}

type ReplyCrawler_AnalyzePage struct {
	AnalyzePage *ReplyAnalyzePage `protobuf:"bytes,103,opt,name=analyzePage,proto3,oneof"`
}

type ReplyCrawler_Geoip struct {
	Geoip *ReplyGeoIP `protobuf:"bytes,105,opt,name=geoip,proto3,oneof"`
}

type ReplyCrawler_Techinasia struct {
	Techinasia *ReplyTechInAsia `protobuf:"bytes,106,opt,name=techinasia,proto3,oneof"`
}

type ReplyCrawler_Steepandcheap struct {
	Steepandcheap *ReplySteepAndCheap `protobuf:"bytes,107,opt,name=steepandcheap,proto3,oneof"`
}

type ReplyCrawler_Jrj struct {
	Jrj *ReplyJRJ `protobuf:"bytes,108,opt,name=jrj,proto3,oneof"`
}

type ReplyCrawler_Jd struct {
	Jd *ReplyJD `protobuf:"bytes,109,opt,name=jd,proto3,oneof"`
}

type ReplyCrawler_Alimama struct {
	Alimama *ReplyAlimama `protobuf:"bytes,110,opt,name=alimama,proto3,oneof"`
}

type ReplyCrawler_Mountainsteals struct {
	Mountainsteals *ReplyMountainSteals `protobuf:"bytes,111,opt,name=mountainsteals,proto3,oneof"`
}

type ReplyCrawler_Tmall struct {
	Tmall *ReplyTmall `protobuf:"bytes,112,opt,name=tmall,proto3,oneof"`
}

type ReplyCrawler_Taobao struct {
	Taobao *ReplyTaobao `protobuf:"bytes,113,opt,name=taobao,proto3,oneof"`
}

type ReplyCrawler_Manhuadb struct {
	Manhuadb *ReplyManhuaDB `protobuf:"bytes,115,opt,name=manhuadb,proto3,oneof"`
}

type ReplyCrawler_Douban struct {
	Douban *ReplyDouban `protobuf:"bytes,116,opt,name=douban,proto3,oneof"`
}

type ReplyCrawler_Telegraph struct {
	Telegraph *ReplyTelegraph `protobuf:"bytes,117,opt,name=telegraph,proto3,oneof"`
}

type ReplyCrawler_Oabt struct {
	Oabt *ReplyOABT `protobuf:"bytes,118,opt,name=oabt,proto3,oneof"`
}

type ReplyCrawler_Hao6V struct {
	Hao6V *ReplyHao6V `protobuf:"bytes,119,opt,name=hao6v,proto3,oneof"`
}

type ReplyCrawler_Publictransit struct {
	Publictransit *ReplyPublicTransit `protobuf:"bytes,120,opt,name=publictransit,proto3,oneof"`
}

type ReplyCrawler_Article2 struct {
	Article2 *ReplyArticle2 `protobuf:"bytes,121,opt,name=article2,proto3,oneof"`
}

type ReplyCrawler_P6Vdy struct {
	P6Vdy *ReplyP6Vdy `protobuf:"bytes,122,opt,name=p6vdy,proto3,oneof"`
}

func (*ReplyCrawler_CbCompany) isReplyCrawler_CrawlerResult() {}

func (*ReplyCrawler_TranslateResult) isReplyCrawler_CrawlerResult() {}

func (*ReplyCrawler_Dtdata) isReplyCrawler_CrawlerResult() {}

func (*ReplyCrawler_AnalyzePage) isReplyCrawler_CrawlerResult() {}

func (*ReplyCrawler_Geoip) isReplyCrawler_CrawlerResult() {}

func (*ReplyCrawler_Techinasia) isReplyCrawler_CrawlerResult() {}

func (*ReplyCrawler_Steepandcheap) isReplyCrawler_CrawlerResult() {}

func (*ReplyCrawler_Jrj) isReplyCrawler_CrawlerResult() {}

func (*ReplyCrawler_Jd) isReplyCrawler_CrawlerResult() {}

func (*ReplyCrawler_Alimama) isReplyCrawler_CrawlerResult() {}

func (*ReplyCrawler_Mountainsteals) isReplyCrawler_CrawlerResult() {}

func (*ReplyCrawler_Tmall) isReplyCrawler_CrawlerResult() {}

func (*ReplyCrawler_Taobao) isReplyCrawler_CrawlerResult() {}

func (*ReplyCrawler_Manhuadb) isReplyCrawler_CrawlerResult() {}

func (*ReplyCrawler_Douban) isReplyCrawler_CrawlerResult() {}

func (*ReplyCrawler_Telegraph) isReplyCrawler_CrawlerResult() {}

func (*ReplyCrawler_Oabt) isReplyCrawler_CrawlerResult() {}

func (*ReplyCrawler_Hao6V) isReplyCrawler_CrawlerResult() {}

func (*ReplyCrawler_Publictransit) isReplyCrawler_CrawlerResult() {}

func (*ReplyCrawler_Article2) isReplyCrawler_CrawlerResult() {}

func (*ReplyCrawler_P6Vdy) isReplyCrawler_CrawlerResult() {}

// ReplyCrawler - reply crawler
type ReplyCrawlerStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// totalLength - If the message is too long,
	// it will send data in multiple msg, this is the total length.
	TotalLength int32 `protobuf:"varint,1,opt,name=totalLength,proto3" json:"totalLength,omitempty"`
	// curStart - The starting point of the current data (in bytes).
	CurStart int32 `protobuf:"varint,2,opt,name=curStart,proto3" json:"curStart,omitempty"`
	// curLength - The length of the current data (in bytes).
	CurLength int32 `protobuf:"varint,3,opt,name=curLength,proto3" json:"curLength,omitempty"`
	// hashData - This is the hash of each paragraph.
	HashData string `protobuf:"bytes,4,opt,name=hashData,proto3" json:"hashData,omitempty"`
	// totalHashData - If multiple messages return data,
	// this is the hash value of all data, only sent in the last message.
	TotalHashData string `protobuf:"bytes,5,opt,name=totalHashData,proto3" json:"totalHashData,omitempty"`
	// data
	Data         []byte        `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	Version      string        `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
	Error        string        `protobuf:"bytes,100,opt,name=error,proto3" json:"error,omitempty"`
	ReplyCrawler *ReplyCrawler `protobuf:"bytes,200,opt,name=replyCrawler,proto3" json:"replyCrawler,omitempty"`
}

func (x *ReplyCrawlerStream) Reset() {
	*x = ReplyCrawlerStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyCrawlerStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyCrawlerStream) ProtoMessage() {}

func (x *ReplyCrawlerStream) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyCrawlerStream.ProtoReflect.Descriptor instead.
func (*ReplyCrawlerStream) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{31}
}

func (x *ReplyCrawlerStream) GetTotalLength() int32 {
	if x != nil {
		return x.TotalLength
	}
	return 0
}

func (x *ReplyCrawlerStream) GetCurStart() int32 {
	if x != nil {
		return x.CurStart
	}
	return 0
}

func (x *ReplyCrawlerStream) GetCurLength() int32 {
	if x != nil {
		return x.CurLength
	}
	return 0
}

func (x *ReplyCrawlerStream) GetHashData() string {
	if x != nil {
		return x.HashData
	}
	return ""
}

func (x *ReplyCrawlerStream) GetTotalHashData() string {
	if x != nil {
		return x.TotalHashData
	}
	return ""
}

func (x *ReplyCrawlerStream) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ReplyCrawlerStream) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ReplyCrawlerStream) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ReplyCrawlerStream) GetReplyCrawler() *ReplyCrawler {
	if x != nil {
		return x.ReplyCrawler
	}
	return nil
}

var File_result_proto protoreflect.FileDescriptor

var file_result_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11,
	0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72,
	0x65, 0x1a, 0x0d, 0x61, 0x6c, 0x69, 0x6d, 0x61, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x13, 0x73, 0x74, 0x65, 0x65, 0x70, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x65, 0x61, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73,
	0x74, 0x65, 0x61, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x74, 0x6d, 0x61,
	0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x74, 0x61, 0x6f, 0x62, 0x61, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x6d, 0x61, 0x6e, 0x68, 0x75, 0x61, 0x64, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x61, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x09, 0x6a, 0x72, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0f, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0a, 0x6f, 0x61, 0x62, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x68, 0x61,
	0x6f, 0x36, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x08,
	0x6a, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x74, 0x65, 0x63, 0x68, 0x69, 0x6e,
	0x61, 0x73, 0x69, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x67, 0x65, 0x6f, 0x69,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x08, 0x64, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0e, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0b, 0x70, 0x36, 0x76, 0x64, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7b,
	0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x61, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x61, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8b, 0x01, 0x0a, 0x09,
	0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x30, 0x0a, 0x02, 0x70, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72,
	0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x02, 0x70, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x6d, 0x67, 0x48, 0x61, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x69, 0x6d, 0x67, 0x48, 0x61, 0x73, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x67, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x6d, 0x67, 0x55, 0x52, 0x4c, 0x22, 0xe9, 0x02, 0x0a, 0x13, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x30, 0x0a, 0x04, 0x69, 0x6d, 0x67,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73,
	0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6d, 0x67, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x3c, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65,
	0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x52,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x85, 0x02, 0x0a, 0x07, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69,
	0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e,
	0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0x45, 0x0a,
	0x0b, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x08,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x73, 0x22, 0x58, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22, 0x71,
	0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x12, 0x3d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65,
	0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x22, 0x5d, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x41,
	0x6c, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6a, 0x61, 0x72,
	0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x6c, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x22, 0x73, 0x0a, 0x0b, 0x59, 0x43, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x73, 0x61, 0x70, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x69, 0x73, 0x61, 0x70, 0x70, 0x22, 0x8a, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x75, 0x6e, 0x63, 0x68,
	0x42, 0x61, 0x73, 0x65, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x75, 0x6e, 0x63, 0x68, 0x42, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x61,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x6c, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x61,
	0x69, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x65,
	0x79, 0x52, 0x61, 0x69, 0x73, 0x65, 0x64, 0x22, 0xc7, 0x02, 0x0a, 0x15, 0x43, 0x72, 0x75, 0x6e,
	0x63, 0x68, 0x42, 0x61, 0x73, 0x65, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3a, 0x0a, 0x18, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a,
	0x18, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x18, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x69,
	0x6e, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72,
	0x69, 0x6e, 0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x69, 0x6e, 0x67,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x69, 0x6e,
	0x67, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x78, 0x0a, 0x12, 0x43, 0x72, 0x75, 0x6e, 0x63, 0x68, 0x42, 0x61, 0x73, 0x65, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6c,
	0x65, 0x61, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x16,
	0x43, 0x72, 0x75, 0x6e, 0x63, 0x68, 0x42, 0x61, 0x73, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x52,
	0x61, 0x69, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x6f, 0x6e,
	0x65, 0x79, 0x52, 0x61, 0x69, 0x73, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6a, 0x61,
	0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x72, 0x75, 0x6e, 0x63, 0x68, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x22, 0xc4, 0x06,
	0x0a, 0x16, 0x43, 0x72, 0x75, 0x6e, 0x63, 0x68, 0x42, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x30, 0x0a, 0x13, 0x68, 0x65, 0x61, 0x64, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x68,
	0x65, 0x61, 0x64, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x75,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x46,
	0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x65,
	0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c,
	0x65, 0x67, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x50, 0x4f, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x50, 0x4f, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x49, 0x50, 0x4f, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x49, 0x50, 0x4f, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61,
	0x74, 0x65, 0x49, 0x50, 0x4f, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x50, 0x4f, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x61, 0x69,
	0x73, 0x65, 0x64, 0x49, 0x50, 0x4f, 0x18, 0x68, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6f,
	0x6e, 0x65, 0x79, 0x52, 0x61, 0x69, 0x73, 0x65, 0x64, 0x49, 0x50, 0x4f, 0x12, 0x50, 0x0a, 0x0d,
	0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0xc8, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61,
	0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x75, 0x6e, 0x63, 0x68, 0x42,
	0x61, 0x73, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52,
	0x0d, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x4a,
	0x0a, 0x0c, 0x63, 0x75, 0x72, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x18, 0xad,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72,
	0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x75, 0x6e, 0x63, 0x68,
	0x42, 0x61, 0x73, 0x65, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x0c, 0x63, 0x75,
	0x72, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x91, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65,
	0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x75, 0x6e, 0x63, 0x68, 0x42, 0x61, 0x73, 0x65,
	0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x0c, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x4c, 0x0a, 0x0d, 0x70, 0x61, 0x73, 0x74, 0x45, 0x6d,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x18, 0xf5, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x72, 0x75, 0x6e, 0x63, 0x68, 0x42, 0x61, 0x73, 0x65, 0x45, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x52, 0x0d, 0x70, 0x61, 0x73, 0x74, 0x45, 0x6d, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x65, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x72, 0x63,
	0x4c, 0x61, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x72, 0x63, 0x4c,
	0x61, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x24, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x5c, 0x0a, 0x0e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x4a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x4a, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x80, 0x02, 0x0a, 0x0c, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6a, 0x61, 0x72,
	0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x75, 0x72,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x48, 0x61, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7f, 0x0a, 0x0f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x4a,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x4a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4b, 0x0a,
	0x0d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x3a,
	0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x22, 0x32, 0x0a, 0x18, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x72, 0x75, 0x6e, 0x63, 0x68, 0x42, 0x61, 0x73, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0x79,
	0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x65, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x72, 0x63, 0x4c, 0x61, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x72, 0x63, 0x4c, 0x61, 0x6e, 0x67, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x65, 0x73, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x65, 0x73, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x22, 0x25, 0x0a, 0x0f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x22, 0xcf, 0x02, 0x0a, 0x0b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x69, 0x65, 0x77,
	0x70, 0x6f, 0x72, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x76, 0x69, 0x65, 0x77, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x26,
	0x0a, 0x0e, 0x76, 0x69, 0x65, 0x77, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x76, 0x69, 0x65, 0x77, 0x70, 0x6f, 0x72, 0x74,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x4c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4c, 0x61, 0x6e, 0x64, 0x73, 0x63, 0x61,
	0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x65, 0x65, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x65, 0x65,
	0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x65, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x6e, 0x65, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x22, 0x77, 0x0a, 0x11, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6a, 0x61, 0x72, 0x76,
	0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x75, 0x66,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x62, 0x75, 0x66, 0x22, 0xc4, 0x02, 0x0a, 0x0e,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x22, 0x0a, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x66, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x75, 0x66, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x47, 0x5a, 0x69, 0x70,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x47, 0x5a, 0x69, 0x70, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x61, 0x64, 0x64, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x61, 0x64, 0x64, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x67, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x64, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6d, 0x67, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x67, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6d, 0x67, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x22, 0xf3, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x72, 0x72, 0x73, 0x18, 0x64, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x65, 0x72, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x72, 0x65, 0x71, 0x73, 0x18, 0x65, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77,
	0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52,
	0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x72, 0x65, 0x71, 0x73, 0x12, 0x46, 0x0a, 0x0b,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x66, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65,
	0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x0b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73,
	0x68, 0x6f, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x67, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x61,
	0x77, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x79,
	0x74, 0x65, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x79,
	0x74, 0x65, 0x4e, 0x75, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x73, 0x22, 0xe2, 0x0b, 0x0a,
	0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6a, 0x61, 0x72,
	0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x72, 0x61, 0x77,
	0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x4b, 0x0a, 0x09, 0x63, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61,
	0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x72, 0x75, 0x6e, 0x63, 0x68, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x48, 0x00, 0x52, 0x09, 0x63, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x46,
	0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x32, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c,
	0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x32, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x65, 0x32, 0x12, 0x3a, 0x0a, 0x06, 0x64, 0x74, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63,
	0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x44, 0x54, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x06, 0x64, 0x74, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x42, 0x0a, 0x0b, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x50, 0x61, 0x67,
	0x65, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73,
	0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x50, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x18,
	0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72,
	0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x47, 0x65, 0x6f, 0x49, 0x50, 0x48, 0x00, 0x52, 0x05, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x12,
	0x46, 0x0a, 0x0a, 0x74, 0x65, 0x63, 0x68, 0x69, 0x6e, 0x61, 0x73, 0x69, 0x61, 0x18, 0x6a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77,
	0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x65, 0x63, 0x68, 0x49, 0x6e, 0x41, 0x73, 0x69, 0x61, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x65, 0x63,
	0x68, 0x69, 0x6e, 0x61, 0x73, 0x69, 0x61, 0x12, 0x4f, 0x0a, 0x0d, 0x73, 0x74, 0x65, 0x65, 0x70,
	0x61, 0x6e, 0x64, 0x63, 0x68, 0x65, 0x61, 0x70, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x65, 0x70, 0x41,
	0x6e, 0x64, 0x43, 0x68, 0x65, 0x61, 0x70, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x65, 0x65, 0x70,
	0x61, 0x6e, 0x64, 0x63, 0x68, 0x65, 0x61, 0x70, 0x12, 0x31, 0x0a, 0x03, 0x6a, 0x72, 0x6a, 0x18,
	0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72,
	0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4a, 0x52, 0x4a, 0x48, 0x00, 0x52, 0x03, 0x6a, 0x72, 0x6a, 0x12, 0x2e, 0x0a, 0x02, 0x6a,
	0x64, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73,
	0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4a, 0x44, 0x48, 0x00, 0x52, 0x02, 0x6a, 0x64, 0x12, 0x3d, 0x0a, 0x07, 0x61,
	0x6c, 0x69, 0x6d, 0x61, 0x6d, 0x61, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6a,
	0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6c, 0x69, 0x6d, 0x61, 0x6d, 0x61, 0x48,
	0x00, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x6d, 0x61, 0x6d, 0x61, 0x12, 0x52, 0x0a, 0x0e, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x73, 0x18, 0x6f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c,
	0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x6f,
	0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x65, 0x61, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x0e,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x73, 0x12, 0x37,
	0x0a, 0x05, 0x74, 0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x6d, 0x61, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x05, 0x74, 0x6d, 0x61, 0x6c, 0x6c, 0x12, 0x3a, 0x0a, 0x06, 0x74, 0x61, 0x6f, 0x62, 0x61,
	0x6f, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73,
	0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x61, 0x6f, 0x62, 0x61, 0x6f, 0x48, 0x00, 0x52, 0x06, 0x74, 0x61, 0x6f,
	0x62, 0x61, 0x6f, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x61, 0x6e, 0x68, 0x75, 0x61, 0x64, 0x62, 0x18,
	0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72,
	0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4d, 0x61, 0x6e, 0x68, 0x75, 0x61, 0x44, 0x42, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x6e,
	0x68, 0x75, 0x61, 0x64, 0x62, 0x12, 0x3a, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x61, 0x6e, 0x18,
	0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72,
	0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x6f, 0x75, 0x62, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x61,
	0x6e, 0x12, 0x43, 0x0a, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x75,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61,
	0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x48, 0x00, 0x52, 0x09, 0x74, 0x65, 0x6c,
	0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x34, 0x0a, 0x04, 0x6f, 0x61, 0x62, 0x74, 0x18, 0x76,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61,
	0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4f, 0x41, 0x42, 0x54, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x61, 0x62, 0x74, 0x12, 0x37, 0x0a, 0x05,
	0x68, 0x61, 0x6f, 0x36, 0x76, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x61,
	0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x61, 0x6f, 0x36, 0x76, 0x48, 0x00, 0x52, 0x05,
	0x68, 0x61, 0x6f, 0x36, 0x76, 0x12, 0x4f, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6a,
	0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x32, 0x18, 0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69,
	0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x32, 0x48, 0x00, 0x52, 0x08,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x32, 0x12, 0x37, 0x0a, 0x05, 0x70, 0x36, 0x76, 0x64,
	0x79, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73,
	0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x36, 0x76, 0x64, 0x79, 0x48, 0x00, 0x52, 0x05, 0x70, 0x36, 0x76, 0x64,
	0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x22, 0xfc, 0x0b, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x72, 0x61, 0x77, 0x6c,
	0x65, 0x72, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73,
	0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x61, 0x77,
	0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69,
	0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x72, 0x61,
	0x77, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1c, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x09, 0x63, 0x62, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6a, 0x61,
	0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x72, 0x75, 0x6e, 0x63, 0x68, 0x42, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x63, 0x62, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x12, 0x4e, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6a,
	0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x48, 0x00, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x64, 0x74, 0x64, 0x61, 0x74, 0x61, 0x18, 0x66, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77,
	0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x54, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x06, 0x64, 0x74, 0x64, 0x61, 0x74, 0x61, 0x12, 0x47, 0x0a,
	0x0b, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x50, 0x61, 0x67, 0x65, 0x18, 0x67, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c,
	0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x50, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x18,
	0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72,
	0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x47,
	0x65, 0x6f, 0x49, 0x50, 0x48, 0x00, 0x52, 0x05, 0x67, 0x65, 0x6f, 0x69, 0x70, 0x12, 0x44, 0x0a,
	0x0a, 0x74, 0x65, 0x63, 0x68, 0x69, 0x6e, 0x61, 0x73, 0x69, 0x61, 0x18, 0x6a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65,
	0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x65, 0x63, 0x68, 0x49,
	0x6e, 0x41, 0x73, 0x69, 0x61, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x65, 0x63, 0x68, 0x69, 0x6e, 0x61,
	0x73, 0x69, 0x61, 0x12, 0x4d, 0x0a, 0x0d, 0x73, 0x74, 0x65, 0x65, 0x70, 0x61, 0x6e, 0x64, 0x63,
	0x68, 0x65, 0x61, 0x70, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6a, 0x61, 0x72,
	0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x65, 0x65, 0x70, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x65, 0x61,
	0x70, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x65, 0x65, 0x70, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x65,
	0x61, 0x70, 0x12, 0x2f, 0x0a, 0x03, 0x6a, 0x72, 0x6a, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4a, 0x52, 0x4a, 0x48, 0x00, 0x52, 0x03,
	0x6a, 0x72, 0x6a, 0x12, 0x2c, 0x0a, 0x02, 0x6a, 0x64, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4a, 0x44, 0x48, 0x00, 0x52, 0x02, 0x6a,
	0x64, 0x12, 0x3b, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x6d, 0x61, 0x6d, 0x61, 0x18, 0x6e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c,
	0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x41, 0x6c, 0x69, 0x6d,
	0x61, 0x6d, 0x61, 0x48, 0x00, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x6d, 0x61, 0x6d, 0x61, 0x12, 0x50,
	0x0a, 0x0e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x73,
	0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63,
	0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x65, 0x61, 0x6c, 0x73, 0x48, 0x00,
	0x52, 0x0e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x73,
	0x12, 0x35, 0x0a, 0x05, 0x74, 0x6d, 0x61, 0x6c, 0x6c, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6d, 0x61, 0x6c, 0x6c, 0x48, 0x00,
	0x52, 0x05, 0x74, 0x6d, 0x61, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x06, 0x74, 0x61, 0x6f, 0x62, 0x61,
	0x6f, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73,
	0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x54, 0x61, 0x6f, 0x62, 0x61, 0x6f, 0x48, 0x00, 0x52, 0x06, 0x74, 0x61, 0x6f, 0x62, 0x61,
	0x6f, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x61, 0x6e, 0x68, 0x75, 0x61, 0x64, 0x62, 0x18, 0x73, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77,
	0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4d, 0x61, 0x6e,
	0x68, 0x75, 0x61, 0x44, 0x42, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x6e, 0x68, 0x75, 0x61, 0x64,
	0x62, 0x12, 0x38, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x61, 0x6e, 0x18, 0x74, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65,
	0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x6f, 0x75, 0x62, 0x61,
	0x6e, 0x48, 0x00, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x61, 0x6e, 0x12, 0x41, 0x0a, 0x09, 0x74,
	0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x48, 0x00, 0x52, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x32,
	0x0a, 0x04, 0x6f, 0x61, 0x62, 0x74, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6a,
	0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x4f, 0x41, 0x42, 0x54, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x61,
	0x62, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x68, 0x61, 0x6f, 0x36, 0x76, 0x18, 0x77, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65,
	0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x48, 0x61, 0x6f, 0x36, 0x76,
	0x48, 0x00, 0x52, 0x05, 0x68, 0x61, 0x6f, 0x36, 0x76, 0x12, 0x4d, 0x0a, 0x0d, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x32, 0x18, 0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6a, 0x61, 0x72,
	0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x32, 0x48, 0x00, 0x52, 0x08,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x32, 0x12, 0x35, 0x0a, 0x05, 0x70, 0x36, 0x76, 0x64,
	0x79, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73,
	0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x50, 0x36, 0x76, 0x64, 0x79, 0x48, 0x00, 0x52, 0x05, 0x70, 0x36, 0x76, 0x64, 0x79, 0x42,
	0x0f, 0x0a, 0x0d, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xbc, 0x02, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65,
	0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x75, 0x72, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x61, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x61, 0x73,
	0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x44, 0x0a, 0x0c, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65,
	0x72, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x2a,
	0x69, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x54, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x54,
	0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x54, 0x5f, 0x48,
	0x45, 0x41, 0x44, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x54, 0x5f,
	0x50, 0x4f, 0x53, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x54,
	0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x2a, 0xe9, 0x02, 0x0a, 0x0b, 0x43,
	0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x54,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4c, 0x41, 0x54, 0x45, 0x32, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x43, 0x54, 0x5f, 0x43, 0x42, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x59, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x54, 0x5f, 0x44, 0x54, 0x44, 0x41, 0x54, 0x41, 0x10, 0x02, 0x12,
	0x12, 0x0a, 0x0e, 0x43, 0x54, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x5a, 0x45, 0x50, 0x41, 0x47,
	0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x54, 0x5f, 0x47, 0x45, 0x4f, 0x49, 0x50, 0x10,
	0x05, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x54, 0x5f, 0x54, 0x45, 0x43, 0x48, 0x49, 0x4e, 0x41, 0x53,
	0x49, 0x41, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x45, 0x45, 0x50,
	0x41, 0x4e, 0x44, 0x43, 0x48, 0x45, 0x41, 0x50, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x54,
	0x5f, 0x4a, 0x52, 0x4a, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x54, 0x5f, 0x4a, 0x44, 0x10,
	0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x54, 0x5f, 0x41, 0x4c, 0x49, 0x4d, 0x41, 0x4d, 0x41, 0x10,
	0x0a, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x54, 0x5f, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x41, 0x49, 0x4e,
	0x53, 0x54, 0x45, 0x41, 0x4c, 0x53, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x54, 0x5f, 0x54,
	0x4d, 0x41, 0x4c, 0x4c, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x54, 0x5f, 0x54, 0x41, 0x4f,
	0x42, 0x41, 0x4f, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x54, 0x5f, 0x4d, 0x41, 0x4e, 0x48,
	0x55, 0x41, 0x44, 0x42, 0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x54, 0x5f, 0x44, 0x4f, 0x55,
	0x42, 0x41, 0x4e, 0x10, 0x10, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x54, 0x5f, 0x54, 0x45, 0x4c, 0x45,
	0x47, 0x52, 0x41, 0x50, 0x48, 0x10, 0x11, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x54, 0x5f, 0x4f, 0x41,
	0x42, 0x54, 0x10, 0x12, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x54, 0x5f, 0x48, 0x41, 0x4f, 0x36, 0x56,
	0x10, 0x13, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x54, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x10, 0x14, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x54, 0x5f, 0x41,
	0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x32, 0x10, 0x15, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x54, 0x5f,
	0x36, 0x56, 0x44, 0x59, 0x10, 0x16, 0x2a, 0x31, 0x0a, 0x15, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x41, 0x53, 0x54, 0x5f, 0x4a, 0x50, 0x47, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x41, 0x53, 0x54, 0x5f, 0x50, 0x4e, 0x47, 0x10, 0x01, 0x32, 0xce, 0x03, 0x0a, 0x14, 0x4a, 0x61,
	0x72, 0x76, 0x69, 0x73, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x55, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x23, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x65, 0x1a, 0x21, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61,
	0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0d, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x21, 0x2e, 0x6a, 0x61, 0x72,
	0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x1a, 0x1f, 0x2e,
	0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x55, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x73, 0x12, 0x22, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65,
	0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x73, 0x1a, 0x20, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72,
	0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x09, 0x67, 0x65, 0x74,
	0x44, 0x54, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63,
	0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x44, 0x54, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x1e, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69,
	0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x44, 0x54, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x6a,
	0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x1a,
	0x25, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x00, 0x30, 0x01, 0x42, 0x20, 0x5a, 0x1e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x7a, 0x68, 0x73, 0x30, 0x30, 0x37, 0x2f,
	0x6a, 0x63, 0x63, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_result_proto_rawDescOnce sync.Once
	file_result_proto_rawDescData = file_result_proto_rawDesc
)

func file_result_proto_rawDescGZIP() []byte {
	file_result_proto_rawDescOnce.Do(func() {
		file_result_proto_rawDescData = protoimpl.X.CompressGZIP(file_result_proto_rawDescData)
	})
	return file_result_proto_rawDescData
}

var file_result_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_result_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_result_proto_goTypes = []interface{}{
	(ParagraphType)(0),               // 0: jarviscrawlercore.ParagraphType
	(CrawlerType)(0),                 // 1: jarviscrawlercore.CrawlerType
	(AnalyzeScreenshotType)(0),       // 2: jarviscrawlercore.AnalyzeScreenshotType
	(*ImageInfo)(nil),                // 3: jarviscrawlercore.ImageInfo
	(*Paragraph)(nil),                // 4: jarviscrawlercore.Paragraph
	(*ExportArticleResult)(nil),      // 5: jarviscrawlercore.ExportArticleResult
	(*Article)(nil),                  // 6: jarviscrawlercore.Article
	(*ArticleList)(nil),              // 7: jarviscrawlercore.ArticleList
	(*ConfluenceUpdateItem)(nil),     // 8: jarviscrawlercore.ConfluenceUpdateItem
	(*ConfluenceUpdateGrouping)(nil), // 9: jarviscrawlercore.ConfluenceUpdateGrouping
	(*ConfluenceAllUpdates)(nil),     // 10: jarviscrawlercore.ConfluenceAllUpdates
	(*YCCompanies)(nil),              // 11: jarviscrawlercore.YCCompanies
	(*CrunchBaseEmployee)(nil),       // 12: jarviscrawlercore.CrunchBaseEmployee
	(*CrunchBaseInvestment)(nil),     // 13: jarviscrawlercore.CrunchBaseInvestment
	(*CrunchBaseAcquisition)(nil),    // 14: jarviscrawlercore.CrunchBaseAcquisition
	(*CrunchBaseInvestor)(nil),       // 15: jarviscrawlercore.CrunchBaseInvestor
	(*CrunchBaseFundingRound)(nil),   // 16: jarviscrawlercore.CrunchBaseFundingRound
	(*CrunchBaseOrganization)(nil),   // 17: jarviscrawlercore.CrunchBaseOrganization
	(*RequestTranslate)(nil),         // 18: jarviscrawlercore.RequestTranslate
	(*ReplyTranslate)(nil),           // 19: jarviscrawlercore.ReplyTranslate
	(*RequestArticle)(nil),           // 20: jarviscrawlercore.RequestArticle
	(*ReplyArticle)(nil),             // 21: jarviscrawlercore.ReplyArticle
	(*RequestArticles)(nil),          // 22: jarviscrawlercore.RequestArticles
	(*ReplyArticles)(nil),            // 23: jarviscrawlercore.ReplyArticles
	(*RequestCrunchBaseCompany)(nil), // 24: jarviscrawlercore.RequestCrunchBaseCompany
	(*RequestTranslate2)(nil),        // 25: jarviscrawlercore.RequestTranslate2
	(*TranslateResult)(nil),          // 26: jarviscrawlercore.TranslateResult
	(*AnalyzePage)(nil),              // 27: jarviscrawlercore.AnalyzePage
	(*AnalyzeScreenshot)(nil),        // 28: jarviscrawlercore.AnalyzeScreenshot
	(*AnalyzeReqInfo)(nil),           // 29: jarviscrawlercore.AnalyzeReqInfo
	(*ReplyAnalyzePage)(nil),         // 30: jarviscrawlercore.ReplyAnalyzePage
	(*CrawlerStatistics)(nil),        // 31: jarviscrawlercore.CrawlerStatistics
	(*RequestCrawler)(nil),           // 32: jarviscrawlercore.RequestCrawler
	(*ReplyCrawler)(nil),             // 33: jarviscrawlercore.ReplyCrawler
	(*ReplyCrawlerStream)(nil),       // 34: jarviscrawlercore.ReplyCrawlerStream
	(*RequestDTData)(nil),            // 35: jarviscrawlercore.RequestDTData
	(*RequestGeoIP)(nil),             // 36: jarviscrawlercore.RequestGeoIP
	(*RequestTechInAsia)(nil),        // 37: jarviscrawlercore.RequestTechInAsia
	(*RequestSteepAndCheap)(nil),     // 38: jarviscrawlercore.RequestSteepAndCheap
	(*RequestJRJ)(nil),               // 39: jarviscrawlercore.RequestJRJ
	(*RequestJD)(nil),                // 40: jarviscrawlercore.RequestJD
	(*RequestAlimama)(nil),           // 41: jarviscrawlercore.RequestAlimama
	(*RequestMountainSteals)(nil),    // 42: jarviscrawlercore.RequestMountainSteals
	(*RequestTmall)(nil),             // 43: jarviscrawlercore.RequestTmall
	(*RequestTaobao)(nil),            // 44: jarviscrawlercore.RequestTaobao
	(*RequestManhuaDB)(nil),          // 45: jarviscrawlercore.RequestManhuaDB
	(*RequestDouban)(nil),            // 46: jarviscrawlercore.RequestDouban
	(*RequestTelegraph)(nil),         // 47: jarviscrawlercore.RequestTelegraph
	(*RequestOABT)(nil),              // 48: jarviscrawlercore.RequestOABT
	(*RequestHao6V)(nil),             // 49: jarviscrawlercore.RequestHao6v
	(*RequestPublicTransit)(nil),     // 50: jarviscrawlercore.RequestPublicTransit
	(*RequestArticle2)(nil),          // 51: jarviscrawlercore.RequestArticle2
	(*RequestP6Vdy)(nil),             // 52: jarviscrawlercore.RequestP6vdy
	(*ReplyDTData)(nil),              // 53: jarviscrawlercore.ReplyDTData
	(*ReplyGeoIP)(nil),               // 54: jarviscrawlercore.ReplyGeoIP
	(*ReplyTechInAsia)(nil),          // 55: jarviscrawlercore.ReplyTechInAsia
	(*ReplySteepAndCheap)(nil),       // 56: jarviscrawlercore.ReplySteepAndCheap
	(*ReplyJRJ)(nil),                 // 57: jarviscrawlercore.ReplyJRJ
	(*ReplyJD)(nil),                  // 58: jarviscrawlercore.ReplyJD
	(*ReplyAlimama)(nil),             // 59: jarviscrawlercore.ReplyAlimama
	(*ReplyMountainSteals)(nil),      // 60: jarviscrawlercore.ReplyMountainSteals
	(*ReplyTmall)(nil),               // 61: jarviscrawlercore.ReplyTmall
	(*ReplyTaobao)(nil),              // 62: jarviscrawlercore.ReplyTaobao
	(*ReplyManhuaDB)(nil),            // 63: jarviscrawlercore.ReplyManhuaDB
	(*ReplyDouban)(nil),              // 64: jarviscrawlercore.ReplyDouban
	(*ReplyTelegraph)(nil),           // 65: jarviscrawlercore.ReplyTelegraph
	(*ReplyOABT)(nil),                // 66: jarviscrawlercore.ReplyOABT
	(*ReplyHao6V)(nil),               // 67: jarviscrawlercore.ReplyHao6v
	(*ReplyPublicTransit)(nil),       // 68: jarviscrawlercore.ReplyPublicTransit
	(*ReplyArticle2)(nil),            // 69: jarviscrawlercore.ReplyArticle2
	(*ReplyP6Vdy)(nil),               // 70: jarviscrawlercore.ReplyP6vdy
}
var file_result_proto_depIdxs = []int32{
	0,  // 0: jarviscrawlercore.Paragraph.pt:type_name -> jarviscrawlercore.ParagraphType
	3,  // 1: jarviscrawlercore.ExportArticleResult.imgs:type_name -> jarviscrawlercore.ImageInfo
	3,  // 2: jarviscrawlercore.ExportArticleResult.titleImage:type_name -> jarviscrawlercore.ImageInfo
	4,  // 3: jarviscrawlercore.ExportArticleResult.paragraphs:type_name -> jarviscrawlercore.Paragraph
	3,  // 4: jarviscrawlercore.Article.image:type_name -> jarviscrawlercore.ImageInfo
	6,  // 5: jarviscrawlercore.ArticleList.articles:type_name -> jarviscrawlercore.Article
	8,  // 6: jarviscrawlercore.ConfluenceUpdateGrouping.items:type_name -> jarviscrawlercore.ConfluenceUpdateItem
	9,  // 7: jarviscrawlercore.ConfluenceAllUpdates.updates:type_name -> jarviscrawlercore.ConfluenceUpdateGrouping
	15, // 8: jarviscrawlercore.CrunchBaseFundingRound.investors:type_name -> jarviscrawlercore.CrunchBaseInvestor
	16, // 9: jarviscrawlercore.CrunchBaseOrganization.fundingRounds:type_name -> jarviscrawlercore.CrunchBaseFundingRound
	12, // 10: jarviscrawlercore.CrunchBaseOrganization.curEmployees:type_name -> jarviscrawlercore.CrunchBaseEmployee
	12, // 11: jarviscrawlercore.CrunchBaseOrganization.boardMembers:type_name -> jarviscrawlercore.CrunchBaseEmployee
	12, // 12: jarviscrawlercore.CrunchBaseOrganization.pastEmployees:type_name -> jarviscrawlercore.CrunchBaseEmployee
	5,  // 13: jarviscrawlercore.ReplyArticle.result:type_name -> jarviscrawlercore.ExportArticleResult
	7,  // 14: jarviscrawlercore.ReplyArticles.articles:type_name -> jarviscrawlercore.ArticleList
	2,  // 15: jarviscrawlercore.AnalyzeScreenshot.type:type_name -> jarviscrawlercore.AnalyzeScreenshotType
	29, // 16: jarviscrawlercore.ReplyAnalyzePage.reqs:type_name -> jarviscrawlercore.AnalyzeReqInfo
	28, // 17: jarviscrawlercore.ReplyAnalyzePage.screenshots:type_name -> jarviscrawlercore.AnalyzeScreenshot
	1,  // 18: jarviscrawlercore.RequestCrawler.crawlerType:type_name -> jarviscrawlercore.CrawlerType
	24, // 19: jarviscrawlercore.RequestCrawler.cbCompany:type_name -> jarviscrawlercore.RequestCrunchBaseCompany
	25, // 20: jarviscrawlercore.RequestCrawler.translate2:type_name -> jarviscrawlercore.RequestTranslate2
	35, // 21: jarviscrawlercore.RequestCrawler.dtdata:type_name -> jarviscrawlercore.RequestDTData
	27, // 22: jarviscrawlercore.RequestCrawler.analyzePage:type_name -> jarviscrawlercore.AnalyzePage
	36, // 23: jarviscrawlercore.RequestCrawler.geoip:type_name -> jarviscrawlercore.RequestGeoIP
	37, // 24: jarviscrawlercore.RequestCrawler.techinasia:type_name -> jarviscrawlercore.RequestTechInAsia
	38, // 25: jarviscrawlercore.RequestCrawler.steepandcheap:type_name -> jarviscrawlercore.RequestSteepAndCheap
	39, // 26: jarviscrawlercore.RequestCrawler.jrj:type_name -> jarviscrawlercore.RequestJRJ
	40, // 27: jarviscrawlercore.RequestCrawler.jd:type_name -> jarviscrawlercore.RequestJD
	41, // 28: jarviscrawlercore.RequestCrawler.alimama:type_name -> jarviscrawlercore.RequestAlimama
	42, // 29: jarviscrawlercore.RequestCrawler.mountainsteals:type_name -> jarviscrawlercore.RequestMountainSteals
	43, // 30: jarviscrawlercore.RequestCrawler.tmall:type_name -> jarviscrawlercore.RequestTmall
	44, // 31: jarviscrawlercore.RequestCrawler.taobao:type_name -> jarviscrawlercore.RequestTaobao
	45, // 32: jarviscrawlercore.RequestCrawler.manhuadb:type_name -> jarviscrawlercore.RequestManhuaDB
	46, // 33: jarviscrawlercore.RequestCrawler.douban:type_name -> jarviscrawlercore.RequestDouban
	47, // 34: jarviscrawlercore.RequestCrawler.telegraph:type_name -> jarviscrawlercore.RequestTelegraph
	48, // 35: jarviscrawlercore.RequestCrawler.oabt:type_name -> jarviscrawlercore.RequestOABT
	49, // 36: jarviscrawlercore.RequestCrawler.hao6v:type_name -> jarviscrawlercore.RequestHao6v
	50, // 37: jarviscrawlercore.RequestCrawler.publictransit:type_name -> jarviscrawlercore.RequestPublicTransit
	51, // 38: jarviscrawlercore.RequestCrawler.article2:type_name -> jarviscrawlercore.RequestArticle2
	52, // 39: jarviscrawlercore.RequestCrawler.p6vdy:type_name -> jarviscrawlercore.RequestP6vdy
	1,  // 40: jarviscrawlercore.ReplyCrawler.crawlerType:type_name -> jarviscrawlercore.CrawlerType
	31, // 41: jarviscrawlercore.ReplyCrawler.statistics:type_name -> jarviscrawlercore.CrawlerStatistics
	17, // 42: jarviscrawlercore.ReplyCrawler.cbCompany:type_name -> jarviscrawlercore.CrunchBaseOrganization
	26, // 43: jarviscrawlercore.ReplyCrawler.translateResult:type_name -> jarviscrawlercore.TranslateResult
	53, // 44: jarviscrawlercore.ReplyCrawler.dtdata:type_name -> jarviscrawlercore.ReplyDTData
	30, // 45: jarviscrawlercore.ReplyCrawler.analyzePage:type_name -> jarviscrawlercore.ReplyAnalyzePage
	54, // 46: jarviscrawlercore.ReplyCrawler.geoip:type_name -> jarviscrawlercore.ReplyGeoIP
	55, // 47: jarviscrawlercore.ReplyCrawler.techinasia:type_name -> jarviscrawlercore.ReplyTechInAsia
	56, // 48: jarviscrawlercore.ReplyCrawler.steepandcheap:type_name -> jarviscrawlercore.ReplySteepAndCheap
	57, // 49: jarviscrawlercore.ReplyCrawler.jrj:type_name -> jarviscrawlercore.ReplyJRJ
	58, // 50: jarviscrawlercore.ReplyCrawler.jd:type_name -> jarviscrawlercore.ReplyJD
	59, // 51: jarviscrawlercore.ReplyCrawler.alimama:type_name -> jarviscrawlercore.ReplyAlimama
	60, // 52: jarviscrawlercore.ReplyCrawler.mountainsteals:type_name -> jarviscrawlercore.ReplyMountainSteals
	61, // 53: jarviscrawlercore.ReplyCrawler.tmall:type_name -> jarviscrawlercore.ReplyTmall
	62, // 54: jarviscrawlercore.ReplyCrawler.taobao:type_name -> jarviscrawlercore.ReplyTaobao
	63, // 55: jarviscrawlercore.ReplyCrawler.manhuadb:type_name -> jarviscrawlercore.ReplyManhuaDB
	64, // 56: jarviscrawlercore.ReplyCrawler.douban:type_name -> jarviscrawlercore.ReplyDouban
	65, // 57: jarviscrawlercore.ReplyCrawler.telegraph:type_name -> jarviscrawlercore.ReplyTelegraph
	66, // 58: jarviscrawlercore.ReplyCrawler.oabt:type_name -> jarviscrawlercore.ReplyOABT
	67, // 59: jarviscrawlercore.ReplyCrawler.hao6v:type_name -> jarviscrawlercore.ReplyHao6v
	68, // 60: jarviscrawlercore.ReplyCrawler.publictransit:type_name -> jarviscrawlercore.ReplyPublicTransit
	69, // 61: jarviscrawlercore.ReplyCrawler.article2:type_name -> jarviscrawlercore.ReplyArticle2
	70, // 62: jarviscrawlercore.ReplyCrawler.p6vdy:type_name -> jarviscrawlercore.ReplyP6vdy
	33, // 63: jarviscrawlercore.ReplyCrawlerStream.replyCrawler:type_name -> jarviscrawlercore.ReplyCrawler
	18, // 64: jarviscrawlercore.JarvisCrawlerService.translate:input_type -> jarviscrawlercore.RequestTranslate
	20, // 65: jarviscrawlercore.JarvisCrawlerService.exportArticle:input_type -> jarviscrawlercore.RequestArticle
	22, // 66: jarviscrawlercore.JarvisCrawlerService.getArticles:input_type -> jarviscrawlercore.RequestArticles
	35, // 67: jarviscrawlercore.JarvisCrawlerService.getDTData:input_type -> jarviscrawlercore.RequestDTData
	32, // 68: jarviscrawlercore.JarvisCrawlerService.requestCrawler:input_type -> jarviscrawlercore.RequestCrawler
	19, // 69: jarviscrawlercore.JarvisCrawlerService.translate:output_type -> jarviscrawlercore.ReplyTranslate
	21, // 70: jarviscrawlercore.JarvisCrawlerService.exportArticle:output_type -> jarviscrawlercore.ReplyArticle
	23, // 71: jarviscrawlercore.JarvisCrawlerService.getArticles:output_type -> jarviscrawlercore.ReplyArticles
	53, // 72: jarviscrawlercore.JarvisCrawlerService.getDTData:output_type -> jarviscrawlercore.ReplyDTData
	34, // 73: jarviscrawlercore.JarvisCrawlerService.requestCrawler:output_type -> jarviscrawlercore.ReplyCrawlerStream
	69, // [69:74] is the sub-list for method output_type
	64, // [64:69] is the sub-list for method input_type
	64, // [64:64] is the sub-list for extension type_name
	64, // [64:64] is the sub-list for extension extendee
	0,  // [0:64] is the sub-list for field type_name
}

func init() { file_result_proto_init() }
func file_result_proto_init() {
	if File_result_proto != nil {
		return
	}
	file_alimama_proto_init()
	file_steepandcheap_proto_init()
	file_mountainsteals_proto_init()
	file_tmall_proto_init()
	file_taobao_proto_init()
	file_manhuadb_proto_init()
	file_douban_proto_init()
	file_jrj_proto_init()
	file_telegraph_proto_init()
	file_oabt_proto_init()
	file_hao6v_proto_init()
	file_publictransit_proto_init()
	file_jd_proto_init()
	file_techinasia_proto_init()
	file_geoip_proto_init()
	file_dt_proto_init()
	file_article2_proto_init()
	file_p6vdy_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_result_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Paragraph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportArticleResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Article); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfluenceUpdateItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfluenceUpdateGrouping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfluenceAllUpdates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YCCompanies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrunchBaseEmployee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrunchBaseInvestment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrunchBaseAcquisition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrunchBaseInvestor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrunchBaseFundingRound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrunchBaseOrganization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestTranslate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyTranslate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestArticle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyArticle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestArticles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyArticles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestCrunchBaseCompany); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestTranslate2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranslateResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzePage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeScreenshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzeReqInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyAnalyzePage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrawlerStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestCrawler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyCrawler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyCrawlerStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_result_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*RequestCrawler_CbCompany)(nil),
		(*RequestCrawler_Translate2)(nil),
		(*RequestCrawler_Dtdata)(nil),
		(*RequestCrawler_AnalyzePage)(nil),
		(*RequestCrawler_Geoip)(nil),
		(*RequestCrawler_Techinasia)(nil),
		(*RequestCrawler_Steepandcheap)(nil),
		(*RequestCrawler_Jrj)(nil),
		(*RequestCrawler_Jd)(nil),
		(*RequestCrawler_Alimama)(nil),
		(*RequestCrawler_Mountainsteals)(nil),
		(*RequestCrawler_Tmall)(nil),
		(*RequestCrawler_Taobao)(nil),
		(*RequestCrawler_Manhuadb)(nil),
		(*RequestCrawler_Douban)(nil),
		(*RequestCrawler_Telegraph)(nil),
		(*RequestCrawler_Oabt)(nil),
		(*RequestCrawler_Hao6V)(nil),
		(*RequestCrawler_Publictransit)(nil),
		(*RequestCrawler_Article2)(nil),
		(*RequestCrawler_P6Vdy)(nil),
	}
	file_result_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*ReplyCrawler_CbCompany)(nil),
		(*ReplyCrawler_TranslateResult)(nil),
		(*ReplyCrawler_Dtdata)(nil),
		(*ReplyCrawler_AnalyzePage)(nil),
		(*ReplyCrawler_Geoip)(nil),
		(*ReplyCrawler_Techinasia)(nil),
		(*ReplyCrawler_Steepandcheap)(nil),
		(*ReplyCrawler_Jrj)(nil),
		(*ReplyCrawler_Jd)(nil),
		(*ReplyCrawler_Alimama)(nil),
		(*ReplyCrawler_Mountainsteals)(nil),
		(*ReplyCrawler_Tmall)(nil),
		(*ReplyCrawler_Taobao)(nil),
		(*ReplyCrawler_Manhuadb)(nil),
		(*ReplyCrawler_Douban)(nil),
		(*ReplyCrawler_Telegraph)(nil),
		(*ReplyCrawler_Oabt)(nil),
		(*ReplyCrawler_Hao6V)(nil),
		(*ReplyCrawler_Publictransit)(nil),
		(*ReplyCrawler_Article2)(nil),
		(*ReplyCrawler_P6Vdy)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_result_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_result_proto_goTypes,
		DependencyIndexes: file_result_proto_depIdxs,
		EnumInfos:         file_result_proto_enumTypes,
		MessageInfos:      file_result_proto_msgTypes,
	}.Build()
	File_result_proto = out.File
	file_result_proto_rawDesc = nil
	file_result_proto_goTypes = nil
	file_result_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// JarvisCrawlerServiceClient is the client API for JarvisCrawlerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JarvisCrawlerServiceClient interface {
	// translate - translate text
	Translate(ctx context.Context, in *RequestTranslate, opts ...grpc.CallOption) (*ReplyTranslate, error)
	// exportArticle - export article
	ExportArticle(ctx context.Context, in *RequestArticle, opts ...grpc.CallOption) (JarvisCrawlerService_ExportArticleClient, error)
	// getArticles - get articles
	GetArticles(ctx context.Context, in *RequestArticles, opts ...grpc.CallOption) (*ReplyArticles, error)
	// getDTData - get DT data
	GetDTData(ctx context.Context, in *RequestDTData, opts ...grpc.CallOption) (*ReplyDTData, error)
	// requestCrawler - request crawler
	RequestCrawler(ctx context.Context, in *RequestCrawler, opts ...grpc.CallOption) (JarvisCrawlerService_RequestCrawlerClient, error)
}

type jarvisCrawlerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJarvisCrawlerServiceClient(cc grpc.ClientConnInterface) JarvisCrawlerServiceClient {
	return &jarvisCrawlerServiceClient{cc}
}

func (c *jarvisCrawlerServiceClient) Translate(ctx context.Context, in *RequestTranslate, opts ...grpc.CallOption) (*ReplyTranslate, error) {
	out := new(ReplyTranslate)
	err := c.cc.Invoke(ctx, "/jarviscrawlercore.JarvisCrawlerService/translate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jarvisCrawlerServiceClient) ExportArticle(ctx context.Context, in *RequestArticle, opts ...grpc.CallOption) (JarvisCrawlerService_ExportArticleClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JarvisCrawlerService_serviceDesc.Streams[0], "/jarviscrawlercore.JarvisCrawlerService/exportArticle", opts...)
	if err != nil {
		return nil, err
	}
	x := &jarvisCrawlerServiceExportArticleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JarvisCrawlerService_ExportArticleClient interface {
	Recv() (*ReplyArticle, error)
	grpc.ClientStream
}

type jarvisCrawlerServiceExportArticleClient struct {
	grpc.ClientStream
}

func (x *jarvisCrawlerServiceExportArticleClient) Recv() (*ReplyArticle, error) {
	m := new(ReplyArticle)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jarvisCrawlerServiceClient) GetArticles(ctx context.Context, in *RequestArticles, opts ...grpc.CallOption) (*ReplyArticles, error) {
	out := new(ReplyArticles)
	err := c.cc.Invoke(ctx, "/jarviscrawlercore.JarvisCrawlerService/getArticles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jarvisCrawlerServiceClient) GetDTData(ctx context.Context, in *RequestDTData, opts ...grpc.CallOption) (*ReplyDTData, error) {
	out := new(ReplyDTData)
	err := c.cc.Invoke(ctx, "/jarviscrawlercore.JarvisCrawlerService/getDTData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jarvisCrawlerServiceClient) RequestCrawler(ctx context.Context, in *RequestCrawler, opts ...grpc.CallOption) (JarvisCrawlerService_RequestCrawlerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JarvisCrawlerService_serviceDesc.Streams[1], "/jarviscrawlercore.JarvisCrawlerService/requestCrawler", opts...)
	if err != nil {
		return nil, err
	}
	x := &jarvisCrawlerServiceRequestCrawlerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JarvisCrawlerService_RequestCrawlerClient interface {
	Recv() (*ReplyCrawlerStream, error)
	grpc.ClientStream
}

type jarvisCrawlerServiceRequestCrawlerClient struct {
	grpc.ClientStream
}

func (x *jarvisCrawlerServiceRequestCrawlerClient) Recv() (*ReplyCrawlerStream, error) {
	m := new(ReplyCrawlerStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JarvisCrawlerServiceServer is the server API for JarvisCrawlerService service.
type JarvisCrawlerServiceServer interface {
	// translate - translate text
	Translate(context.Context, *RequestTranslate) (*ReplyTranslate, error)
	// exportArticle - export article
	ExportArticle(*RequestArticle, JarvisCrawlerService_ExportArticleServer) error
	// getArticles - get articles
	GetArticles(context.Context, *RequestArticles) (*ReplyArticles, error)
	// getDTData - get DT data
	GetDTData(context.Context, *RequestDTData) (*ReplyDTData, error)
	// requestCrawler - request crawler
	RequestCrawler(*RequestCrawler, JarvisCrawlerService_RequestCrawlerServer) error
}

// UnimplementedJarvisCrawlerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedJarvisCrawlerServiceServer struct {
}

func (*UnimplementedJarvisCrawlerServiceServer) Translate(context.Context, *RequestTranslate) (*ReplyTranslate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Translate not implemented")
}
func (*UnimplementedJarvisCrawlerServiceServer) ExportArticle(*RequestArticle, JarvisCrawlerService_ExportArticleServer) error {
	return status.Errorf(codes.Unimplemented, "method ExportArticle not implemented")
}
func (*UnimplementedJarvisCrawlerServiceServer) GetArticles(context.Context, *RequestArticles) (*ReplyArticles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticles not implemented")
}
func (*UnimplementedJarvisCrawlerServiceServer) GetDTData(context.Context, *RequestDTData) (*ReplyDTData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDTData not implemented")
}
func (*UnimplementedJarvisCrawlerServiceServer) RequestCrawler(*RequestCrawler, JarvisCrawlerService_RequestCrawlerServer) error {
	return status.Errorf(codes.Unimplemented, "method RequestCrawler not implemented")
}

func RegisterJarvisCrawlerServiceServer(s *grpc.Server, srv JarvisCrawlerServiceServer) {
	s.RegisterService(&_JarvisCrawlerService_serviceDesc, srv)
}

func _JarvisCrawlerService_Translate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTranslate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisCrawlerServiceServer).Translate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jarviscrawlercore.JarvisCrawlerService/Translate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisCrawlerServiceServer).Translate(ctx, req.(*RequestTranslate))
	}
	return interceptor(ctx, in, info, handler)
}

func _JarvisCrawlerService_ExportArticle_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestArticle)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JarvisCrawlerServiceServer).ExportArticle(m, &jarvisCrawlerServiceExportArticleServer{stream})
}

type JarvisCrawlerService_ExportArticleServer interface {
	Send(*ReplyArticle) error
	grpc.ServerStream
}

type jarvisCrawlerServiceExportArticleServer struct {
	grpc.ServerStream
}

func (x *jarvisCrawlerServiceExportArticleServer) Send(m *ReplyArticle) error {
	return x.ServerStream.SendMsg(m)
}

func _JarvisCrawlerService_GetArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestArticles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisCrawlerServiceServer).GetArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jarviscrawlercore.JarvisCrawlerService/GetArticles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisCrawlerServiceServer).GetArticles(ctx, req.(*RequestArticles))
	}
	return interceptor(ctx, in, info, handler)
}

func _JarvisCrawlerService_GetDTData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDTData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisCrawlerServiceServer).GetDTData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jarviscrawlercore.JarvisCrawlerService/GetDTData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisCrawlerServiceServer).GetDTData(ctx, req.(*RequestDTData))
	}
	return interceptor(ctx, in, info, handler)
}

func _JarvisCrawlerService_RequestCrawler_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestCrawler)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JarvisCrawlerServiceServer).RequestCrawler(m, &jarvisCrawlerServiceRequestCrawlerServer{stream})
}

type JarvisCrawlerService_RequestCrawlerServer interface {
	Send(*ReplyCrawlerStream) error
	grpc.ServerStream
}

type jarvisCrawlerServiceRequestCrawlerServer struct {
	grpc.ServerStream
}

func (x *jarvisCrawlerServiceRequestCrawlerServer) Send(m *ReplyCrawlerStream) error {
	return x.ServerStream.SendMsg(m)
}

var _JarvisCrawlerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jarviscrawlercore.JarvisCrawlerService",
	HandlerType: (*JarvisCrawlerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "translate",
			Handler:    _JarvisCrawlerService_Translate_Handler,
		},
		{
			MethodName: "getArticles",
			Handler:    _JarvisCrawlerService_GetArticles_Handler,
		},
		{
			MethodName: "getDTData",
			Handler:    _JarvisCrawlerService_GetDTData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "exportArticle",
			Handler:       _JarvisCrawlerService_ExportArticle_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "requestCrawler",
			Handler:       _JarvisCrawlerService_RequestCrawler_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "result.proto",
}

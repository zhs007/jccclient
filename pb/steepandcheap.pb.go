// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.11.2
// source: steepandcheap.proto

package pb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// SteepAndCheapMode - steep&cheap mode
type SteepAndCheapMode int32

const (
	// SACM_PRODUCTS - products
	SteepAndCheapMode_SACM_PRODUCTS SteepAndCheapMode = 0
	// SACM_PRODUCT - product
	SteepAndCheapMode_SACM_PRODUCT SteepAndCheapMode = 1
)

// Enum value maps for SteepAndCheapMode.
var (
	SteepAndCheapMode_name = map[int32]string{
		0: "SACM_PRODUCTS",
		1: "SACM_PRODUCT",
	}
	SteepAndCheapMode_value = map[string]int32{
		"SACM_PRODUCTS": 0,
		"SACM_PRODUCT":  1,
	}
)

func (x SteepAndCheapMode) Enum() *SteepAndCheapMode {
	p := new(SteepAndCheapMode)
	*p = x
	return p
}

func (x SteepAndCheapMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SteepAndCheapMode) Descriptor() protoreflect.EnumDescriptor {
	return file_steepandcheap_proto_enumTypes[0].Descriptor()
}

func (SteepAndCheapMode) Type() protoreflect.EnumType {
	return &file_steepandcheap_proto_enumTypes[0]
}

func (x SteepAndCheapMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SteepAndCheapMode.Descriptor instead.
func (SteepAndCheapMode) EnumDescriptor() ([]byte, []int) {
	return file_steepandcheap_proto_rawDescGZIP(), []int{0}
}

// SteepAndCheapSaleProductInfo - Steep&Cheap product infomation for sale
type SteepAndCheapSaleProductInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SaleCode string `protobuf:"bytes,1,opt,name=saleCode,proto3" json:"saleCode,omitempty"`
	Rank     int32  `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	Score    int32  `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *SteepAndCheapSaleProductInfo) Reset() {
	*x = SteepAndCheapSaleProductInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steepandcheap_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SteepAndCheapSaleProductInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SteepAndCheapSaleProductInfo) ProtoMessage() {}

func (x *SteepAndCheapSaleProductInfo) ProtoReflect() protoreflect.Message {
	mi := &file_steepandcheap_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SteepAndCheapSaleProductInfo.ProtoReflect.Descriptor instead.
func (*SteepAndCheapSaleProductInfo) Descriptor() ([]byte, []int) {
	return file_steepandcheap_proto_rawDescGZIP(), []int{0}
}

func (x *SteepAndCheapSaleProductInfo) GetSaleCode() string {
	if x != nil {
		return x.SaleCode
	}
	return ""
}

func (x *SteepAndCheapSaleProductInfo) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *SteepAndCheapSaleProductInfo) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

// SteepAndCheapColorSizeData - Steep&Cheap color size data
type SteepAndCheapColorSizeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size      string `protobuf:"bytes,1,opt,name=size,proto3" json:"size,omitempty"`
	SizeValid bool   `protobuf:"varint,2,opt,name=sizeValid,proto3" json:"sizeValid,omitempty"`
}

func (x *SteepAndCheapColorSizeData) Reset() {
	*x = SteepAndCheapColorSizeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steepandcheap_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SteepAndCheapColorSizeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SteepAndCheapColorSizeData) ProtoMessage() {}

func (x *SteepAndCheapColorSizeData) ProtoReflect() protoreflect.Message {
	mi := &file_steepandcheap_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SteepAndCheapColorSizeData.ProtoReflect.Descriptor instead.
func (*SteepAndCheapColorSizeData) Descriptor() ([]byte, []int) {
	return file_steepandcheap_proto_rawDescGZIP(), []int{1}
}

func (x *SteepAndCheapColorSizeData) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *SteepAndCheapColorSizeData) GetSizeValid() bool {
	if x != nil {
		return x.SizeValid
	}
	return false
}

// SteepAndCheapColorSize - Steep&Cheap color size
type SteepAndCheapColorSize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color     string                        `protobuf:"bytes,1,opt,name=color,proto3" json:"color,omitempty"`
	Size      []string                      `protobuf:"bytes,2,rep,name=size,proto3" json:"size,omitempty"`
	SizeValid []bool                        `protobuf:"varint,3,rep,packed,name=sizeValid,proto3" json:"sizeValid,omitempty"`
	Data      []*SteepAndCheapColorSizeData `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *SteepAndCheapColorSize) Reset() {
	*x = SteepAndCheapColorSize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steepandcheap_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SteepAndCheapColorSize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SteepAndCheapColorSize) ProtoMessage() {}

func (x *SteepAndCheapColorSize) ProtoReflect() protoreflect.Message {
	mi := &file_steepandcheap_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SteepAndCheapColorSize.ProtoReflect.Descriptor instead.
func (*SteepAndCheapColorSize) Descriptor() ([]byte, []int) {
	return file_steepandcheap_proto_rawDescGZIP(), []int{2}
}

func (x *SteepAndCheapColorSize) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *SteepAndCheapColorSize) GetSize() []string {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *SteepAndCheapColorSize) GetSizeValid() []bool {
	if x != nil {
		return x.SizeValid
	}
	return nil
}

func (x *SteepAndCheapColorSize) GetData() []*SteepAndCheapColorSizeData {
	if x != nil {
		return x.Data
	}
	return nil
}

// SteepAndCheapColorSize2 - Steep&Cheap color size v2
type SteepAndCheapColorSize2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Color string  `protobuf:"bytes,1,opt,name=color,proto3" json:"color,omitempty"`
	Size  string  `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`
	Price float32 `protobuf:"fixed32,3,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *SteepAndCheapColorSize2) Reset() {
	*x = SteepAndCheapColorSize2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steepandcheap_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SteepAndCheapColorSize2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SteepAndCheapColorSize2) ProtoMessage() {}

func (x *SteepAndCheapColorSize2) ProtoReflect() protoreflect.Message {
	mi := &file_steepandcheap_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SteepAndCheapColorSize2.ProtoReflect.Descriptor instead.
func (*SteepAndCheapColorSize2) Descriptor() ([]byte, []int) {
	return file_steepandcheap_proto_rawDescGZIP(), []int{3}
}

func (x *SteepAndCheapColorSize2) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *SteepAndCheapColorSize2) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *SteepAndCheapColorSize2) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

// SteepAndCheapUser - Steep&Cheap user
type SteepAndCheapUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Photo  string `protobuf:"bytes,2,opt,name=photo,proto3" json:"photo,omitempty"`
	Height string `protobuf:"bytes,3,opt,name=height,proto3" json:"height,omitempty"`
	Weight string `protobuf:"bytes,4,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *SteepAndCheapUser) Reset() {
	*x = SteepAndCheapUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steepandcheap_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SteepAndCheapUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SteepAndCheapUser) ProtoMessage() {}

func (x *SteepAndCheapUser) ProtoReflect() protoreflect.Message {
	mi := &file_steepandcheap_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SteepAndCheapUser.ProtoReflect.Descriptor instead.
func (*SteepAndCheapUser) Descriptor() ([]byte, []int) {
	return file_steepandcheap_proto_rawDescGZIP(), []int{4}
}

func (x *SteepAndCheapUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SteepAndCheapUser) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

func (x *SteepAndCheapUser) GetHeight() string {
	if x != nil {
		return x.Height
	}
	return ""
}

func (x *SteepAndCheapUser) GetWeight() string {
	if x != nil {
		return x.Weight
	}
	return ""
}

// SteepAndCheapReview - Steep&Cheap review
type SteepAndCheapReview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string             `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	CreateTime  int64              `protobuf:"varint,2,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Rating      int32              `protobuf:"varint,3,opt,name=rating,proto3" json:"rating,omitempty"`
	Familiarity string             `protobuf:"bytes,4,opt,name=familiarity,proto3" json:"familiarity,omitempty"`
	Fit         string             `protobuf:"bytes,5,opt,name=fit,proto3" json:"fit,omitempty"`
	SizeBought  string             `protobuf:"bytes,6,opt,name=sizeBought,proto3" json:"sizeBought,omitempty"`
	Imgs        []string           `protobuf:"bytes,7,rep,name=imgs,proto3" json:"imgs,omitempty"`
	Description string             `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	User        *SteepAndCheapUser `protobuf:"bytes,9,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *SteepAndCheapReview) Reset() {
	*x = SteepAndCheapReview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steepandcheap_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SteepAndCheapReview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SteepAndCheapReview) ProtoMessage() {}

func (x *SteepAndCheapReview) ProtoReflect() protoreflect.Message {
	mi := &file_steepandcheap_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SteepAndCheapReview.ProtoReflect.Descriptor instead.
func (*SteepAndCheapReview) Descriptor() ([]byte, []int) {
	return file_steepandcheap_proto_rawDescGZIP(), []int{5}
}

func (x *SteepAndCheapReview) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SteepAndCheapReview) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *SteepAndCheapReview) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *SteepAndCheapReview) GetFamiliarity() string {
	if x != nil {
		return x.Familiarity
	}
	return ""
}

func (x *SteepAndCheapReview) GetFit() string {
	if x != nil {
		return x.Fit
	}
	return ""
}

func (x *SteepAndCheapReview) GetSizeBought() string {
	if x != nil {
		return x.SizeBought
	}
	return ""
}

func (x *SteepAndCheapReview) GetImgs() []string {
	if x != nil {
		return x.Imgs
	}
	return nil
}

func (x *SteepAndCheapReview) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SteepAndCheapReview) GetUser() *SteepAndCheapUser {
	if x != nil {
		return x.User
	}
	return nil
}

// SteepAndCheapHistory - Steep&Cheap history
type SteepAndCheapHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateTime  int64   `protobuf:"varint,1,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Price       float32 `protobuf:"fixed32,2,opt,name=price,proto3" json:"price,omitempty"`
	CurPrice    float32 `protobuf:"fixed32,3,opt,name=curPrice,proto3" json:"curPrice,omitempty"`
	StockLevel  int32   `protobuf:"varint,4,opt,name=stockLevel,proto3" json:"stockLevel,omitempty"`
	Reviews     int32   `protobuf:"varint,5,opt,name=reviews,proto3" json:"reviews,omitempty"`
	RatingValue float32 `protobuf:"fixed32,6,opt,name=ratingValue,proto3" json:"ratingValue,omitempty"`
	// Deprecated: Do not use.
	Color    []*SteepAndCheapColorSize  `protobuf:"bytes,7,rep,name=color,proto3" json:"color,omitempty"`
	SaleCode string                     `protobuf:"bytes,8,opt,name=saleCode,proto3" json:"saleCode,omitempty"`
	Offers   []*SteepAndCheapColorSize2 `protobuf:"bytes,9,rep,name=offers,proto3" json:"offers,omitempty"`
}

func (x *SteepAndCheapHistory) Reset() {
	*x = SteepAndCheapHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steepandcheap_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SteepAndCheapHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SteepAndCheapHistory) ProtoMessage() {}

func (x *SteepAndCheapHistory) ProtoReflect() protoreflect.Message {
	mi := &file_steepandcheap_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SteepAndCheapHistory.ProtoReflect.Descriptor instead.
func (*SteepAndCheapHistory) Descriptor() ([]byte, []int) {
	return file_steepandcheap_proto_rawDescGZIP(), []int{6}
}

func (x *SteepAndCheapHistory) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *SteepAndCheapHistory) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SteepAndCheapHistory) GetCurPrice() float32 {
	if x != nil {
		return x.CurPrice
	}
	return 0
}

func (x *SteepAndCheapHistory) GetStockLevel() int32 {
	if x != nil {
		return x.StockLevel
	}
	return 0
}

func (x *SteepAndCheapHistory) GetReviews() int32 {
	if x != nil {
		return x.Reviews
	}
	return 0
}

func (x *SteepAndCheapHistory) GetRatingValue() float32 {
	if x != nil {
		return x.RatingValue
	}
	return 0
}

// Deprecated: Do not use.
func (x *SteepAndCheapHistory) GetColor() []*SteepAndCheapColorSize {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *SteepAndCheapHistory) GetSaleCode() string {
	if x != nil {
		return x.SaleCode
	}
	return ""
}

func (x *SteepAndCheapHistory) GetOffers() []*SteepAndCheapColorSize2 {
	if x != nil {
		return x.Offers
	}
	return nil
}

// SteepAndCheapProduct - Steep&Cheap product
type SteepAndCheapProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrandName   string   `protobuf:"bytes,1,opt,name=brandName,proto3" json:"brandName,omitempty"`
	Skuid       string   `protobuf:"bytes,2,opt,name=skuid,proto3" json:"skuid,omitempty"`
	ProductName []string `protobuf:"bytes,3,rep,name=productName,proto3" json:"productName,omitempty"`
	StockLevel  int32    `protobuf:"varint,4,opt,name=stockLevel,proto3" json:"stockLevel,omitempty"`
	Price       float32  `protobuf:"fixed32,5,opt,name=price,proto3" json:"price,omitempty"`
	CurPrice    float32  `protobuf:"fixed32,6,opt,name=curPrice,proto3" json:"curPrice,omitempty"`
	Url         string   `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`
	Reviews     int32    `protobuf:"varint,8,opt,name=reviews,proto3" json:"reviews,omitempty"`
	RatingValue float32  `protobuf:"fixed32,9,opt,name=ratingValue,proto3" json:"ratingValue,omitempty"`
	Currency    string   `protobuf:"bytes,10,opt,name=currency,proto3" json:"currency,omitempty"`
	IsNew       bool     `protobuf:"varint,11,opt,name=isNew,proto3" json:"isNew,omitempty"`
	Category    []string `protobuf:"bytes,12,rep,name=category,proto3" json:"category,omitempty"`
	Imgs        []string `protobuf:"bytes,13,rep,name=imgs,proto3" json:"imgs,omitempty"`
	// Deprecated: Do not use.
	Color                []*SteepAndCheapColorSize       `protobuf:"bytes,14,rep,name=color,proto3" json:"color,omitempty"`
	Material             string                          `protobuf:"bytes,15,opt,name=material,proto3" json:"material,omitempty"`
	Fit                  string                          `protobuf:"bytes,16,opt,name=fit,proto3" json:"fit,omitempty"`
	Style                string                          `protobuf:"bytes,17,opt,name=style,proto3" json:"style,omitempty"`
	RatingUPF            string                          `protobuf:"bytes,18,opt,name=ratingUPF,proto3" json:"ratingUPF,omitempty"`
	ClaimedWeight        float32                         `protobuf:"fixed32,19,opt,name=claimedWeight,proto3" json:"claimedWeight,omitempty"`
	WeightUnit           string                          `protobuf:"bytes,20,opt,name=weightUnit,proto3" json:"weightUnit,omitempty"`
	RecommendedUse       []string                        `protobuf:"bytes,21,rep,name=recommendedUse,proto3" json:"recommendedUse,omitempty"`
	ManufacturerWarranty string                          `protobuf:"bytes,22,opt,name=manufacturerWarranty,proto3" json:"manufacturerWarranty,omitempty"`
	StrWeight            string                          `protobuf:"bytes,23,opt,name=strWeight,proto3" json:"strWeight,omitempty"`
	Infomation           string                          `protobuf:"bytes,24,opt,name=infomation,proto3" json:"infomation,omitempty"`
	SizeChart            string                          `protobuf:"bytes,25,opt,name=sizeChart,proto3" json:"sizeChart,omitempty"`
	LstReview            []*SteepAndCheapReview          `protobuf:"bytes,26,rep,name=lstReview,proto3" json:"lstReview,omitempty"`
	LinkProducts         []string                        `protobuf:"bytes,27,rep,name=linkProducts,proto3" json:"linkProducts,omitempty"`
	LstHistory           []*SteepAndCheapHistory         `protobuf:"bytes,28,rep,name=lstHistory,proto3" json:"lstHistory,omitempty"`
	LstSale              []*SteepAndCheapSaleProductInfo `protobuf:"bytes,29,rep,name=lstSale,proto3" json:"lstSale,omitempty"`
	LastUpdatedTime      int64                           `protobuf:"varint,30,opt,name=lastUpdatedTime,proto3" json:"lastUpdatedTime,omitempty"`
	MinPrice             float32                         `protobuf:"fixed32,31,opt,name=minPrice,proto3" json:"minPrice,omitempty"`
	MaxPrice             float32                         `protobuf:"fixed32,32,opt,name=maxPrice,proto3" json:"maxPrice,omitempty"`
	Offers               []*SteepAndCheapColorSize2      `protobuf:"bytes,33,rep,name=offers,proto3" json:"offers,omitempty"`
}

func (x *SteepAndCheapProduct) Reset() {
	*x = SteepAndCheapProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steepandcheap_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SteepAndCheapProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SteepAndCheapProduct) ProtoMessage() {}

func (x *SteepAndCheapProduct) ProtoReflect() protoreflect.Message {
	mi := &file_steepandcheap_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SteepAndCheapProduct.ProtoReflect.Descriptor instead.
func (*SteepAndCheapProduct) Descriptor() ([]byte, []int) {
	return file_steepandcheap_proto_rawDescGZIP(), []int{7}
}

func (x *SteepAndCheapProduct) GetBrandName() string {
	if x != nil {
		return x.BrandName
	}
	return ""
}

func (x *SteepAndCheapProduct) GetSkuid() string {
	if x != nil {
		return x.Skuid
	}
	return ""
}

func (x *SteepAndCheapProduct) GetProductName() []string {
	if x != nil {
		return x.ProductName
	}
	return nil
}

func (x *SteepAndCheapProduct) GetStockLevel() int32 {
	if x != nil {
		return x.StockLevel
	}
	return 0
}

func (x *SteepAndCheapProduct) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SteepAndCheapProduct) GetCurPrice() float32 {
	if x != nil {
		return x.CurPrice
	}
	return 0
}

func (x *SteepAndCheapProduct) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *SteepAndCheapProduct) GetReviews() int32 {
	if x != nil {
		return x.Reviews
	}
	return 0
}

func (x *SteepAndCheapProduct) GetRatingValue() float32 {
	if x != nil {
		return x.RatingValue
	}
	return 0
}

func (x *SteepAndCheapProduct) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *SteepAndCheapProduct) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

func (x *SteepAndCheapProduct) GetCategory() []string {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *SteepAndCheapProduct) GetImgs() []string {
	if x != nil {
		return x.Imgs
	}
	return nil
}

// Deprecated: Do not use.
func (x *SteepAndCheapProduct) GetColor() []*SteepAndCheapColorSize {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *SteepAndCheapProduct) GetMaterial() string {
	if x != nil {
		return x.Material
	}
	return ""
}

func (x *SteepAndCheapProduct) GetFit() string {
	if x != nil {
		return x.Fit
	}
	return ""
}

func (x *SteepAndCheapProduct) GetStyle() string {
	if x != nil {
		return x.Style
	}
	return ""
}

func (x *SteepAndCheapProduct) GetRatingUPF() string {
	if x != nil {
		return x.RatingUPF
	}
	return ""
}

func (x *SteepAndCheapProduct) GetClaimedWeight() float32 {
	if x != nil {
		return x.ClaimedWeight
	}
	return 0
}

func (x *SteepAndCheapProduct) GetWeightUnit() string {
	if x != nil {
		return x.WeightUnit
	}
	return ""
}

func (x *SteepAndCheapProduct) GetRecommendedUse() []string {
	if x != nil {
		return x.RecommendedUse
	}
	return nil
}

func (x *SteepAndCheapProduct) GetManufacturerWarranty() string {
	if x != nil {
		return x.ManufacturerWarranty
	}
	return ""
}

func (x *SteepAndCheapProduct) GetStrWeight() string {
	if x != nil {
		return x.StrWeight
	}
	return ""
}

func (x *SteepAndCheapProduct) GetInfomation() string {
	if x != nil {
		return x.Infomation
	}
	return ""
}

func (x *SteepAndCheapProduct) GetSizeChart() string {
	if x != nil {
		return x.SizeChart
	}
	return ""
}

func (x *SteepAndCheapProduct) GetLstReview() []*SteepAndCheapReview {
	if x != nil {
		return x.LstReview
	}
	return nil
}

func (x *SteepAndCheapProduct) GetLinkProducts() []string {
	if x != nil {
		return x.LinkProducts
	}
	return nil
}

func (x *SteepAndCheapProduct) GetLstHistory() []*SteepAndCheapHistory {
	if x != nil {
		return x.LstHistory
	}
	return nil
}

func (x *SteepAndCheapProduct) GetLstSale() []*SteepAndCheapSaleProductInfo {
	if x != nil {
		return x.LstSale
	}
	return nil
}

func (x *SteepAndCheapProduct) GetLastUpdatedTime() int64 {
	if x != nil {
		return x.LastUpdatedTime
	}
	return 0
}

func (x *SteepAndCheapProduct) GetMinPrice() float32 {
	if x != nil {
		return x.MinPrice
	}
	return 0
}

func (x *SteepAndCheapProduct) GetMaxPrice() float32 {
	if x != nil {
		return x.MaxPrice
	}
	return 0
}

func (x *SteepAndCheapProduct) GetOffers() []*SteepAndCheapColorSize2 {
	if x != nil {
		return x.Offers
	}
	return nil
}

// SteepAndCheapProducts - Steep&Cheap products
type SteepAndCheapProducts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxPage  int32                   `protobuf:"varint,1,opt,name=maxPage,proto3" json:"maxPage,omitempty"`
	Products []*SteepAndCheapProduct `protobuf:"bytes,2,rep,name=products,proto3" json:"products,omitempty"`
	Name     string                  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SteepAndCheapProducts) Reset() {
	*x = SteepAndCheapProducts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steepandcheap_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SteepAndCheapProducts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SteepAndCheapProducts) ProtoMessage() {}

func (x *SteepAndCheapProducts) ProtoReflect() protoreflect.Message {
	mi := &file_steepandcheap_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SteepAndCheapProducts.ProtoReflect.Descriptor instead.
func (*SteepAndCheapProducts) Descriptor() ([]byte, []int) {
	return file_steepandcheap_proto_rawDescGZIP(), []int{8}
}

func (x *SteepAndCheapProducts) GetMaxPage() int32 {
	if x != nil {
		return x.MaxPage
	}
	return 0
}

func (x *SteepAndCheapProducts) GetProducts() []*SteepAndCheapProduct {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *SteepAndCheapProducts) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// RequestSteepAndCheap - request steep&cheap
type RequestSteepAndCheap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode SteepAndCheapMode `protobuf:"varint,1,opt,name=mode,proto3,enum=jarviscrawlercore.SteepAndCheapMode" json:"mode,omitempty"`
	Url  string            `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Page int32             `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *RequestSteepAndCheap) Reset() {
	*x = RequestSteepAndCheap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steepandcheap_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestSteepAndCheap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestSteepAndCheap) ProtoMessage() {}

func (x *RequestSteepAndCheap) ProtoReflect() protoreflect.Message {
	mi := &file_steepandcheap_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestSteepAndCheap.ProtoReflect.Descriptor instead.
func (*RequestSteepAndCheap) Descriptor() ([]byte, []int) {
	return file_steepandcheap_proto_rawDescGZIP(), []int{9}
}

func (x *RequestSteepAndCheap) GetMode() SteepAndCheapMode {
	if x != nil {
		return x.Mode
	}
	return SteepAndCheapMode_SACM_PRODUCTS
}

func (x *RequestSteepAndCheap) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *RequestSteepAndCheap) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

// ReplySteepAndCheap - reply steep&cheap
type ReplySteepAndCheap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode SteepAndCheapMode `protobuf:"varint,1,opt,name=mode,proto3,enum=jarviscrawlercore.SteepAndCheapMode" json:"mode,omitempty"`
	// Types that are assignable to Reply:
	//	*ReplySteepAndCheap_Products
	//	*ReplySteepAndCheap_Product
	Reply isReplySteepAndCheap_Reply `protobuf_oneof:"reply"`
}

func (x *ReplySteepAndCheap) Reset() {
	*x = ReplySteepAndCheap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_steepandcheap_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplySteepAndCheap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplySteepAndCheap) ProtoMessage() {}

func (x *ReplySteepAndCheap) ProtoReflect() protoreflect.Message {
	mi := &file_steepandcheap_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplySteepAndCheap.ProtoReflect.Descriptor instead.
func (*ReplySteepAndCheap) Descriptor() ([]byte, []int) {
	return file_steepandcheap_proto_rawDescGZIP(), []int{10}
}

func (x *ReplySteepAndCheap) GetMode() SteepAndCheapMode {
	if x != nil {
		return x.Mode
	}
	return SteepAndCheapMode_SACM_PRODUCTS
}

func (m *ReplySteepAndCheap) GetReply() isReplySteepAndCheap_Reply {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (x *ReplySteepAndCheap) GetProducts() *SteepAndCheapProducts {
	if x, ok := x.GetReply().(*ReplySteepAndCheap_Products); ok {
		return x.Products
	}
	return nil
}

func (x *ReplySteepAndCheap) GetProduct() *SteepAndCheapProduct {
	if x, ok := x.GetReply().(*ReplySteepAndCheap_Product); ok {
		return x.Product
	}
	return nil
}

type isReplySteepAndCheap_Reply interface {
	isReplySteepAndCheap_Reply()
}

type ReplySteepAndCheap_Products struct {
	Products *SteepAndCheapProducts `protobuf:"bytes,100,opt,name=products,proto3,oneof"`
}

type ReplySteepAndCheap_Product struct {
	Product *SteepAndCheapProduct `protobuf:"bytes,101,opt,name=product,proto3,oneof"`
}

func (*ReplySteepAndCheap_Products) isReplySteepAndCheap_Reply() {}

func (*ReplySteepAndCheap_Product) isReplySteepAndCheap_Reply() {}

var File_steepandcheap_proto protoreflect.FileDescriptor

var file_steepandcheap_proto_rawDesc = []byte{
	0x0a, 0x13, 0x73, 0x74, 0x65, 0x65, 0x70, 0x61, 0x6e, 0x64, 0x63, 0x68, 0x65, 0x61, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61,
	0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x64, 0x0a, 0x1c, 0x53, 0x74, 0x65, 0x65,
	0x70, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x65, 0x61, 0x70, 0x53, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x6c, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x6c, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x4e,
	0x0a, 0x1a, 0x53, 0x74, 0x65, 0x65, 0x70, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x65, 0x61, 0x70, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x22, 0xa3,
	0x01, 0x0a, 0x16, 0x53, 0x74, 0x65, 0x65, 0x70, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x65, 0x61, 0x70,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x08, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x12, 0x41, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x65, 0x65, 0x70, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x65, 0x61,
	0x70, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x59, 0x0a, 0x17, 0x53, 0x74, 0x65, 0x65, 0x70, 0x41, 0x6e, 0x64,
	0x43, 0x68, 0x65, 0x61, 0x70, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x32, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22,
	0x6d, 0x0a, 0x11, 0x53, 0x74, 0x65, 0x65, 0x70, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x65, 0x61, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xa7,
	0x02, 0x0a, 0x13, 0x53, 0x74, 0x65, 0x65, 0x70, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x65, 0x61, 0x70,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x61, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x69, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65,
	0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69,
	0x7a, 0x65, 0x42, 0x6f, 0x75, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x67, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6a,
	0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x65, 0x65, 0x70, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x65, 0x61, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xe9, 0x02, 0x0a, 0x14, 0x53, 0x74, 0x65,
	0x65, 0x70, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x65, 0x61, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x63, 0x75, 0x72, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0b, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x43, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x65, 0x65, 0x70, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x65, 0x61, 0x70,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x42, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x65, 0x65, 0x70, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x65,
	0x61, 0x70, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x32, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x73, 0x22, 0xb7, 0x09, 0x0a, 0x14, 0x53, 0x74, 0x65, 0x65, 0x70, 0x41, 0x6e,
	0x64, 0x43, 0x68, 0x65, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x6b, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6b, 0x75, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x69, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6d, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x6d, 0x67, 0x73, 0x12, 0x43, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61,
	0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x65, 0x65, 0x70, 0x41, 0x6e,
	0x64, 0x43, 0x68, 0x65, 0x61, 0x70, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x50, 0x46, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x50, 0x46, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0d, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x55, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x6d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x57, 0x61, 0x72, 0x72, 0x61, 0x6e,
	0x74, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x57, 0x61, 0x72, 0x72, 0x61, 0x6e, 0x74, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x6e, 0x66, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x6e, 0x66, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x7a, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x69, 0x7a, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x44, 0x0a, 0x09, 0x6c, 0x73,
	0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x65, 0x65, 0x70, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x65, 0x61, 0x70, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x09, 0x6c, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x18, 0x1b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x0a, 0x6c, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69,
	0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x65,
	0x65, 0x70, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x65, 0x61, 0x70, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x0a, 0x6c, 0x73, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x49, 0x0a,
	0x07, 0x6c, 0x73, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x65, 0x65, 0x70, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x65, 0x61, 0x70,
	0x53, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x07, 0x6c, 0x73, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6a, 0x61, 0x72,
	0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x65, 0x65, 0x70, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x65, 0x61, 0x70, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x53, 0x69, 0x7a, 0x65, 0x32, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x22, 0x8a,
	0x01, 0x0a, 0x15, 0x53, 0x74, 0x65, 0x65, 0x70, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x65, 0x61, 0x70,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x50,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61,
	0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x65, 0x65, 0x70, 0x41, 0x6e,
	0x64, 0x43, 0x68, 0x65, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x76, 0x0a, 0x14, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x65, 0x65, 0x70, 0x41, 0x6e, 0x64, 0x43, 0x68,
	0x65, 0x61, 0x70, 0x12, 0x38, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65,
	0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x65, 0x65, 0x70, 0x41, 0x6e, 0x64, 0x43, 0x68,
	0x65, 0x61, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x22, 0xe4, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x65,
	0x65, 0x70, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x65, 0x61, 0x70, 0x12, 0x38, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69,
	0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x65,
	0x65, 0x70, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x65, 0x61, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63,
	0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x65, 0x65, 0x70,
	0x41, 0x6e, 0x64, 0x43, 0x68, 0x65, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x65, 0x65, 0x70, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x65, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x42, 0x07, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x2a, 0x38, 0x0a, 0x11, 0x53, 0x74,
	0x65, 0x65, 0x70, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x65, 0x61, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x41, 0x43, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x53,
	0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x41, 0x43, 0x4d, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55,
	0x43, 0x54, 0x10, 0x01, 0x42, 0x20, 0x5a, 0x1e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x7a, 0x68, 0x73, 0x30, 0x30, 0x37, 0x2f, 0x6a, 0x63, 0x63, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_steepandcheap_proto_rawDescOnce sync.Once
	file_steepandcheap_proto_rawDescData = file_steepandcheap_proto_rawDesc
)

func file_steepandcheap_proto_rawDescGZIP() []byte {
	file_steepandcheap_proto_rawDescOnce.Do(func() {
		file_steepandcheap_proto_rawDescData = protoimpl.X.CompressGZIP(file_steepandcheap_proto_rawDescData)
	})
	return file_steepandcheap_proto_rawDescData
}

var file_steepandcheap_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_steepandcheap_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_steepandcheap_proto_goTypes = []interface{}{
	(SteepAndCheapMode)(0),               // 0: jarviscrawlercore.SteepAndCheapMode
	(*SteepAndCheapSaleProductInfo)(nil), // 1: jarviscrawlercore.SteepAndCheapSaleProductInfo
	(*SteepAndCheapColorSizeData)(nil),   // 2: jarviscrawlercore.SteepAndCheapColorSizeData
	(*SteepAndCheapColorSize)(nil),       // 3: jarviscrawlercore.SteepAndCheapColorSize
	(*SteepAndCheapColorSize2)(nil),      // 4: jarviscrawlercore.SteepAndCheapColorSize2
	(*SteepAndCheapUser)(nil),            // 5: jarviscrawlercore.SteepAndCheapUser
	(*SteepAndCheapReview)(nil),          // 6: jarviscrawlercore.SteepAndCheapReview
	(*SteepAndCheapHistory)(nil),         // 7: jarviscrawlercore.SteepAndCheapHistory
	(*SteepAndCheapProduct)(nil),         // 8: jarviscrawlercore.SteepAndCheapProduct
	(*SteepAndCheapProducts)(nil),        // 9: jarviscrawlercore.SteepAndCheapProducts
	(*RequestSteepAndCheap)(nil),         // 10: jarviscrawlercore.RequestSteepAndCheap
	(*ReplySteepAndCheap)(nil),           // 11: jarviscrawlercore.ReplySteepAndCheap
}
var file_steepandcheap_proto_depIdxs = []int32{
	2,  // 0: jarviscrawlercore.SteepAndCheapColorSize.data:type_name -> jarviscrawlercore.SteepAndCheapColorSizeData
	5,  // 1: jarviscrawlercore.SteepAndCheapReview.user:type_name -> jarviscrawlercore.SteepAndCheapUser
	3,  // 2: jarviscrawlercore.SteepAndCheapHistory.color:type_name -> jarviscrawlercore.SteepAndCheapColorSize
	4,  // 3: jarviscrawlercore.SteepAndCheapHistory.offers:type_name -> jarviscrawlercore.SteepAndCheapColorSize2
	3,  // 4: jarviscrawlercore.SteepAndCheapProduct.color:type_name -> jarviscrawlercore.SteepAndCheapColorSize
	6,  // 5: jarviscrawlercore.SteepAndCheapProduct.lstReview:type_name -> jarviscrawlercore.SteepAndCheapReview
	7,  // 6: jarviscrawlercore.SteepAndCheapProduct.lstHistory:type_name -> jarviscrawlercore.SteepAndCheapHistory
	1,  // 7: jarviscrawlercore.SteepAndCheapProduct.lstSale:type_name -> jarviscrawlercore.SteepAndCheapSaleProductInfo
	4,  // 8: jarviscrawlercore.SteepAndCheapProduct.offers:type_name -> jarviscrawlercore.SteepAndCheapColorSize2
	8,  // 9: jarviscrawlercore.SteepAndCheapProducts.products:type_name -> jarviscrawlercore.SteepAndCheapProduct
	0,  // 10: jarviscrawlercore.RequestSteepAndCheap.mode:type_name -> jarviscrawlercore.SteepAndCheapMode
	0,  // 11: jarviscrawlercore.ReplySteepAndCheap.mode:type_name -> jarviscrawlercore.SteepAndCheapMode
	9,  // 12: jarviscrawlercore.ReplySteepAndCheap.products:type_name -> jarviscrawlercore.SteepAndCheapProducts
	8,  // 13: jarviscrawlercore.ReplySteepAndCheap.product:type_name -> jarviscrawlercore.SteepAndCheapProduct
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_steepandcheap_proto_init() }
func file_steepandcheap_proto_init() {
	if File_steepandcheap_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_steepandcheap_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SteepAndCheapSaleProductInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steepandcheap_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SteepAndCheapColorSizeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steepandcheap_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SteepAndCheapColorSize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steepandcheap_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SteepAndCheapColorSize2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steepandcheap_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SteepAndCheapUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steepandcheap_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SteepAndCheapReview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steepandcheap_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SteepAndCheapHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steepandcheap_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SteepAndCheapProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steepandcheap_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SteepAndCheapProducts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steepandcheap_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestSteepAndCheap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_steepandcheap_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplySteepAndCheap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_steepandcheap_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*ReplySteepAndCheap_Products)(nil),
		(*ReplySteepAndCheap_Product)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_steepandcheap_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_steepandcheap_proto_goTypes,
		DependencyIndexes: file_steepandcheap_proto_depIdxs,
		EnumInfos:         file_steepandcheap_proto_enumTypes,
		MessageInfos:      file_steepandcheap_proto_msgTypes,
	}.Build()
	File_steepandcheap_proto = out.File
	file_steepandcheap_proto_rawDesc = nil
	file_steepandcheap_proto_goTypes = nil
	file_steepandcheap_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.11.2
// source: dt.proto

package pb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// DTDataType -
type DTDataType int32

const (
	DTDataType_DT_DT_BUSINESSGAMEREPORT DTDataType = 0
	DTDataType_DT_DT_TODAYGAMEDATA      DTDataType = 1
	DTDataType_DT_DT_GPKCHECKGAMERESULT DTDataType = 2
)

// Enum value maps for DTDataType.
var (
	DTDataType_name = map[int32]string{
		0: "DT_DT_BUSINESSGAMEREPORT",
		1: "DT_DT_TODAYGAMEDATA",
		2: "DT_DT_GPKCHECKGAMERESULT",
	}
	DTDataType_value = map[string]int32{
		"DT_DT_BUSINESSGAMEREPORT": 0,
		"DT_DT_TODAYGAMEDATA":      1,
		"DT_DT_GPKCHECKGAMERESULT": 2,
	}
)

func (x DTDataType) Enum() *DTDataType {
	p := new(DTDataType)
	*p = x
	return p
}

func (x DTDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DTDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_dt_proto_enumTypes[0].Descriptor()
}

func (DTDataType) Type() protoreflect.EnumType {
	return &file_dt_proto_enumTypes[0]
}

func (x DTDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DTDataType.Descriptor instead.
func (DTDataType) EnumDescriptor() ([]byte, []int) {
	return file_dt_proto_rawDescGZIP(), []int{0}
}

// DTGameResultErrCode -
type DTGameResultErrCode int32

const (
	// no error
	DTGameResultErrCode_DTGRE_NOERR DTGameResultErrCode = 0
	// id.gamecode != gamecode
	DTGameResultErrCode_DTGRE_GAMECODE DTGameResultErrCode = 1
	// invalid lines
	DTGameResultErrCode_DTGRE_LINES DTGameResultErrCode = 2
	// moneyEnd != moneyStart + off
	DTGameResultErrCode_DTGRE_MONEYOFF DTGameResultErrCode = 3
	// off != win - bet
	DTGameResultErrCode_DTGRE_WINBETOFF DTGameResultErrCode = 4
	// invalid gamedata
	DTGameResultErrCode_DTGRE_GAMEDATA DTGameResultErrCode = 5
	// invalid gameresult bet
	DTGameResultErrCode_DTGRE_GAMERESULT_BET DTGameResultErrCode = 6
	// invalid gameresult win
	DTGameResultErrCode_DTGRE_GAMERESULT_WIN DTGameResultErrCode = 7
	// invalid gameresult sumwin
	DTGameResultErrCode_DTGRE_GAMERESULT_SUM_WIN DTGameResultErrCode = 8
	// invalid iscomplete
	DTGameResultErrCode_DTGRE_ISCOMPLETE DTGameResultErrCode = 9
	// invalid gamestate
	DTGameResultErrCode_DTGRE_GAMESTATE DTGameResultErrCode = 10
	// invalid gameresult
	DTGameResultErrCode_DTGRE_GAMERESULT DTGameResultErrCode = 11
	// invalid gameresult lines
	DTGameResultErrCode_DTGRE_GAMERESULT_LINES DTGameResultErrCode = 12
	// invalid gameresult times
	DTGameResultErrCode_DTGRE_GAMERESULT_TIMES DTGameResultErrCode = 13
	// no children
	DTGameResultErrCode_DTGRE_NOCHILDREN DTGameResultErrCode = 15
	// no children error
	DTGameResultErrCode_DTGRE_CHILDREN_ERROR DTGameResultErrCode = 16
	// sub game not complete
	DTGameResultErrCode_DTGRE_SUBGAME_NOTCOMPLETE DTGameResultErrCode = 17
	// dtbaseid error
	DTGameResultErrCode_DTGRE_DTBASEID_ERROR DTGameResultErrCode = 18
	// no dtbaseid
	DTGameResultErrCode_DTGRE_NODTBASEID DTGameResultErrCode = 19
	// no dtbaseid baseid
	DTGameResultErrCode_DTGRE_DTBASEID_NOBASEID DTGameResultErrCode = 20
	// dtbaseid baseid error
	DTGameResultErrCode_DTGRE_DTBASEID_BASEID_ERROR DTGameResultErrCode = 21
	// can not find dtbaseid free
	DTGameResultErrCode_DTGRE_DTBASEID_FREE DTGameResultErrCode = 22
	// can not find dtbaseid respin
	DTGameResultErrCode_DTGRE_DTBASEID_RESPIN DTGameResultErrCode = 23
	// invalid fgnums
	DTGameResultErrCode_DTGRE_INVALID_FGNUMS DTGameResultErrCode = 24
	// icon404
	DTGameResultErrCode_DTGRE_ICON404 DTGameResultErrCode = 25
	// sub game repeated complete
	DTGameResultErrCode_DTGRE_SUBGAME_REPEATED_COMPLETE DTGameResultErrCode = 26
	// sub game invalid jp
	DTGameResultErrCode_DTGRE_SUBGAME_INVALID_JP DTGameResultErrCode = 27
	// invalid jp win
	DTGameResultErrCode_DTGRE_INVALID_JPWIN DTGameResultErrCode = 28
)

// Enum value maps for DTGameResultErrCode.
var (
	DTGameResultErrCode_name = map[int32]string{
		0:  "DTGRE_NOERR",
		1:  "DTGRE_GAMECODE",
		2:  "DTGRE_LINES",
		3:  "DTGRE_MONEYOFF",
		4:  "DTGRE_WINBETOFF",
		5:  "DTGRE_GAMEDATA",
		6:  "DTGRE_GAMERESULT_BET",
		7:  "DTGRE_GAMERESULT_WIN",
		8:  "DTGRE_GAMERESULT_SUM_WIN",
		9:  "DTGRE_ISCOMPLETE",
		10: "DTGRE_GAMESTATE",
		11: "DTGRE_GAMERESULT",
		12: "DTGRE_GAMERESULT_LINES",
		13: "DTGRE_GAMERESULT_TIMES",
		15: "DTGRE_NOCHILDREN",
		16: "DTGRE_CHILDREN_ERROR",
		17: "DTGRE_SUBGAME_NOTCOMPLETE",
		18: "DTGRE_DTBASEID_ERROR",
		19: "DTGRE_NODTBASEID",
		20: "DTGRE_DTBASEID_NOBASEID",
		21: "DTGRE_DTBASEID_BASEID_ERROR",
		22: "DTGRE_DTBASEID_FREE",
		23: "DTGRE_DTBASEID_RESPIN",
		24: "DTGRE_INVALID_FGNUMS",
		25: "DTGRE_ICON404",
		26: "DTGRE_SUBGAME_REPEATED_COMPLETE",
		27: "DTGRE_SUBGAME_INVALID_JP",
		28: "DTGRE_INVALID_JPWIN",
	}
	DTGameResultErrCode_value = map[string]int32{
		"DTGRE_NOERR":                     0,
		"DTGRE_GAMECODE":                  1,
		"DTGRE_LINES":                     2,
		"DTGRE_MONEYOFF":                  3,
		"DTGRE_WINBETOFF":                 4,
		"DTGRE_GAMEDATA":                  5,
		"DTGRE_GAMERESULT_BET":            6,
		"DTGRE_GAMERESULT_WIN":            7,
		"DTGRE_GAMERESULT_SUM_WIN":        8,
		"DTGRE_ISCOMPLETE":                9,
		"DTGRE_GAMESTATE":                 10,
		"DTGRE_GAMERESULT":                11,
		"DTGRE_GAMERESULT_LINES":          12,
		"DTGRE_GAMERESULT_TIMES":          13,
		"DTGRE_NOCHILDREN":                15,
		"DTGRE_CHILDREN_ERROR":            16,
		"DTGRE_SUBGAME_NOTCOMPLETE":       17,
		"DTGRE_DTBASEID_ERROR":            18,
		"DTGRE_NODTBASEID":                19,
		"DTGRE_DTBASEID_NOBASEID":         20,
		"DTGRE_DTBASEID_BASEID_ERROR":     21,
		"DTGRE_DTBASEID_FREE":             22,
		"DTGRE_DTBASEID_RESPIN":           23,
		"DTGRE_INVALID_FGNUMS":            24,
		"DTGRE_ICON404":                   25,
		"DTGRE_SUBGAME_REPEATED_COMPLETE": 26,
		"DTGRE_SUBGAME_INVALID_JP":        27,
		"DTGRE_INVALID_JPWIN":             28,
	}
)

func (x DTGameResultErrCode) Enum() *DTGameResultErrCode {
	p := new(DTGameResultErrCode)
	*p = x
	return p
}

func (x DTGameResultErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DTGameResultErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_dt_proto_enumTypes[1].Descriptor()
}

func (DTGameResultErrCode) Type() protoreflect.EnumType {
	return &file_dt_proto_enumTypes[1]
}

func (x DTGameResultErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DTGameResultErrCode.Descriptor instead.
func (DTGameResultErrCode) EnumDescriptor() ([]byte, []int) {
	return file_dt_proto_rawDescGZIP(), []int{1}
}

// DTGameResultErr -
type DTGameResultErr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// errcode
	Errcode DTGameResultErrCode `protobuf:"varint,1,opt,name=errcode,proto3,enum=jarviscrawlercore.DTGameResultErrCode" json:"errcode,omitempty"`
	// value0
	Value0 int64 `protobuf:"varint,2,opt,name=value0,proto3" json:"value0,omitempty"`
	// value1
	Value1 int64 `protobuf:"varint,3,opt,name=value1,proto3" json:"value1,omitempty"`
	// strval0
	Strval0 string `protobuf:"bytes,10,opt,name=strval0,proto3" json:"strval0,omitempty"`
}

func (x *DTGameResultErr) Reset() {
	*x = DTGameResultErr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dt_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DTGameResultErr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DTGameResultErr) ProtoMessage() {}

func (x *DTGameResultErr) ProtoReflect() protoreflect.Message {
	mi := &file_dt_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DTGameResultErr.ProtoReflect.Descriptor instead.
func (*DTGameResultErr) Descriptor() ([]byte, []int) {
	return file_dt_proto_rawDescGZIP(), []int{0}
}

func (x *DTGameResultErr) GetErrcode() DTGameResultErrCode {
	if x != nil {
		return x.Errcode
	}
	return DTGameResultErrCode_DTGRE_NOERR
}

func (x *DTGameResultErr) GetValue0() int64 {
	if x != nil {
		return x.Value0
	}
	return 0
}

func (x *DTGameResultErr) GetValue1() int64 {
	if x != nil {
		return x.Value1
	}
	return 0
}

func (x *DTGameResultErr) GetStrval0() string {
	if x != nil {
		return x.Strval0
	}
	return ""
}

// RequestDTData - request DT Data
type RequestDTData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// mode
	//
	// Deprecated: Do not use.
	Mode string `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"`
	// startTime
	StartTime string `protobuf:"bytes,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	// endTime
	EndTime string `protobuf:"bytes,3,opt,name=endTime,proto3" json:"endTime,omitempty"`
	// dtDataType
	DtDataType DTDataType `protobuf:"varint,4,opt,name=dtDataType,proto3,enum=jarviscrawlercore.DTDataType" json:"dtDataType,omitempty"`
	// environment name
	EnvName string `protobuf:"bytes,5,opt,name=envName,proto3" json:"envName,omitempty"`
	// business id
	Businessid string `protobuf:"bytes,6,opt,name=businessid,proto3" json:"businessid,omitempty"`
	// game code
	GameCode string `protobuf:"bytes,7,opt,name=gameCode,proto3" json:"gameCode,omitempty"`
	// player name
	PlayerName string `protobuf:"bytes,8,opt,name=playerName,proto3" json:"playerName,omitempty"`
	// token - You need to have a valid token in order to get back correctly
	Token string `protobuf:"bytes,100,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *RequestDTData) Reset() {
	*x = RequestDTData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dt_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestDTData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestDTData) ProtoMessage() {}

func (x *RequestDTData) ProtoReflect() protoreflect.Message {
	mi := &file_dt_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestDTData.ProtoReflect.Descriptor instead.
func (*RequestDTData) Descriptor() ([]byte, []int) {
	return file_dt_proto_rawDescGZIP(), []int{1}
}

// Deprecated: Do not use.
func (x *RequestDTData) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *RequestDTData) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *RequestDTData) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *RequestDTData) GetDtDataType() DTDataType {
	if x != nil {
		return x.DtDataType
	}
	return DTDataType_DT_DT_BUSINESSGAMEREPORT
}

func (x *RequestDTData) GetEnvName() string {
	if x != nil {
		return x.EnvName
	}
	return ""
}

func (x *RequestDTData) GetBusinessid() string {
	if x != nil {
		return x.Businessid
	}
	return ""
}

func (x *RequestDTData) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *RequestDTData) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *RequestDTData) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// DTBusinessGameReport -
type DTBusinessGameReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// businessid
	Businessid string `protobuf:"bytes,1,opt,name=businessid,proto3" json:"businessid,omitempty"`
	// gamecode
	Gamecode string `protobuf:"bytes,2,opt,name=gamecode,proto3" json:"gamecode,omitempty"`
	// totalWin
	TotalWin float32 `protobuf:"fixed32,3,opt,name=totalWin,proto3" json:"totalWin,omitempty"`
	// totalBet
	TotalBet float32 `protobuf:"fixed32,4,opt,name=totalBet,proto3" json:"totalBet,omitempty"`
	// gameNums
	GameNums int32 `protobuf:"varint,5,opt,name=gameNums,proto3" json:"gameNums,omitempty"`
	// currency
	Currency string `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *DTBusinessGameReport) Reset() {
	*x = DTBusinessGameReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dt_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DTBusinessGameReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DTBusinessGameReport) ProtoMessage() {}

func (x *DTBusinessGameReport) ProtoReflect() protoreflect.Message {
	mi := &file_dt_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DTBusinessGameReport.ProtoReflect.Descriptor instead.
func (*DTBusinessGameReport) Descriptor() ([]byte, []int) {
	return file_dt_proto_rawDescGZIP(), []int{2}
}

func (x *DTBusinessGameReport) GetBusinessid() string {
	if x != nil {
		return x.Businessid
	}
	return ""
}

func (x *DTBusinessGameReport) GetGamecode() string {
	if x != nil {
		return x.Gamecode
	}
	return ""
}

func (x *DTBusinessGameReport) GetTotalWin() float32 {
	if x != nil {
		return x.TotalWin
	}
	return 0
}

func (x *DTBusinessGameReport) GetTotalBet() float32 {
	if x != nil {
		return x.TotalBet
	}
	return 0
}

func (x *DTBusinessGameReport) GetGameNums() int32 {
	if x != nil {
		return x.GameNums
	}
	return 0
}

func (x *DTBusinessGameReport) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

// DTTodayGameData -
type DTTodayGameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// totalWin
	TotalWin float32 `protobuf:"fixed32,1,opt,name=totalWin,proto3" json:"totalWin,omitempty"`
	// totalBet
	TotalBet float32 `protobuf:"fixed32,2,opt,name=totalBet,proto3" json:"totalBet,omitempty"`
	// gameNums
	GameNums int32 `protobuf:"varint,3,opt,name=gameNums,proto3" json:"gameNums,omitempty"`
}

func (x *DTTodayGameData) Reset() {
	*x = DTTodayGameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dt_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DTTodayGameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DTTodayGameData) ProtoMessage() {}

func (x *DTTodayGameData) ProtoReflect() protoreflect.Message {
	mi := &file_dt_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DTTodayGameData.ProtoReflect.Descriptor instead.
func (*DTTodayGameData) Descriptor() ([]byte, []int) {
	return file_dt_proto_rawDescGZIP(), []int{3}
}

func (x *DTTodayGameData) GetTotalWin() float32 {
	if x != nil {
		return x.TotalWin
	}
	return 0
}

func (x *DTTodayGameData) GetTotalBet() float32 {
	if x != nil {
		return x.TotalBet
	}
	return 0
}

func (x *DTTodayGameData) GetGameNums() int32 {
	if x != nil {
		return x.GameNums
	}
	return 0
}

// DTGPKGameResult -
type DTGPKGameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         string             `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	BusinessID string             `protobuf:"bytes,2,opt,name=businessID,proto3" json:"businessID,omitempty"`
	PlayerName string             `protobuf:"bytes,3,opt,name=playerName,proto3" json:"playerName,omitempty"`
	GameCode   string             `protobuf:"bytes,4,opt,name=gameCode,proto3" json:"gameCode,omitempty"`
	Win        float32            `protobuf:"fixed32,5,opt,name=win,proto3" json:"win,omitempty"`
	Bet        float32            `protobuf:"fixed32,6,opt,name=bet,proto3" json:"bet,omitempty"`
	Off        float32            `protobuf:"fixed32,7,opt,name=off,proto3" json:"off,omitempty"`
	Lines      int32              `protobuf:"varint,8,opt,name=lines,proto3" json:"lines,omitempty"`
	MoneyStart float32            `protobuf:"fixed32,9,opt,name=moneyStart,proto3" json:"moneyStart,omitempty"`
	MoneyEnd   float32            `protobuf:"fixed32,10,opt,name=moneyEnd,proto3" json:"moneyEnd,omitempty"`
	PlayerIP   string             `protobuf:"bytes,11,opt,name=playerIP,proto3" json:"playerIP,omitempty"`
	DataState  string             `protobuf:"bytes,12,opt,name=dataState,proto3" json:"dataState,omitempty"`
	GameTime   string             `protobuf:"bytes,13,opt,name=gameTime,proto3" json:"gameTime,omitempty"`
	ClientType string             `protobuf:"bytes,14,opt,name=clientType,proto3" json:"clientType,omitempty"`
	Currency   string             `protobuf:"bytes,15,opt,name=currency,proto3" json:"currency,omitempty"`
	IsComplete bool               `protobuf:"varint,16,opt,name=isComplete,proto3" json:"isComplete,omitempty"`
	GiftFreeID string             `protobuf:"bytes,17,opt,name=giftFreeID,proto3" json:"giftFreeID,omitempty"`
	GameData   string             `protobuf:"bytes,18,opt,name=gameData,proto3" json:"gameData,omitempty"`
	GameResult string             `protobuf:"bytes,19,opt,name=gameResult,proto3" json:"gameResult,omitempty"`
	HasSubGame bool               `protobuf:"varint,20,opt,name=hasSubGame,proto3" json:"hasSubGame,omitempty"`
	Dtbaseid   string             `protobuf:"bytes,21,opt,name=dtbaseid,proto3" json:"dtbaseid,omitempty"`
	RootGame   bool               `protobuf:"varint,22,opt,name=rootGame,proto3" json:"rootGame,omitempty"`
	Children   []*DTGPKGameResult `protobuf:"bytes,100,rep,name=children,proto3" json:"children,omitempty"`
	Err        *DTGameResultErr   `protobuf:"bytes,200,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *DTGPKGameResult) Reset() {
	*x = DTGPKGameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dt_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DTGPKGameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DTGPKGameResult) ProtoMessage() {}

func (x *DTGPKGameResult) ProtoReflect() protoreflect.Message {
	mi := &file_dt_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DTGPKGameResult.ProtoReflect.Descriptor instead.
func (*DTGPKGameResult) Descriptor() ([]byte, []int) {
	return file_dt_proto_rawDescGZIP(), []int{4}
}

func (x *DTGPKGameResult) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DTGPKGameResult) GetBusinessID() string {
	if x != nil {
		return x.BusinessID
	}
	return ""
}

func (x *DTGPKGameResult) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *DTGPKGameResult) GetGameCode() string {
	if x != nil {
		return x.GameCode
	}
	return ""
}

func (x *DTGPKGameResult) GetWin() float32 {
	if x != nil {
		return x.Win
	}
	return 0
}

func (x *DTGPKGameResult) GetBet() float32 {
	if x != nil {
		return x.Bet
	}
	return 0
}

func (x *DTGPKGameResult) GetOff() float32 {
	if x != nil {
		return x.Off
	}
	return 0
}

func (x *DTGPKGameResult) GetLines() int32 {
	if x != nil {
		return x.Lines
	}
	return 0
}

func (x *DTGPKGameResult) GetMoneyStart() float32 {
	if x != nil {
		return x.MoneyStart
	}
	return 0
}

func (x *DTGPKGameResult) GetMoneyEnd() float32 {
	if x != nil {
		return x.MoneyEnd
	}
	return 0
}

func (x *DTGPKGameResult) GetPlayerIP() string {
	if x != nil {
		return x.PlayerIP
	}
	return ""
}

func (x *DTGPKGameResult) GetDataState() string {
	if x != nil {
		return x.DataState
	}
	return ""
}

func (x *DTGPKGameResult) GetGameTime() string {
	if x != nil {
		return x.GameTime
	}
	return ""
}

func (x *DTGPKGameResult) GetClientType() string {
	if x != nil {
		return x.ClientType
	}
	return ""
}

func (x *DTGPKGameResult) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DTGPKGameResult) GetIsComplete() bool {
	if x != nil {
		return x.IsComplete
	}
	return false
}

func (x *DTGPKGameResult) GetGiftFreeID() string {
	if x != nil {
		return x.GiftFreeID
	}
	return ""
}

func (x *DTGPKGameResult) GetGameData() string {
	if x != nil {
		return x.GameData
	}
	return ""
}

func (x *DTGPKGameResult) GetGameResult() string {
	if x != nil {
		return x.GameResult
	}
	return ""
}

func (x *DTGPKGameResult) GetHasSubGame() bool {
	if x != nil {
		return x.HasSubGame
	}
	return false
}

func (x *DTGPKGameResult) GetDtbaseid() string {
	if x != nil {
		return x.Dtbaseid
	}
	return ""
}

func (x *DTGPKGameResult) GetRootGame() bool {
	if x != nil {
		return x.RootGame
	}
	return false
}

func (x *DTGPKGameResult) GetChildren() []*DTGPKGameResult {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *DTGPKGameResult) GetErr() *DTGameResultErr {
	if x != nil {
		return x.Err
	}
	return nil
}

// DTGPKCheckGameResult -
type DTGPKCheckGameResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lst     []*DTGPKGameResult `protobuf:"bytes,1,rep,name=lst,proto3" json:"lst,omitempty"`
	ErrNums int32              `protobuf:"varint,10,opt,name=errNums,proto3" json:"errNums,omitempty"`
}

func (x *DTGPKCheckGameResult) Reset() {
	*x = DTGPKCheckGameResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dt_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DTGPKCheckGameResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DTGPKCheckGameResult) ProtoMessage() {}

func (x *DTGPKCheckGameResult) ProtoReflect() protoreflect.Message {
	mi := &file_dt_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DTGPKCheckGameResult.ProtoReflect.Descriptor instead.
func (*DTGPKCheckGameResult) Descriptor() ([]byte, []int) {
	return file_dt_proto_rawDescGZIP(), []int{5}
}

func (x *DTGPKCheckGameResult) GetLst() []*DTGPKGameResult {
	if x != nil {
		return x.Lst
	}
	return nil
}

func (x *DTGPKCheckGameResult) GetErrNums() int32 {
	if x != nil {
		return x.ErrNums
	}
	return 0
}

// ReplyDTData - reply DT Data
type ReplyDTData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gameReport
	GameReports []*DTBusinessGameReport `protobuf:"bytes,1,rep,name=gameReports,proto3" json:"gameReports,omitempty"`
	// todayGameData
	TodayGameData *DTTodayGameData `protobuf:"bytes,2,opt,name=todayGameData,proto3" json:"todayGameData,omitempty"`
	// checkGameResultGPK
	CheckGameResultGPK *DTGPKCheckGameResult `protobuf:"bytes,3,opt,name=checkGameResultGPK,proto3" json:"checkGameResultGPK,omitempty"`
}

func (x *ReplyDTData) Reset() {
	*x = ReplyDTData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dt_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyDTData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyDTData) ProtoMessage() {}

func (x *ReplyDTData) ProtoReflect() protoreflect.Message {
	mi := &file_dt_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyDTData.ProtoReflect.Descriptor instead.
func (*ReplyDTData) Descriptor() ([]byte, []int) {
	return file_dt_proto_rawDescGZIP(), []int{6}
}

func (x *ReplyDTData) GetGameReports() []*DTBusinessGameReport {
	if x != nil {
		return x.GameReports
	}
	return nil
}

func (x *ReplyDTData) GetTodayGameData() *DTTodayGameData {
	if x != nil {
		return x.TodayGameData
	}
	return nil
}

func (x *ReplyDTData) GetCheckGameResultGPK() *DTGPKCheckGameResult {
	if x != nil {
		return x.CheckGameResultGPK
	}
	return nil
}

var File_dt_proto protoreflect.FileDescriptor

var file_dt_proto_rawDesc = []byte{
	0x0a, 0x08, 0x64, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6a, 0x61, 0x72, 0x76,
	0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x9d, 0x01,
	0x0a, 0x0f, 0x44, 0x54, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x72,
	0x72, 0x12, 0x40, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c,
	0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x54, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x65, 0x72, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x76, 0x61, 0x6c, 0x30, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72, 0x76, 0x61, 0x6c, 0x30, 0x22, 0xaa, 0x02,
	0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x54, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x16, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3d, 0x0a, 0x0a, 0x64, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77,
	0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x54, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x64, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x6e, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xc2, 0x01, 0x0a, 0x14, 0x44,
	0x54, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e,
	0x75, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x4e,
	0x75, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22,
	0x65, 0x0a, 0x0f, 0x44, 0x54, 0x54, 0x6f, 0x64, 0x61, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x4e, 0x75, 0x6d, 0x73, 0x22, 0xe2, 0x05, 0x0a, 0x0f, 0x44, 0x54, 0x47, 0x50, 0x4b,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x69, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x77, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x65, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x62, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x66,
	0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6f, 0x66, 0x66, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x45, 0x6e, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x45, 0x6e, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x50, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x50, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x46, 0x72, 0x65, 0x65, 0x49, 0x44, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x69, 0x66, 0x74, 0x46, 0x72, 0x65, 0x65, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a,
	0x67, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x68, 0x61, 0x73, 0x53, 0x75, 0x62, 0x47, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x68, 0x61, 0x73, 0x53, 0x75, 0x62, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x74, 0x62, 0x61, 0x73, 0x65, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x74, 0x62, 0x61, 0x73, 0x65, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74,
	0x47, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63,
	0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x54, 0x47, 0x50, 0x4b,
	0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x12, 0x35, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0xc8, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c,
	0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x54, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x45, 0x72, 0x72, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x66, 0x0a, 0x14, 0x44,
	0x54, 0x47, 0x50, 0x4b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x34, 0x0a, 0x03, 0x6c, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x54, 0x47, 0x50, 0x4b, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x03, 0x6c, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72,
	0x4e, 0x75, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x4e,
	0x75, 0x6d, 0x73, 0x22, 0xfb, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x54, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69,
	0x73, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x54, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x0b, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x48,
	0x0a, 0x0d, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72,
	0x61, 0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x54, 0x54, 0x6f, 0x64, 0x61,
	0x79, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x74, 0x6f, 0x64, 0x61, 0x79,
	0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x57, 0x0a, 0x12, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x47, 0x50, 0x4b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6a, 0x61, 0x72, 0x76, 0x69, 0x73, 0x63, 0x72, 0x61,
	0x77, 0x6c, 0x65, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x54, 0x47, 0x50, 0x4b, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x12, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x47, 0x50,
	0x4b, 0x2a, 0x61, 0x0a, 0x0a, 0x44, 0x54, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x18, 0x44, 0x54, 0x5f, 0x44, 0x54, 0x5f, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53,
	0x53, 0x47, 0x41, 0x4d, 0x45, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x44, 0x54, 0x5f, 0x44, 0x54, 0x5f, 0x54, 0x4f, 0x44, 0x41, 0x59, 0x47, 0x41, 0x4d, 0x45,
	0x44, 0x41, 0x54, 0x41, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x54, 0x5f, 0x44, 0x54, 0x5f,
	0x47, 0x50, 0x4b, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x47, 0x41, 0x4d, 0x45, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x10, 0x02, 0x2a, 0xcd, 0x05, 0x0a, 0x13, 0x44, 0x54, 0x47, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b,
	0x44, 0x54, 0x47, 0x52, 0x45, 0x5f, 0x4e, 0x4f, 0x45, 0x52, 0x52, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x44, 0x54, 0x47, 0x52, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x43, 0x4f, 0x44, 0x45, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x54, 0x47, 0x52, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x53,
	0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x54, 0x47, 0x52, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x45,
	0x59, 0x4f, 0x46, 0x46, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x54, 0x47, 0x52, 0x45, 0x5f,
	0x57, 0x49, 0x4e, 0x42, 0x45, 0x54, 0x4f, 0x46, 0x46, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x44,
	0x54, 0x47, 0x52, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x44, 0x41, 0x54, 0x41, 0x10, 0x05, 0x12,
	0x18, 0x0a, 0x14, 0x44, 0x54, 0x47, 0x52, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x42, 0x45, 0x54, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x54, 0x47,
	0x52, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x57, 0x49,
	0x4e, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x54, 0x47, 0x52, 0x45, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x55, 0x4d, 0x5f, 0x57, 0x49, 0x4e, 0x10,
	0x08, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x54, 0x47, 0x52, 0x45, 0x5f, 0x49, 0x53, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x54, 0x47, 0x52, 0x45,
	0x5f, 0x47, 0x41, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10,
	0x44, 0x54, 0x47, 0x52, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x10, 0x0b, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x54, 0x47, 0x52, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x53, 0x10, 0x0c, 0x12, 0x1a,
	0x0a, 0x16, 0x44, 0x54, 0x47, 0x52, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x54,
	0x47, 0x52, 0x45, 0x5f, 0x4e, 0x4f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x52, 0x45, 0x4e, 0x10, 0x0f,
	0x12, 0x18, 0x0a, 0x14, 0x44, 0x54, 0x47, 0x52, 0x45, 0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x52,
	0x45, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x10, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x54,
	0x47, 0x52, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x11, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x54, 0x47,
	0x52, 0x45, 0x5f, 0x44, 0x54, 0x42, 0x41, 0x53, 0x45, 0x49, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x12, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x54, 0x47, 0x52, 0x45, 0x5f, 0x4e, 0x4f, 0x44,
	0x54, 0x42, 0x41, 0x53, 0x45, 0x49, 0x44, 0x10, 0x13, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x54, 0x47,
	0x52, 0x45, 0x5f, 0x44, 0x54, 0x42, 0x41, 0x53, 0x45, 0x49, 0x44, 0x5f, 0x4e, 0x4f, 0x42, 0x41,
	0x53, 0x45, 0x49, 0x44, 0x10, 0x14, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x54, 0x47, 0x52, 0x45, 0x5f,
	0x44, 0x54, 0x42, 0x41, 0x53, 0x45, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x49, 0x44, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x15, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x54, 0x47, 0x52, 0x45,
	0x5f, 0x44, 0x54, 0x42, 0x41, 0x53, 0x45, 0x49, 0x44, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x10, 0x16,
	0x12, 0x19, 0x0a, 0x15, 0x44, 0x54, 0x47, 0x52, 0x45, 0x5f, 0x44, 0x54, 0x42, 0x41, 0x53, 0x45,
	0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x49, 0x4e, 0x10, 0x17, 0x12, 0x18, 0x0a, 0x14, 0x44,
	0x54, 0x47, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x46, 0x47, 0x4e,
	0x55, 0x4d, 0x53, 0x10, 0x18, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x54, 0x47, 0x52, 0x45, 0x5f, 0x49,
	0x43, 0x4f, 0x4e, 0x34, 0x30, 0x34, 0x10, 0x19, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x54, 0x47, 0x52,
	0x45, 0x5f, 0x53, 0x55, 0x42, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54,
	0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x1a, 0x12, 0x1c, 0x0a,
	0x18, 0x44, 0x54, 0x47, 0x52, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4a, 0x50, 0x10, 0x1b, 0x12, 0x17, 0x0a, 0x13, 0x44,
	0x54, 0x47, 0x52, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4a, 0x50, 0x57,
	0x49, 0x4e, 0x10, 0x1c, 0x42, 0x20, 0x5a, 0x1e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x7a, 0x68, 0x73, 0x30, 0x30, 0x37, 0x2f, 0x6a, 0x63, 0x63, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dt_proto_rawDescOnce sync.Once
	file_dt_proto_rawDescData = file_dt_proto_rawDesc
)

func file_dt_proto_rawDescGZIP() []byte {
	file_dt_proto_rawDescOnce.Do(func() {
		file_dt_proto_rawDescData = protoimpl.X.CompressGZIP(file_dt_proto_rawDescData)
	})
	return file_dt_proto_rawDescData
}

var file_dt_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_dt_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_dt_proto_goTypes = []interface{}{
	(DTDataType)(0),              // 0: jarviscrawlercore.DTDataType
	(DTGameResultErrCode)(0),     // 1: jarviscrawlercore.DTGameResultErrCode
	(*DTGameResultErr)(nil),      // 2: jarviscrawlercore.DTGameResultErr
	(*RequestDTData)(nil),        // 3: jarviscrawlercore.RequestDTData
	(*DTBusinessGameReport)(nil), // 4: jarviscrawlercore.DTBusinessGameReport
	(*DTTodayGameData)(nil),      // 5: jarviscrawlercore.DTTodayGameData
	(*DTGPKGameResult)(nil),      // 6: jarviscrawlercore.DTGPKGameResult
	(*DTGPKCheckGameResult)(nil), // 7: jarviscrawlercore.DTGPKCheckGameResult
	(*ReplyDTData)(nil),          // 8: jarviscrawlercore.ReplyDTData
}
var file_dt_proto_depIdxs = []int32{
	1, // 0: jarviscrawlercore.DTGameResultErr.errcode:type_name -> jarviscrawlercore.DTGameResultErrCode
	0, // 1: jarviscrawlercore.RequestDTData.dtDataType:type_name -> jarviscrawlercore.DTDataType
	6, // 2: jarviscrawlercore.DTGPKGameResult.children:type_name -> jarviscrawlercore.DTGPKGameResult
	2, // 3: jarviscrawlercore.DTGPKGameResult.err:type_name -> jarviscrawlercore.DTGameResultErr
	6, // 4: jarviscrawlercore.DTGPKCheckGameResult.lst:type_name -> jarviscrawlercore.DTGPKGameResult
	4, // 5: jarviscrawlercore.ReplyDTData.gameReports:type_name -> jarviscrawlercore.DTBusinessGameReport
	5, // 6: jarviscrawlercore.ReplyDTData.todayGameData:type_name -> jarviscrawlercore.DTTodayGameData
	7, // 7: jarviscrawlercore.ReplyDTData.checkGameResultGPK:type_name -> jarviscrawlercore.DTGPKCheckGameResult
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_dt_proto_init() }
func file_dt_proto_init() {
	if File_dt_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dt_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DTGameResultErr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dt_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestDTData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dt_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DTBusinessGameReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dt_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DTTodayGameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dt_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DTGPKGameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dt_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DTGPKCheckGameResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dt_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyDTData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dt_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dt_proto_goTypes,
		DependencyIndexes: file_dt_proto_depIdxs,
		EnumInfos:         file_dt_proto_enumTypes,
		MessageInfos:      file_dt_proto_msgTypes,
	}.Build()
	File_dt_proto = out.File
	file_dt_proto_rawDesc = nil
	file_dt_proto_goTypes = nil
	file_dt_proto_depIdxs = nil
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: result.proto

package jarviscrawlercore

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ParagraphType - paragraph type
type ParagraphType int32

const (
	ParagraphType_PT_NULL     ParagraphType = 0
	ParagraphType_PT_TEXT     ParagraphType = 1
	ParagraphType_PT_IMAGE    ParagraphType = 2
	ParagraphType_PT_HEADLINE ParagraphType = 3
	ParagraphType_PT_POSTLIST ParagraphType = 4
	ParagraphType_PT_COMMENT  ParagraphType = 5
)

var ParagraphType_name = map[int32]string{
	0: "PT_NULL",
	1: "PT_TEXT",
	2: "PT_IMAGE",
	3: "PT_HEADLINE",
	4: "PT_POSTLIST",
	5: "PT_COMMENT",
}
var ParagraphType_value = map[string]int32{
	"PT_NULL":     0,
	"PT_TEXT":     1,
	"PT_IMAGE":    2,
	"PT_HEADLINE": 3,
	"PT_POSTLIST": 4,
	"PT_COMMENT":  5,
}

func (x ParagraphType) String() string {
	return proto.EnumName(ParagraphType_name, int32(x))
}
func (ParagraphType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{0}
}

type BTResFileType int32

const (
	BTResFileType_BTRFT_ED2K   BTResFileType = 0
	BTResFileType_BTRFT_MAGNET BTResFileType = 1
)

var BTResFileType_name = map[int32]string{
	0: "BTRFT_ED2K",
	1: "BTRFT_MAGNET",
}
var BTResFileType_value = map[string]int32{
	"BTRFT_ED2K":   0,
	"BTRFT_MAGNET": 1,
}

func (x BTResFileType) String() string {
	return proto.EnumName(BTResFileType_name, int32(x))
}
func (BTResFileType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{1}
}

// DTDataType -
type DTDataType int32

const (
	DTDataType_DT_DT_BUSINESSGAMEREPORT DTDataType = 0
	DTDataType_DT_DT_TODAYGAMEDATA      DTDataType = 1
	DTDataType_DT_DT_GPKCHECKGAMERESULT DTDataType = 2
)

var DTDataType_name = map[int32]string{
	0: "DT_DT_BUSINESSGAMEREPORT",
	1: "DT_DT_TODAYGAMEDATA",
	2: "DT_DT_GPKCHECKGAMERESULT",
}
var DTDataType_value = map[string]int32{
	"DT_DT_BUSINESSGAMEREPORT": 0,
	"DT_DT_TODAYGAMEDATA":      1,
	"DT_DT_GPKCHECKGAMERESULT": 2,
}

func (x DTDataType) String() string {
	return proto.EnumName(DTDataType_name, int32(x))
}
func (DTDataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{2}
}

// DTGameResultErrCode -
type DTGameResultErrCode int32

const (
	// no error
	DTGameResultErrCode_DTGRE_NOERR DTGameResultErrCode = 0
	// id.gamecode != gamecode
	DTGameResultErrCode_DTGRE_GAMECODE DTGameResultErrCode = 1
	// invalid lines
	DTGameResultErrCode_DTGRE_LINES DTGameResultErrCode = 2
	// moneyEnd != moneyStart + off
	DTGameResultErrCode_DTGRE_MONEYOFF DTGameResultErrCode = 3
	// off != win - bet
	DTGameResultErrCode_DTGRE_WINBETOFF DTGameResultErrCode = 4
	// invalid gamedata
	DTGameResultErrCode_DTGRE_GAMEDATA DTGameResultErrCode = 5
	// invalid gameresult bet
	DTGameResultErrCode_DTGRE_GAMERESULT_BET DTGameResultErrCode = 6
	// invalid gameresult win
	DTGameResultErrCode_DTGRE_GAMERESULT_WIN DTGameResultErrCode = 7
	// invalid gameresult sumwin
	DTGameResultErrCode_DTGRE_GAMERESULT_SUM_WIN DTGameResultErrCode = 8
	// invalid iscomplete
	DTGameResultErrCode_DTGRE_ISCOMPLETE DTGameResultErrCode = 9
	// invalid gamestate
	DTGameResultErrCode_DTGRE_GAMESTATE DTGameResultErrCode = 10
	// invalid gameresult
	DTGameResultErrCode_DTGRE_GAMERESULT DTGameResultErrCode = 11
	// invalid gameresult lines
	DTGameResultErrCode_DTGRE_GAMERESULT_LINES DTGameResultErrCode = 12
	// invalid gameresult times
	DTGameResultErrCode_DTGRE_GAMERESULT_TIMES DTGameResultErrCode = 13
	// no children
	DTGameResultErrCode_DTGRE_NOCHILDREN DTGameResultErrCode = 15
	// no children error
	DTGameResultErrCode_DTGRE_CHILDREN_ERROR DTGameResultErrCode = 16
	// sub game not complete
	DTGameResultErrCode_DTGRE_SUBGAME_NOTCOMPLETE DTGameResultErrCode = 17
	// dtbaseid error
	DTGameResultErrCode_DTGRE_DTBASEID_ERROR DTGameResultErrCode = 18
	// no dtbaseid
	DTGameResultErrCode_DTGRE_NODTBASEID DTGameResultErrCode = 19
	// no dtbaseid baseid
	DTGameResultErrCode_DTGRE_DTBASEID_NOBASEID DTGameResultErrCode = 20
	// dtbaseid baseid error
	DTGameResultErrCode_DTGRE_DTBASEID_BASEID_ERROR DTGameResultErrCode = 21
	// can not find dtbaseid free
	DTGameResultErrCode_DTGRE_DTBASEID_FREE DTGameResultErrCode = 22
	// can not find dtbaseid respin
	DTGameResultErrCode_DTGRE_DTBASEID_RESPIN DTGameResultErrCode = 23
	// invalid fgnums
	DTGameResultErrCode_DTGRE_INVALID_FGNUMS DTGameResultErrCode = 24
	// icon404
	DTGameResultErrCode_DTGRE_ICON404 DTGameResultErrCode = 25
	// sub game repeated complete
	DTGameResultErrCode_DTGRE_SUBGAME_REPEATED_COMPLETE DTGameResultErrCode = 26
	// sub game invalid jp
	DTGameResultErrCode_DTGRE_SUBGAME_INVALID_JP DTGameResultErrCode = 27
	// invalid jp win
	DTGameResultErrCode_DTGRE_INVALID_JPWIN DTGameResultErrCode = 28
)

var DTGameResultErrCode_name = map[int32]string{
	0:  "DTGRE_NOERR",
	1:  "DTGRE_GAMECODE",
	2:  "DTGRE_LINES",
	3:  "DTGRE_MONEYOFF",
	4:  "DTGRE_WINBETOFF",
	5:  "DTGRE_GAMEDATA",
	6:  "DTGRE_GAMERESULT_BET",
	7:  "DTGRE_GAMERESULT_WIN",
	8:  "DTGRE_GAMERESULT_SUM_WIN",
	9:  "DTGRE_ISCOMPLETE",
	10: "DTGRE_GAMESTATE",
	11: "DTGRE_GAMERESULT",
	12: "DTGRE_GAMERESULT_LINES",
	13: "DTGRE_GAMERESULT_TIMES",
	15: "DTGRE_NOCHILDREN",
	16: "DTGRE_CHILDREN_ERROR",
	17: "DTGRE_SUBGAME_NOTCOMPLETE",
	18: "DTGRE_DTBASEID_ERROR",
	19: "DTGRE_NODTBASEID",
	20: "DTGRE_DTBASEID_NOBASEID",
	21: "DTGRE_DTBASEID_BASEID_ERROR",
	22: "DTGRE_DTBASEID_FREE",
	23: "DTGRE_DTBASEID_RESPIN",
	24: "DTGRE_INVALID_FGNUMS",
	25: "DTGRE_ICON404",
	26: "DTGRE_SUBGAME_REPEATED_COMPLETE",
	27: "DTGRE_SUBGAME_INVALID_JP",
	28: "DTGRE_INVALID_JPWIN",
}
var DTGameResultErrCode_value = map[string]int32{
	"DTGRE_NOERR":                     0,
	"DTGRE_GAMECODE":                  1,
	"DTGRE_LINES":                     2,
	"DTGRE_MONEYOFF":                  3,
	"DTGRE_WINBETOFF":                 4,
	"DTGRE_GAMEDATA":                  5,
	"DTGRE_GAMERESULT_BET":            6,
	"DTGRE_GAMERESULT_WIN":            7,
	"DTGRE_GAMERESULT_SUM_WIN":        8,
	"DTGRE_ISCOMPLETE":                9,
	"DTGRE_GAMESTATE":                 10,
	"DTGRE_GAMERESULT":                11,
	"DTGRE_GAMERESULT_LINES":          12,
	"DTGRE_GAMERESULT_TIMES":          13,
	"DTGRE_NOCHILDREN":                15,
	"DTGRE_CHILDREN_ERROR":            16,
	"DTGRE_SUBGAME_NOTCOMPLETE":       17,
	"DTGRE_DTBASEID_ERROR":            18,
	"DTGRE_NODTBASEID":                19,
	"DTGRE_DTBASEID_NOBASEID":         20,
	"DTGRE_DTBASEID_BASEID_ERROR":     21,
	"DTGRE_DTBASEID_FREE":             22,
	"DTGRE_DTBASEID_RESPIN":           23,
	"DTGRE_INVALID_FGNUMS":            24,
	"DTGRE_ICON404":                   25,
	"DTGRE_SUBGAME_REPEATED_COMPLETE": 26,
	"DTGRE_SUBGAME_INVALID_JP":        27,
	"DTGRE_INVALID_JPWIN":             28,
}

func (x DTGameResultErrCode) String() string {
	return proto.EnumName(DTGameResultErrCode_name, int32(x))
}
func (DTGameResultErrCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{3}
}

// CrawlerType - crawler type
type CrawlerType int32

const (
	CrawlerType_CT_TRANSLATE2  CrawlerType = 0
	CrawlerType_CT_CB_COMPANY  CrawlerType = 1
	CrawlerType_CT_DTDATA      CrawlerType = 2
	CrawlerType_CT_ANALYZEPAGE CrawlerType = 3
	CrawlerType_CT_GEOIP       CrawlerType = 5
	CrawlerType_CT_TECHINASIA  CrawlerType = 6
)

var CrawlerType_name = map[int32]string{
	0: "CT_TRANSLATE2",
	1: "CT_CB_COMPANY",
	2: "CT_DTDATA",
	3: "CT_ANALYZEPAGE",
	5: "CT_GEOIP",
	6: "CT_TECHINASIA",
}
var CrawlerType_value = map[string]int32{
	"CT_TRANSLATE2":  0,
	"CT_CB_COMPANY":  1,
	"CT_DTDATA":      2,
	"CT_ANALYZEPAGE": 3,
	"CT_GEOIP":       5,
	"CT_TECHINASIA":  6,
}

func (x CrawlerType) String() string {
	return proto.EnumName(CrawlerType_name, int32(x))
}
func (CrawlerType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{4}
}

// AnalyzeScreenshotType - screenshot type
type AnalyzeScreenshotType int32

const (
	// AST_JPG - jpg
	AnalyzeScreenshotType_AST_JPG AnalyzeScreenshotType = 0
	// AST_PNG - png
	AnalyzeScreenshotType_AST_PNG AnalyzeScreenshotType = 1
)

var AnalyzeScreenshotType_name = map[int32]string{
	0: "AST_JPG",
	1: "AST_PNG",
}
var AnalyzeScreenshotType_value = map[string]int32{
	"AST_JPG": 0,
	"AST_PNG": 1,
}

func (x AnalyzeScreenshotType) String() string {
	return proto.EnumName(AnalyzeScreenshotType_name, int32(x))
}
func (AnalyzeScreenshotType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{5}
}

type TechInAsiaMode int32

const (
	// TIAM_COMPANY - company
	TechInAsiaMode_TIAM_COMPANY TechInAsiaMode = 0
	// TIAM_JOB - job
	TechInAsiaMode_TIAM_JOB TechInAsiaMode = 1
)

var TechInAsiaMode_name = map[int32]string{
	0: "TIAM_COMPANY",
	1: "TIAM_JOB",
}
var TechInAsiaMode_value = map[string]int32{
	"TIAM_COMPANY": 0,
	"TIAM_JOB":     1,
}

func (x TechInAsiaMode) String() string {
	return proto.EnumName(TechInAsiaMode_name, int32(x))
}
func (TechInAsiaMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{6}
}

// ImageInfo - image info
type ImageInfo struct {
	HashName             string   `protobuf:"bytes,1,opt,name=hashName,proto3" json:"hashName,omitempty"`
	Url                  string   `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Width                int32    `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	Height               int32    `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	Data                 []byte   `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageInfo) Reset()         { *m = ImageInfo{} }
func (m *ImageInfo) String() string { return proto.CompactTextString(m) }
func (*ImageInfo) ProtoMessage()    {}
func (*ImageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{0}
}
func (m *ImageInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageInfo.Unmarshal(m, b)
}
func (m *ImageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageInfo.Marshal(b, m, deterministic)
}
func (dst *ImageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageInfo.Merge(dst, src)
}
func (m *ImageInfo) XXX_Size() int {
	return xxx_messageInfo_ImageInfo.Size(m)
}
func (m *ImageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ImageInfo proto.InternalMessageInfo

func (m *ImageInfo) GetHashName() string {
	if m != nil {
		return m.HashName
	}
	return ""
}

func (m *ImageInfo) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ImageInfo) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *ImageInfo) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ImageInfo) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// Paragraph - paragraph
type Paragraph struct {
	Pt                   ParagraphType `protobuf:"varint,1,opt,name=pt,proto3,enum=jarviscrawlercore.ParagraphType" json:"pt,omitempty"`
	ImgHashName          string        `protobuf:"bytes,2,opt,name=imgHashName,proto3" json:"imgHashName,omitempty"`
	Text                 string        `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	ImgURL               string        `protobuf:"bytes,4,opt,name=imgURL,proto3" json:"imgURL,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Paragraph) Reset()         { *m = Paragraph{} }
func (m *Paragraph) String() string { return proto.CompactTextString(m) }
func (*Paragraph) ProtoMessage()    {}
func (*Paragraph) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{1}
}
func (m *Paragraph) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Paragraph.Unmarshal(m, b)
}
func (m *Paragraph) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Paragraph.Marshal(b, m, deterministic)
}
func (dst *Paragraph) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Paragraph.Merge(dst, src)
}
func (m *Paragraph) XXX_Size() int {
	return xxx_messageInfo_Paragraph.Size(m)
}
func (m *Paragraph) XXX_DiscardUnknown() {
	xxx_messageInfo_Paragraph.DiscardUnknown(m)
}

var xxx_messageInfo_Paragraph proto.InternalMessageInfo

func (m *Paragraph) GetPt() ParagraphType {
	if m != nil {
		return m.Pt
	}
	return ParagraphType_PT_NULL
}

func (m *Paragraph) GetImgHashName() string {
	if m != nil {
		return m.ImgHashName
	}
	return ""
}

func (m *Paragraph) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Paragraph) GetImgURL() string {
	if m != nil {
		return m.ImgURL
	}
	return ""
}

// ExportArticleResult - export article result
type ExportArticleResult struct {
	Title                string       `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Author               string       `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	WriteTime            string       `protobuf:"bytes,3,opt,name=writeTime,proto3" json:"writeTime,omitempty"`
	Article              string       `protobuf:"bytes,4,opt,name=article,proto3" json:"article,omitempty"`
	Url                  string       `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	Imgs                 []*ImageInfo `protobuf:"bytes,6,rep,name=imgs,proto3" json:"imgs,omitempty"`
	TitleImage           *ImageInfo   `protobuf:"bytes,7,opt,name=titleImage,proto3" json:"titleImage,omitempty"`
	Tags                 []string     `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`
	Paragraphs           []*Paragraph `protobuf:"bytes,9,rep,name=paragraphs,proto3" json:"paragraphs,omitempty"`
	Summary              string       `protobuf:"bytes,10,opt,name=summary,proto3" json:"summary,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ExportArticleResult) Reset()         { *m = ExportArticleResult{} }
func (m *ExportArticleResult) String() string { return proto.CompactTextString(m) }
func (*ExportArticleResult) ProtoMessage()    {}
func (*ExportArticleResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{2}
}
func (m *ExportArticleResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExportArticleResult.Unmarshal(m, b)
}
func (m *ExportArticleResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExportArticleResult.Marshal(b, m, deterministic)
}
func (dst *ExportArticleResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExportArticleResult.Merge(dst, src)
}
func (m *ExportArticleResult) XXX_Size() int {
	return xxx_messageInfo_ExportArticleResult.Size(m)
}
func (m *ExportArticleResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ExportArticleResult.DiscardUnknown(m)
}

var xxx_messageInfo_ExportArticleResult proto.InternalMessageInfo

func (m *ExportArticleResult) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ExportArticleResult) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *ExportArticleResult) GetWriteTime() string {
	if m != nil {
		return m.WriteTime
	}
	return ""
}

func (m *ExportArticleResult) GetArticle() string {
	if m != nil {
		return m.Article
	}
	return ""
}

func (m *ExportArticleResult) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ExportArticleResult) GetImgs() []*ImageInfo {
	if m != nil {
		return m.Imgs
	}
	return nil
}

func (m *ExportArticleResult) GetTitleImage() *ImageInfo {
	if m != nil {
		return m.TitleImage
	}
	return nil
}

func (m *ExportArticleResult) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *ExportArticleResult) GetParagraphs() []*Paragraph {
	if m != nil {
		return m.Paragraphs
	}
	return nil
}

func (m *ExportArticleResult) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

// Article - article
type Article struct {
	Title                string     `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Author               string     `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	WriteTime            string     `protobuf:"bytes,3,opt,name=writeTime,proto3" json:"writeTime,omitempty"`
	Summary              string     `protobuf:"bytes,4,opt,name=summary,proto3" json:"summary,omitempty"`
	Url                  string     `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	Image                *ImageInfo `protobuf:"bytes,6,opt,name=image,proto3" json:"image,omitempty"`
	SecondTitle          string     `protobuf:"bytes,7,opt,name=secondTitle,proto3" json:"secondTitle,omitempty"`
	Premium              bool       `protobuf:"varint,8,opt,name=premium,proto3" json:"premium,omitempty"`
	Lang                 string     `protobuf:"bytes,9,opt,name=lang,proto3" json:"lang,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Article) Reset()         { *m = Article{} }
func (m *Article) String() string { return proto.CompactTextString(m) }
func (*Article) ProtoMessage()    {}
func (*Article) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{3}
}
func (m *Article) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Article.Unmarshal(m, b)
}
func (m *Article) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Article.Marshal(b, m, deterministic)
}
func (dst *Article) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Article.Merge(dst, src)
}
func (m *Article) XXX_Size() int {
	return xxx_messageInfo_Article.Size(m)
}
func (m *Article) XXX_DiscardUnknown() {
	xxx_messageInfo_Article.DiscardUnknown(m)
}

var xxx_messageInfo_Article proto.InternalMessageInfo

func (m *Article) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Article) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Article) GetWriteTime() string {
	if m != nil {
		return m.WriteTime
	}
	return ""
}

func (m *Article) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *Article) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Article) GetImage() *ImageInfo {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *Article) GetSecondTitle() string {
	if m != nil {
		return m.SecondTitle
	}
	return ""
}

func (m *Article) GetPremium() bool {
	if m != nil {
		return m.Premium
	}
	return false
}

func (m *Article) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

// ArticleList - article list
type ArticleList struct {
	Articles             []*Article `protobuf:"bytes,1,rep,name=articles,proto3" json:"articles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ArticleList) Reset()         { *m = ArticleList{} }
func (m *ArticleList) String() string { return proto.CompactTextString(m) }
func (*ArticleList) ProtoMessage()    {}
func (*ArticleList) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{4}
}
func (m *ArticleList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ArticleList.Unmarshal(m, b)
}
func (m *ArticleList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ArticleList.Marshal(b, m, deterministic)
}
func (dst *ArticleList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleList.Merge(dst, src)
}
func (m *ArticleList) XXX_Size() int {
	return xxx_messageInfo_ArticleList.Size(m)
}
func (m *ArticleList) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleList.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleList proto.InternalMessageInfo

func (m *ArticleList) GetArticles() []*Article {
	if m != nil {
		return m.Articles
	}
	return nil
}

// ConfluenceUpdateItem - confluence all updates - item
type ConfluenceUpdateItem struct {
	Title                string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Url                  string   `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Summary              string   `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfluenceUpdateItem) Reset()         { *m = ConfluenceUpdateItem{} }
func (m *ConfluenceUpdateItem) String() string { return proto.CompactTextString(m) }
func (*ConfluenceUpdateItem) ProtoMessage()    {}
func (*ConfluenceUpdateItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{5}
}
func (m *ConfluenceUpdateItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfluenceUpdateItem.Unmarshal(m, b)
}
func (m *ConfluenceUpdateItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfluenceUpdateItem.Marshal(b, m, deterministic)
}
func (dst *ConfluenceUpdateItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfluenceUpdateItem.Merge(dst, src)
}
func (m *ConfluenceUpdateItem) XXX_Size() int {
	return xxx_messageInfo_ConfluenceUpdateItem.Size(m)
}
func (m *ConfluenceUpdateItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfluenceUpdateItem.DiscardUnknown(m)
}

var xxx_messageInfo_ConfluenceUpdateItem proto.InternalMessageInfo

func (m *ConfluenceUpdateItem) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ConfluenceUpdateItem) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ConfluenceUpdateItem) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

// ConfluenceUpdateGrouping - confluence all updates - grouping
type ConfluenceUpdateGrouping struct {
	Author               string                  `protobuf:"bytes,1,opt,name=author,proto3" json:"author,omitempty"`
	Items                []*ConfluenceUpdateItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ConfluenceUpdateGrouping) Reset()         { *m = ConfluenceUpdateGrouping{} }
func (m *ConfluenceUpdateGrouping) String() string { return proto.CompactTextString(m) }
func (*ConfluenceUpdateGrouping) ProtoMessage()    {}
func (*ConfluenceUpdateGrouping) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{6}
}
func (m *ConfluenceUpdateGrouping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfluenceUpdateGrouping.Unmarshal(m, b)
}
func (m *ConfluenceUpdateGrouping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfluenceUpdateGrouping.Marshal(b, m, deterministic)
}
func (dst *ConfluenceUpdateGrouping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfluenceUpdateGrouping.Merge(dst, src)
}
func (m *ConfluenceUpdateGrouping) XXX_Size() int {
	return xxx_messageInfo_ConfluenceUpdateGrouping.Size(m)
}
func (m *ConfluenceUpdateGrouping) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfluenceUpdateGrouping.DiscardUnknown(m)
}

var xxx_messageInfo_ConfluenceUpdateGrouping proto.InternalMessageInfo

func (m *ConfluenceUpdateGrouping) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *ConfluenceUpdateGrouping) GetItems() []*ConfluenceUpdateItem {
	if m != nil {
		return m.Items
	}
	return nil
}

// ConfluenceAllUpdates - confluence all updates
type ConfluenceAllUpdates struct {
	Updates              []*ConfluenceUpdateGrouping `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ConfluenceAllUpdates) Reset()         { *m = ConfluenceAllUpdates{} }
func (m *ConfluenceAllUpdates) String() string { return proto.CompactTextString(m) }
func (*ConfluenceAllUpdates) ProtoMessage()    {}
func (*ConfluenceAllUpdates) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{7}
}
func (m *ConfluenceAllUpdates) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfluenceAllUpdates.Unmarshal(m, b)
}
func (m *ConfluenceAllUpdates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfluenceAllUpdates.Marshal(b, m, deterministic)
}
func (dst *ConfluenceAllUpdates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfluenceAllUpdates.Merge(dst, src)
}
func (m *ConfluenceAllUpdates) XXX_Size() int {
	return xxx_messageInfo_ConfluenceAllUpdates.Size(m)
}
func (m *ConfluenceAllUpdates) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfluenceAllUpdates.DiscardUnknown(m)
}

var xxx_messageInfo_ConfluenceAllUpdates proto.InternalMessageInfo

func (m *ConfluenceAllUpdates) GetUpdates() []*ConfluenceUpdateGrouping {
	if m != nil {
		return m.Updates
	}
	return nil
}

// YCCompanies - YC Companies
type YCCompanies struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Url                  string   `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Info                 string   `protobuf:"bytes,3,opt,name=info,proto3" json:"info,omitempty"`
	Batch                string   `protobuf:"bytes,4,opt,name=batch,proto3" json:"batch,omitempty"`
	Isapp                bool     `protobuf:"varint,5,opt,name=isapp,proto3" json:"isapp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *YCCompanies) Reset()         { *m = YCCompanies{} }
func (m *YCCompanies) String() string { return proto.CompactTextString(m) }
func (*YCCompanies) ProtoMessage()    {}
func (*YCCompanies) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{8}
}
func (m *YCCompanies) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_YCCompanies.Unmarshal(m, b)
}
func (m *YCCompanies) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_YCCompanies.Marshal(b, m, deterministic)
}
func (dst *YCCompanies) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YCCompanies.Merge(dst, src)
}
func (m *YCCompanies) XXX_Size() int {
	return xxx_messageInfo_YCCompanies.Size(m)
}
func (m *YCCompanies) XXX_DiscardUnknown() {
	xxx_messageInfo_YCCompanies.DiscardUnknown(m)
}

var xxx_messageInfo_YCCompanies proto.InternalMessageInfo

func (m *YCCompanies) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *YCCompanies) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *YCCompanies) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *YCCompanies) GetBatch() string {
	if m != nil {
		return m.Batch
	}
	return ""
}

func (m *YCCompanies) GetIsapp() bool {
	if m != nil {
		return m.Isapp
	}
	return false
}

// CrunchBaseEmployee - CrunchBase Employee
type CrunchBaseEmployee struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Code                 string   `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Title                string   `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	StartDate            string   `protobuf:"bytes,4,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate              string   `protobuf:"bytes,5,opt,name=endDate,proto3" json:"endDate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CrunchBaseEmployee) Reset()         { *m = CrunchBaseEmployee{} }
func (m *CrunchBaseEmployee) String() string { return proto.CompactTextString(m) }
func (*CrunchBaseEmployee) ProtoMessage()    {}
func (*CrunchBaseEmployee) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{9}
}
func (m *CrunchBaseEmployee) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrunchBaseEmployee.Unmarshal(m, b)
}
func (m *CrunchBaseEmployee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrunchBaseEmployee.Marshal(b, m, deterministic)
}
func (dst *CrunchBaseEmployee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrunchBaseEmployee.Merge(dst, src)
}
func (m *CrunchBaseEmployee) XXX_Size() int {
	return xxx_messageInfo_CrunchBaseEmployee.Size(m)
}
func (m *CrunchBaseEmployee) XXX_DiscardUnknown() {
	xxx_messageInfo_CrunchBaseEmployee.DiscardUnknown(m)
}

var xxx_messageInfo_CrunchBaseEmployee proto.InternalMessageInfo

func (m *CrunchBaseEmployee) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CrunchBaseEmployee) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *CrunchBaseEmployee) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CrunchBaseEmployee) GetStartDate() string {
	if m != nil {
		return m.StartDate
	}
	return ""
}

func (m *CrunchBaseEmployee) GetEndDate() string {
	if m != nil {
		return m.EndDate
	}
	return ""
}

// CrunchBaseInvestment - CrunchBase Investment
type CrunchBaseInvestment struct {
	AnnouncedDate        string   `protobuf:"bytes,1,opt,name=announcedDate,proto3" json:"announcedDate,omitempty"`
	OrganizationName     string   `protobuf:"bytes,2,opt,name=organizationName,proto3" json:"organizationName,omitempty"`
	LeadInvestor         bool     `protobuf:"varint,3,opt,name=leadInvestor,proto3" json:"leadInvestor,omitempty"`
	FundingRound         string   `protobuf:"bytes,4,opt,name=fundingRound,proto3" json:"fundingRound,omitempty"`
	MoneyRaised          string   `protobuf:"bytes,5,opt,name=moneyRaised,proto3" json:"moneyRaised,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CrunchBaseInvestment) Reset()         { *m = CrunchBaseInvestment{} }
func (m *CrunchBaseInvestment) String() string { return proto.CompactTextString(m) }
func (*CrunchBaseInvestment) ProtoMessage()    {}
func (*CrunchBaseInvestment) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{10}
}
func (m *CrunchBaseInvestment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrunchBaseInvestment.Unmarshal(m, b)
}
func (m *CrunchBaseInvestment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrunchBaseInvestment.Marshal(b, m, deterministic)
}
func (dst *CrunchBaseInvestment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrunchBaseInvestment.Merge(dst, src)
}
func (m *CrunchBaseInvestment) XXX_Size() int {
	return xxx_messageInfo_CrunchBaseInvestment.Size(m)
}
func (m *CrunchBaseInvestment) XXX_DiscardUnknown() {
	xxx_messageInfo_CrunchBaseInvestment.DiscardUnknown(m)
}

var xxx_messageInfo_CrunchBaseInvestment proto.InternalMessageInfo

func (m *CrunchBaseInvestment) GetAnnouncedDate() string {
	if m != nil {
		return m.AnnouncedDate
	}
	return ""
}

func (m *CrunchBaseInvestment) GetOrganizationName() string {
	if m != nil {
		return m.OrganizationName
	}
	return ""
}

func (m *CrunchBaseInvestment) GetLeadInvestor() bool {
	if m != nil {
		return m.LeadInvestor
	}
	return false
}

func (m *CrunchBaseInvestment) GetFundingRound() string {
	if m != nil {
		return m.FundingRound
	}
	return ""
}

func (m *CrunchBaseInvestment) GetMoneyRaised() string {
	if m != nil {
		return m.MoneyRaised
	}
	return ""
}

// CrunchBaseAcquisition - CrunchBase Acquisition
type CrunchBaseAcquisition struct {
	AcquiredOrganizationName  string   `protobuf:"bytes,1,opt,name=acquiredOrganizationName,proto3" json:"acquiredOrganizationName,omitempty"`
	AcquiredOrganizationCode  string   `protobuf:"bytes,2,opt,name=acquiredOrganizationCode,proto3" json:"acquiredOrganizationCode,omitempty"`
	AnnouncedDate             string   `protobuf:"bytes,3,opt,name=announcedDate,proto3" json:"announcedDate,omitempty"`
	Price                     string   `protobuf:"bytes,4,opt,name=price,proto3" json:"price,omitempty"`
	AcquiringOrganizationName string   `protobuf:"bytes,5,opt,name=acquiringOrganizationName,proto3" json:"acquiringOrganizationName,omitempty"`
	AcquiringOrganizationCode string   `protobuf:"bytes,6,opt,name=acquiringOrganizationCode,proto3" json:"acquiringOrganizationCode,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *CrunchBaseAcquisition) Reset()         { *m = CrunchBaseAcquisition{} }
func (m *CrunchBaseAcquisition) String() string { return proto.CompactTextString(m) }
func (*CrunchBaseAcquisition) ProtoMessage()    {}
func (*CrunchBaseAcquisition) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{11}
}
func (m *CrunchBaseAcquisition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrunchBaseAcquisition.Unmarshal(m, b)
}
func (m *CrunchBaseAcquisition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrunchBaseAcquisition.Marshal(b, m, deterministic)
}
func (dst *CrunchBaseAcquisition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrunchBaseAcquisition.Merge(dst, src)
}
func (m *CrunchBaseAcquisition) XXX_Size() int {
	return xxx_messageInfo_CrunchBaseAcquisition.Size(m)
}
func (m *CrunchBaseAcquisition) XXX_DiscardUnknown() {
	xxx_messageInfo_CrunchBaseAcquisition.DiscardUnknown(m)
}

var xxx_messageInfo_CrunchBaseAcquisition proto.InternalMessageInfo

func (m *CrunchBaseAcquisition) GetAcquiredOrganizationName() string {
	if m != nil {
		return m.AcquiredOrganizationName
	}
	return ""
}

func (m *CrunchBaseAcquisition) GetAcquiredOrganizationCode() string {
	if m != nil {
		return m.AcquiredOrganizationCode
	}
	return ""
}

func (m *CrunchBaseAcquisition) GetAnnouncedDate() string {
	if m != nil {
		return m.AnnouncedDate
	}
	return ""
}

func (m *CrunchBaseAcquisition) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *CrunchBaseAcquisition) GetAcquiringOrganizationName() string {
	if m != nil {
		return m.AcquiringOrganizationName
	}
	return ""
}

func (m *CrunchBaseAcquisition) GetAcquiringOrganizationCode() string {
	if m != nil {
		return m.AcquiringOrganizationCode
	}
	return ""
}

// CrunchBaseInvestor - CrunchBase Investor
type CrunchBaseInvestor struct {
	InvestorName         string   `protobuf:"bytes,1,opt,name=investorName,proto3" json:"investorName,omitempty"`
	LeadInvestor         bool     `protobuf:"varint,2,opt,name=leadInvestor,proto3" json:"leadInvestor,omitempty"`
	Partners             []string `protobuf:"bytes,3,rep,name=Partners,proto3" json:"Partners,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CrunchBaseInvestor) Reset()         { *m = CrunchBaseInvestor{} }
func (m *CrunchBaseInvestor) String() string { return proto.CompactTextString(m) }
func (*CrunchBaseInvestor) ProtoMessage()    {}
func (*CrunchBaseInvestor) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{12}
}
func (m *CrunchBaseInvestor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrunchBaseInvestor.Unmarshal(m, b)
}
func (m *CrunchBaseInvestor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrunchBaseInvestor.Marshal(b, m, deterministic)
}
func (dst *CrunchBaseInvestor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrunchBaseInvestor.Merge(dst, src)
}
func (m *CrunchBaseInvestor) XXX_Size() int {
	return xxx_messageInfo_CrunchBaseInvestor.Size(m)
}
func (m *CrunchBaseInvestor) XXX_DiscardUnknown() {
	xxx_messageInfo_CrunchBaseInvestor.DiscardUnknown(m)
}

var xxx_messageInfo_CrunchBaseInvestor proto.InternalMessageInfo

func (m *CrunchBaseInvestor) GetInvestorName() string {
	if m != nil {
		return m.InvestorName
	}
	return ""
}

func (m *CrunchBaseInvestor) GetLeadInvestor() bool {
	if m != nil {
		return m.LeadInvestor
	}
	return false
}

func (m *CrunchBaseInvestor) GetPartners() []string {
	if m != nil {
		return m.Partners
	}
	return nil
}

// CrunchBaseFundingRound - CrunchBase FundingRound
type CrunchBaseFundingRound struct {
	AnnouncedDate        string                `protobuf:"bytes,1,opt,name=announcedDate,proto3" json:"announcedDate,omitempty"`
	TransactionName      string                `protobuf:"bytes,2,opt,name=transactionName,proto3" json:"transactionName,omitempty"`
	MoneyRaised          string                `protobuf:"bytes,3,opt,name=moneyRaised,proto3" json:"moneyRaised,omitempty"`
	Investors            []*CrunchBaseInvestor `protobuf:"bytes,100,rep,name=investors,proto3" json:"investors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CrunchBaseFundingRound) Reset()         { *m = CrunchBaseFundingRound{} }
func (m *CrunchBaseFundingRound) String() string { return proto.CompactTextString(m) }
func (*CrunchBaseFundingRound) ProtoMessage()    {}
func (*CrunchBaseFundingRound) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{13}
}
func (m *CrunchBaseFundingRound) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrunchBaseFundingRound.Unmarshal(m, b)
}
func (m *CrunchBaseFundingRound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrunchBaseFundingRound.Marshal(b, m, deterministic)
}
func (dst *CrunchBaseFundingRound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrunchBaseFundingRound.Merge(dst, src)
}
func (m *CrunchBaseFundingRound) XXX_Size() int {
	return xxx_messageInfo_CrunchBaseFundingRound.Size(m)
}
func (m *CrunchBaseFundingRound) XXX_DiscardUnknown() {
	xxx_messageInfo_CrunchBaseFundingRound.DiscardUnknown(m)
}

var xxx_messageInfo_CrunchBaseFundingRound proto.InternalMessageInfo

func (m *CrunchBaseFundingRound) GetAnnouncedDate() string {
	if m != nil {
		return m.AnnouncedDate
	}
	return ""
}

func (m *CrunchBaseFundingRound) GetTransactionName() string {
	if m != nil {
		return m.TransactionName
	}
	return ""
}

func (m *CrunchBaseFundingRound) GetMoneyRaised() string {
	if m != nil {
		return m.MoneyRaised
	}
	return ""
}

func (m *CrunchBaseFundingRound) GetInvestors() []*CrunchBaseInvestor {
	if m != nil {
		return m.Investors
	}
	return nil
}

// CrunchBaseOrganization - CrunchBase Organization
type CrunchBaseOrganization struct {
	Name                 string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Code                 string                    `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Categories           []string                  `protobuf:"bytes,3,rep,name=categories,proto3" json:"categories,omitempty"`
	HeadquartersRegions  []string                  `protobuf:"bytes,4,rep,name=headquartersRegions,proto3" json:"headquartersRegions,omitempty"`
	FoundedDate          string                    `protobuf:"bytes,5,opt,name=foundedDate,proto3" json:"foundedDate,omitempty"`
	Founders             []string                  `protobuf:"bytes,6,rep,name=founders,proto3" json:"founders,omitempty"`
	OperatingStatus      string                    `protobuf:"bytes,7,opt,name=operatingStatus,proto3" json:"operatingStatus,omitempty"`
	FundingStatus        string                    `protobuf:"bytes,8,opt,name=fundingStatus,proto3" json:"fundingStatus,omitempty"`
	LastFundingType      string                    `protobuf:"bytes,9,opt,name=lastFundingType,proto3" json:"lastFundingType,omitempty"`
	LegalName            string                    `protobuf:"bytes,10,opt,name=legalName,proto3" json:"legalName,omitempty"`
	StockSymbol          string                    `protobuf:"bytes,100,opt,name=stockSymbol,proto3" json:"stockSymbol,omitempty"`
	ValuationIPO         string                    `protobuf:"bytes,101,opt,name=valuationIPO,proto3" json:"valuationIPO,omitempty"`
	PriceIPO             string                    `protobuf:"bytes,102,opt,name=priceIPO,proto3" json:"priceIPO,omitempty"`
	DateIPO              string                    `protobuf:"bytes,103,opt,name=dateIPO,proto3" json:"dateIPO,omitempty"`
	MoneyRaisedIPO       string                    `protobuf:"bytes,104,opt,name=moneyRaisedIPO,proto3" json:"moneyRaisedIPO,omitempty"`
	FundingRounds        []*CrunchBaseFundingRound `protobuf:"bytes,200,rep,name=fundingRounds,proto3" json:"fundingRounds,omitempty"`
	CurEmployees         []*CrunchBaseEmployee     `protobuf:"bytes,301,rep,name=curEmployees,proto3" json:"curEmployees,omitempty"`
	BoardMembers         []*CrunchBaseEmployee     `protobuf:"bytes,401,rep,name=boardMembers,proto3" json:"boardMembers,omitempty"`
	PastEmployees        []*CrunchBaseEmployee     `protobuf:"bytes,501,rep,name=pastEmployees,proto3" json:"pastEmployees,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *CrunchBaseOrganization) Reset()         { *m = CrunchBaseOrganization{} }
func (m *CrunchBaseOrganization) String() string { return proto.CompactTextString(m) }
func (*CrunchBaseOrganization) ProtoMessage()    {}
func (*CrunchBaseOrganization) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{14}
}
func (m *CrunchBaseOrganization) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrunchBaseOrganization.Unmarshal(m, b)
}
func (m *CrunchBaseOrganization) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrunchBaseOrganization.Marshal(b, m, deterministic)
}
func (dst *CrunchBaseOrganization) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrunchBaseOrganization.Merge(dst, src)
}
func (m *CrunchBaseOrganization) XXX_Size() int {
	return xxx_messageInfo_CrunchBaseOrganization.Size(m)
}
func (m *CrunchBaseOrganization) XXX_DiscardUnknown() {
	xxx_messageInfo_CrunchBaseOrganization.DiscardUnknown(m)
}

var xxx_messageInfo_CrunchBaseOrganization proto.InternalMessageInfo

func (m *CrunchBaseOrganization) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CrunchBaseOrganization) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *CrunchBaseOrganization) GetCategories() []string {
	if m != nil {
		return m.Categories
	}
	return nil
}

func (m *CrunchBaseOrganization) GetHeadquartersRegions() []string {
	if m != nil {
		return m.HeadquartersRegions
	}
	return nil
}

func (m *CrunchBaseOrganization) GetFoundedDate() string {
	if m != nil {
		return m.FoundedDate
	}
	return ""
}

func (m *CrunchBaseOrganization) GetFounders() []string {
	if m != nil {
		return m.Founders
	}
	return nil
}

func (m *CrunchBaseOrganization) GetOperatingStatus() string {
	if m != nil {
		return m.OperatingStatus
	}
	return ""
}

func (m *CrunchBaseOrganization) GetFundingStatus() string {
	if m != nil {
		return m.FundingStatus
	}
	return ""
}

func (m *CrunchBaseOrganization) GetLastFundingType() string {
	if m != nil {
		return m.LastFundingType
	}
	return ""
}

func (m *CrunchBaseOrganization) GetLegalName() string {
	if m != nil {
		return m.LegalName
	}
	return ""
}

func (m *CrunchBaseOrganization) GetStockSymbol() string {
	if m != nil {
		return m.StockSymbol
	}
	return ""
}

func (m *CrunchBaseOrganization) GetValuationIPO() string {
	if m != nil {
		return m.ValuationIPO
	}
	return ""
}

func (m *CrunchBaseOrganization) GetPriceIPO() string {
	if m != nil {
		return m.PriceIPO
	}
	return ""
}

func (m *CrunchBaseOrganization) GetDateIPO() string {
	if m != nil {
		return m.DateIPO
	}
	return ""
}

func (m *CrunchBaseOrganization) GetMoneyRaisedIPO() string {
	if m != nil {
		return m.MoneyRaisedIPO
	}
	return ""
}

func (m *CrunchBaseOrganization) GetFundingRounds() []*CrunchBaseFundingRound {
	if m != nil {
		return m.FundingRounds
	}
	return nil
}

func (m *CrunchBaseOrganization) GetCurEmployees() []*CrunchBaseEmployee {
	if m != nil {
		return m.CurEmployees
	}
	return nil
}

func (m *CrunchBaseOrganization) GetBoardMembers() []*CrunchBaseEmployee {
	if m != nil {
		return m.BoardMembers
	}
	return nil
}

func (m *CrunchBaseOrganization) GetPastEmployees() []*CrunchBaseEmployee {
	if m != nil {
		return m.PastEmployees
	}
	return nil
}

// BT Resource file infomation
type BTResFileInfo struct {
	Type                 BTResFileType `protobuf:"varint,1,opt,name=type,proto3,enum=jarviscrawlercore.BTResFileType" json:"type,omitempty"`
	Url                  string        `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *BTResFileInfo) Reset()         { *m = BTResFileInfo{} }
func (m *BTResFileInfo) String() string { return proto.CompactTextString(m) }
func (*BTResFileInfo) ProtoMessage()    {}
func (*BTResFileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{15}
}
func (m *BTResFileInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTResFileInfo.Unmarshal(m, b)
}
func (m *BTResFileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTResFileInfo.Marshal(b, m, deterministic)
}
func (dst *BTResFileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTResFileInfo.Merge(dst, src)
}
func (m *BTResFileInfo) XXX_Size() int {
	return xxx_messageInfo_BTResFileInfo.Size(m)
}
func (m *BTResFileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BTResFileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BTResFileInfo proto.InternalMessageInfo

func (m *BTResFileInfo) GetType() BTResFileType {
	if m != nil {
		return m.Type
	}
	return BTResFileType_BTRFT_ED2K
}

func (m *BTResFileInfo) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

// BT Resource infomation
type BTResInfo struct {
	// fullname
	Fullname string `protobuf:"bytes,1,opt,name=fullname,proto3" json:"fullname,omitempty"`
	// name - name.chs name.eng
	Name map[string]string `protobuf:"bytes,2,rep,name=name,proto3" json:"name,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// resource id
	Resid string `protobuf:"bytes,3,opt,name=resid,proto3" json:"resid,omitempty"`
	// lst
	Lst                  []*BTResFileInfo `protobuf:"bytes,10,rep,name=lst,proto3" json:"lst,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *BTResInfo) Reset()         { *m = BTResInfo{} }
func (m *BTResInfo) String() string { return proto.CompactTextString(m) }
func (*BTResInfo) ProtoMessage()    {}
func (*BTResInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{16}
}
func (m *BTResInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BTResInfo.Unmarshal(m, b)
}
func (m *BTResInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BTResInfo.Marshal(b, m, deterministic)
}
func (dst *BTResInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BTResInfo.Merge(dst, src)
}
func (m *BTResInfo) XXX_Size() int {
	return xxx_messageInfo_BTResInfo.Size(m)
}
func (m *BTResInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BTResInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BTResInfo proto.InternalMessageInfo

func (m *BTResInfo) GetFullname() string {
	if m != nil {
		return m.Fullname
	}
	return ""
}

func (m *BTResInfo) GetName() map[string]string {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *BTResInfo) GetResid() string {
	if m != nil {
		return m.Resid
	}
	return ""
}

func (m *BTResInfo) GetLst() []*BTResFileInfo {
	if m != nil {
		return m.Lst
	}
	return nil
}

// RequestTranslate - request translate
type RequestTranslate struct {
	// text - source text
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// platform - it's like google
	Platform string `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty"`
	// srcLang - source language
	SrcLang string `protobuf:"bytes,3,opt,name=srcLang,proto3" json:"srcLang,omitempty"`
	// destLang - destination language
	DestLang string `protobuf:"bytes,4,opt,name=destLang,proto3" json:"destLang,omitempty"`
	// token - You need to have a valid token in order to get back correctly
	Token                string   `protobuf:"bytes,100,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestTranslate) Reset()         { *m = RequestTranslate{} }
func (m *RequestTranslate) String() string { return proto.CompactTextString(m) }
func (*RequestTranslate) ProtoMessage()    {}
func (*RequestTranslate) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{17}
}
func (m *RequestTranslate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestTranslate.Unmarshal(m, b)
}
func (m *RequestTranslate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestTranslate.Marshal(b, m, deterministic)
}
func (dst *RequestTranslate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestTranslate.Merge(dst, src)
}
func (m *RequestTranslate) XXX_Size() int {
	return xxx_messageInfo_RequestTranslate.Size(m)
}
func (m *RequestTranslate) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestTranslate.DiscardUnknown(m)
}

var xxx_messageInfo_RequestTranslate proto.InternalMessageInfo

func (m *RequestTranslate) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *RequestTranslate) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *RequestTranslate) GetSrcLang() string {
	if m != nil {
		return m.SrcLang
	}
	return ""
}

func (m *RequestTranslate) GetDestLang() string {
	if m != nil {
		return m.DestLang
	}
	return ""
}

func (m *RequestTranslate) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// ReplyTranslate - reply translate
type ReplyTranslate struct {
	// text - destination text
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyTranslate) Reset()         { *m = ReplyTranslate{} }
func (m *ReplyTranslate) String() string { return proto.CompactTextString(m) }
func (*ReplyTranslate) ProtoMessage()    {}
func (*ReplyTranslate) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{18}
}
func (m *ReplyTranslate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplyTranslate.Unmarshal(m, b)
}
func (m *ReplyTranslate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplyTranslate.Marshal(b, m, deterministic)
}
func (dst *ReplyTranslate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyTranslate.Merge(dst, src)
}
func (m *ReplyTranslate) XXX_Size() int {
	return xxx_messageInfo_ReplyTranslate.Size(m)
}
func (m *ReplyTranslate) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyTranslate.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyTranslate proto.InternalMessageInfo

func (m *ReplyTranslate) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

// RequestArticle - request article
type RequestArticle struct {
	// url
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// is need attach jquery
	AttachJQuery bool `protobuf:"varint,2,opt,name=attachJQuery,proto3" json:"attachJQuery,omitempty"`
	// token - You need to have a valid token in order to get back correctly
	Token                string   `protobuf:"bytes,100,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestArticle) Reset()         { *m = RequestArticle{} }
func (m *RequestArticle) String() string { return proto.CompactTextString(m) }
func (*RequestArticle) ProtoMessage()    {}
func (*RequestArticle) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{19}
}
func (m *RequestArticle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestArticle.Unmarshal(m, b)
}
func (m *RequestArticle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestArticle.Marshal(b, m, deterministic)
}
func (dst *RequestArticle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestArticle.Merge(dst, src)
}
func (m *RequestArticle) XXX_Size() int {
	return xxx_messageInfo_RequestArticle.Size(m)
}
func (m *RequestArticle) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestArticle.DiscardUnknown(m)
}

var xxx_messageInfo_RequestArticle proto.InternalMessageInfo

func (m *RequestArticle) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *RequestArticle) GetAttachJQuery() bool {
	if m != nil {
		return m.AttachJQuery
	}
	return false
}

func (m *RequestArticle) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// ReplyArticle - reply article
type ReplyArticle struct {
	// result
	Result *ExportArticleResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	// totalLength - If the message is too long, it will send data in multiple msg, this is the total length.
	TotalLength int32 `protobuf:"varint,2,opt,name=totalLength,proto3" json:"totalLength,omitempty"`
	// curStart - The starting point of the current data (in bytes).
	CurStart int32 `protobuf:"varint,3,opt,name=curStart,proto3" json:"curStart,omitempty"`
	// curLength - The length of the current data (in bytes).
	CurLength int32 `protobuf:"varint,4,opt,name=curLength,proto3" json:"curLength,omitempty"`
	// hashData - This is the hash of each paragraph.
	HashData string `protobuf:"bytes,5,opt,name=hashData,proto3" json:"hashData,omitempty"`
	// totalHashData - If multiple messages return data, this is the hash value of all data, only sent in the last message.
	TotalHashData string `protobuf:"bytes,6,opt,name=totalHashData,proto3" json:"totalHashData,omitempty"`
	// data
	Data                 []byte   `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyArticle) Reset()         { *m = ReplyArticle{} }
func (m *ReplyArticle) String() string { return proto.CompactTextString(m) }
func (*ReplyArticle) ProtoMessage()    {}
func (*ReplyArticle) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{20}
}
func (m *ReplyArticle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplyArticle.Unmarshal(m, b)
}
func (m *ReplyArticle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplyArticle.Marshal(b, m, deterministic)
}
func (dst *ReplyArticle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyArticle.Merge(dst, src)
}
func (m *ReplyArticle) XXX_Size() int {
	return xxx_messageInfo_ReplyArticle.Size(m)
}
func (m *ReplyArticle) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyArticle.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyArticle proto.InternalMessageInfo

func (m *ReplyArticle) GetResult() *ExportArticleResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ReplyArticle) GetTotalLength() int32 {
	if m != nil {
		return m.TotalLength
	}
	return 0
}

func (m *ReplyArticle) GetCurStart() int32 {
	if m != nil {
		return m.CurStart
	}
	return 0
}

func (m *ReplyArticle) GetCurLength() int32 {
	if m != nil {
		return m.CurLength
	}
	return 0
}

func (m *ReplyArticle) GetHashData() string {
	if m != nil {
		return m.HashData
	}
	return ""
}

func (m *ReplyArticle) GetTotalHashData() string {
	if m != nil {
		return m.TotalHashData
	}
	return ""
}

func (m *ReplyArticle) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// RequestArticles - request articles
type RequestArticles struct {
	// url
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"` // Deprecated: Do not use.
	// is need attach jquery
	AttachJQuery bool `protobuf:"varint,2,opt,name=attachJQuery,proto3" json:"attachJQuery,omitempty"` // Deprecated: Do not use.
	// website
	Website string `protobuf:"bytes,3,opt,name=website,proto3" json:"website,omitempty"`
	// token - You need to have a valid token in order to get back correctly
	Token                string   `protobuf:"bytes,100,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestArticles) Reset()         { *m = RequestArticles{} }
func (m *RequestArticles) String() string { return proto.CompactTextString(m) }
func (*RequestArticles) ProtoMessage()    {}
func (*RequestArticles) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{21}
}
func (m *RequestArticles) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestArticles.Unmarshal(m, b)
}
func (m *RequestArticles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestArticles.Marshal(b, m, deterministic)
}
func (dst *RequestArticles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestArticles.Merge(dst, src)
}
func (m *RequestArticles) XXX_Size() int {
	return xxx_messageInfo_RequestArticles.Size(m)
}
func (m *RequestArticles) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestArticles.DiscardUnknown(m)
}

var xxx_messageInfo_RequestArticles proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *RequestArticles) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

// Deprecated: Do not use.
func (m *RequestArticles) GetAttachJQuery() bool {
	if m != nil {
		return m.AttachJQuery
	}
	return false
}

func (m *RequestArticles) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *RequestArticles) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// ReplyArticles - reply articles
type ReplyArticles struct {
	// articles
	Articles             *ArticleList `protobuf:"bytes,1,opt,name=articles,proto3" json:"articles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ReplyArticles) Reset()         { *m = ReplyArticles{} }
func (m *ReplyArticles) String() string { return proto.CompactTextString(m) }
func (*ReplyArticles) ProtoMessage()    {}
func (*ReplyArticles) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{22}
}
func (m *ReplyArticles) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplyArticles.Unmarshal(m, b)
}
func (m *ReplyArticles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplyArticles.Marshal(b, m, deterministic)
}
func (dst *ReplyArticles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyArticles.Merge(dst, src)
}
func (m *ReplyArticles) XXX_Size() int {
	return xxx_messageInfo_ReplyArticles.Size(m)
}
func (m *ReplyArticles) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyArticles.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyArticles proto.InternalMessageInfo

func (m *ReplyArticles) GetArticles() *ArticleList {
	if m != nil {
		return m.Articles
	}
	return nil
}

// DTGameResultErr -
type DTGameResultErr struct {
	// errcode
	Errcode DTGameResultErrCode `protobuf:"varint,1,opt,name=errcode,proto3,enum=jarviscrawlercore.DTGameResultErrCode" json:"errcode,omitempty"`
	// value0
	Value0 int64 `protobuf:"varint,2,opt,name=value0,proto3" json:"value0,omitempty"`
	// value1
	Value1 int64 `protobuf:"varint,3,opt,name=value1,proto3" json:"value1,omitempty"`
	// strval0
	Strval0              string   `protobuf:"bytes,10,opt,name=strval0,proto3" json:"strval0,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DTGameResultErr) Reset()         { *m = DTGameResultErr{} }
func (m *DTGameResultErr) String() string { return proto.CompactTextString(m) }
func (*DTGameResultErr) ProtoMessage()    {}
func (*DTGameResultErr) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{23}
}
func (m *DTGameResultErr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DTGameResultErr.Unmarshal(m, b)
}
func (m *DTGameResultErr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DTGameResultErr.Marshal(b, m, deterministic)
}
func (dst *DTGameResultErr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DTGameResultErr.Merge(dst, src)
}
func (m *DTGameResultErr) XXX_Size() int {
	return xxx_messageInfo_DTGameResultErr.Size(m)
}
func (m *DTGameResultErr) XXX_DiscardUnknown() {
	xxx_messageInfo_DTGameResultErr.DiscardUnknown(m)
}

var xxx_messageInfo_DTGameResultErr proto.InternalMessageInfo

func (m *DTGameResultErr) GetErrcode() DTGameResultErrCode {
	if m != nil {
		return m.Errcode
	}
	return DTGameResultErrCode_DTGRE_NOERR
}

func (m *DTGameResultErr) GetValue0() int64 {
	if m != nil {
		return m.Value0
	}
	return 0
}

func (m *DTGameResultErr) GetValue1() int64 {
	if m != nil {
		return m.Value1
	}
	return 0
}

func (m *DTGameResultErr) GetStrval0() string {
	if m != nil {
		return m.Strval0
	}
	return ""
}

// RequestDTData - request DT Data
type RequestDTData struct {
	// mode
	Mode string `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"` // Deprecated: Do not use.
	// startTime
	StartTime string `protobuf:"bytes,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	// endTime
	EndTime string `protobuf:"bytes,3,opt,name=endTime,proto3" json:"endTime,omitempty"`
	// dtDataType
	DtDataType DTDataType `protobuf:"varint,4,opt,name=dtDataType,proto3,enum=jarviscrawlercore.DTDataType" json:"dtDataType,omitempty"`
	// environment name
	EnvName string `protobuf:"bytes,5,opt,name=envName,proto3" json:"envName,omitempty"`
	// business id
	Businessid string `protobuf:"bytes,6,opt,name=businessid,proto3" json:"businessid,omitempty"`
	// game code
	GameCode string `protobuf:"bytes,7,opt,name=gameCode,proto3" json:"gameCode,omitempty"`
	// player name
	PlayerName string `protobuf:"bytes,8,opt,name=playerName,proto3" json:"playerName,omitempty"`
	// token - You need to have a valid token in order to get back correctly
	Token                string   `protobuf:"bytes,100,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestDTData) Reset()         { *m = RequestDTData{} }
func (m *RequestDTData) String() string { return proto.CompactTextString(m) }
func (*RequestDTData) ProtoMessage()    {}
func (*RequestDTData) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{24}
}
func (m *RequestDTData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestDTData.Unmarshal(m, b)
}
func (m *RequestDTData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestDTData.Marshal(b, m, deterministic)
}
func (dst *RequestDTData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestDTData.Merge(dst, src)
}
func (m *RequestDTData) XXX_Size() int {
	return xxx_messageInfo_RequestDTData.Size(m)
}
func (m *RequestDTData) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestDTData.DiscardUnknown(m)
}

var xxx_messageInfo_RequestDTData proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *RequestDTData) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *RequestDTData) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *RequestDTData) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *RequestDTData) GetDtDataType() DTDataType {
	if m != nil {
		return m.DtDataType
	}
	return DTDataType_DT_DT_BUSINESSGAMEREPORT
}

func (m *RequestDTData) GetEnvName() string {
	if m != nil {
		return m.EnvName
	}
	return ""
}

func (m *RequestDTData) GetBusinessid() string {
	if m != nil {
		return m.Businessid
	}
	return ""
}

func (m *RequestDTData) GetGameCode() string {
	if m != nil {
		return m.GameCode
	}
	return ""
}

func (m *RequestDTData) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

func (m *RequestDTData) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// DTBusinessGameReport -
type DTBusinessGameReport struct {
	// businessid
	Businessid string `protobuf:"bytes,1,opt,name=businessid,proto3" json:"businessid,omitempty"`
	// gamecode
	Gamecode string `protobuf:"bytes,2,opt,name=gamecode,proto3" json:"gamecode,omitempty"`
	// totalWin
	TotalWin float32 `protobuf:"fixed32,3,opt,name=totalWin,proto3" json:"totalWin,omitempty"`
	// totalBet
	TotalBet float32 `protobuf:"fixed32,4,opt,name=totalBet,proto3" json:"totalBet,omitempty"`
	// gameNums
	GameNums int32 `protobuf:"varint,5,opt,name=gameNums,proto3" json:"gameNums,omitempty"`
	// currency
	Currency             string   `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DTBusinessGameReport) Reset()         { *m = DTBusinessGameReport{} }
func (m *DTBusinessGameReport) String() string { return proto.CompactTextString(m) }
func (*DTBusinessGameReport) ProtoMessage()    {}
func (*DTBusinessGameReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{25}
}
func (m *DTBusinessGameReport) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DTBusinessGameReport.Unmarshal(m, b)
}
func (m *DTBusinessGameReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DTBusinessGameReport.Marshal(b, m, deterministic)
}
func (dst *DTBusinessGameReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DTBusinessGameReport.Merge(dst, src)
}
func (m *DTBusinessGameReport) XXX_Size() int {
	return xxx_messageInfo_DTBusinessGameReport.Size(m)
}
func (m *DTBusinessGameReport) XXX_DiscardUnknown() {
	xxx_messageInfo_DTBusinessGameReport.DiscardUnknown(m)
}

var xxx_messageInfo_DTBusinessGameReport proto.InternalMessageInfo

func (m *DTBusinessGameReport) GetBusinessid() string {
	if m != nil {
		return m.Businessid
	}
	return ""
}

func (m *DTBusinessGameReport) GetGamecode() string {
	if m != nil {
		return m.Gamecode
	}
	return ""
}

func (m *DTBusinessGameReport) GetTotalWin() float32 {
	if m != nil {
		return m.TotalWin
	}
	return 0
}

func (m *DTBusinessGameReport) GetTotalBet() float32 {
	if m != nil {
		return m.TotalBet
	}
	return 0
}

func (m *DTBusinessGameReport) GetGameNums() int32 {
	if m != nil {
		return m.GameNums
	}
	return 0
}

func (m *DTBusinessGameReport) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

// DTTodayGameData -
type DTTodayGameData struct {
	// totalWin
	TotalWin float32 `protobuf:"fixed32,1,opt,name=totalWin,proto3" json:"totalWin,omitempty"`
	// totalBet
	TotalBet float32 `protobuf:"fixed32,2,opt,name=totalBet,proto3" json:"totalBet,omitempty"`
	// gameNums
	GameNums             int32    `protobuf:"varint,3,opt,name=gameNums,proto3" json:"gameNums,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DTTodayGameData) Reset()         { *m = DTTodayGameData{} }
func (m *DTTodayGameData) String() string { return proto.CompactTextString(m) }
func (*DTTodayGameData) ProtoMessage()    {}
func (*DTTodayGameData) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{26}
}
func (m *DTTodayGameData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DTTodayGameData.Unmarshal(m, b)
}
func (m *DTTodayGameData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DTTodayGameData.Marshal(b, m, deterministic)
}
func (dst *DTTodayGameData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DTTodayGameData.Merge(dst, src)
}
func (m *DTTodayGameData) XXX_Size() int {
	return xxx_messageInfo_DTTodayGameData.Size(m)
}
func (m *DTTodayGameData) XXX_DiscardUnknown() {
	xxx_messageInfo_DTTodayGameData.DiscardUnknown(m)
}

var xxx_messageInfo_DTTodayGameData proto.InternalMessageInfo

func (m *DTTodayGameData) GetTotalWin() float32 {
	if m != nil {
		return m.TotalWin
	}
	return 0
}

func (m *DTTodayGameData) GetTotalBet() float32 {
	if m != nil {
		return m.TotalBet
	}
	return 0
}

func (m *DTTodayGameData) GetGameNums() int32 {
	if m != nil {
		return m.GameNums
	}
	return 0
}

// DTGPKGameResult -
type DTGPKGameResult struct {
	ID                   string             `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	BusinessID           string             `protobuf:"bytes,2,opt,name=businessID,proto3" json:"businessID,omitempty"`
	PlayerName           string             `protobuf:"bytes,3,opt,name=playerName,proto3" json:"playerName,omitempty"`
	GameCode             string             `protobuf:"bytes,4,opt,name=gameCode,proto3" json:"gameCode,omitempty"`
	Win                  float32            `protobuf:"fixed32,5,opt,name=win,proto3" json:"win,omitempty"`
	Bet                  float32            `protobuf:"fixed32,6,opt,name=bet,proto3" json:"bet,omitempty"`
	Off                  float32            `protobuf:"fixed32,7,opt,name=off,proto3" json:"off,omitempty"`
	Lines                int32              `protobuf:"varint,8,opt,name=lines,proto3" json:"lines,omitempty"`
	MoneyStart           float32            `protobuf:"fixed32,9,opt,name=moneyStart,proto3" json:"moneyStart,omitempty"`
	MoneyEnd             float32            `protobuf:"fixed32,10,opt,name=moneyEnd,proto3" json:"moneyEnd,omitempty"`
	PlayerIP             string             `protobuf:"bytes,11,opt,name=playerIP,proto3" json:"playerIP,omitempty"`
	DataState            string             `protobuf:"bytes,12,opt,name=dataState,proto3" json:"dataState,omitempty"`
	GameTime             string             `protobuf:"bytes,13,opt,name=gameTime,proto3" json:"gameTime,omitempty"`
	ClientType           string             `protobuf:"bytes,14,opt,name=clientType,proto3" json:"clientType,omitempty"`
	Currency             string             `protobuf:"bytes,15,opt,name=currency,proto3" json:"currency,omitempty"`
	IsComplete           bool               `protobuf:"varint,16,opt,name=isComplete,proto3" json:"isComplete,omitempty"`
	GiftFreeID           string             `protobuf:"bytes,17,opt,name=giftFreeID,proto3" json:"giftFreeID,omitempty"`
	GameData             string             `protobuf:"bytes,18,opt,name=gameData,proto3" json:"gameData,omitempty"`
	GameResult           string             `protobuf:"bytes,19,opt,name=gameResult,proto3" json:"gameResult,omitempty"`
	HasSubGame           bool               `protobuf:"varint,20,opt,name=hasSubGame,proto3" json:"hasSubGame,omitempty"`
	Dtbaseid             string             `protobuf:"bytes,21,opt,name=dtbaseid,proto3" json:"dtbaseid,omitempty"`
	RootGame             bool               `protobuf:"varint,22,opt,name=rootGame,proto3" json:"rootGame,omitempty"`
	Children             []*DTGPKGameResult `protobuf:"bytes,100,rep,name=children,proto3" json:"children,omitempty"`
	Err                  *DTGameResultErr   `protobuf:"bytes,200,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *DTGPKGameResult) Reset()         { *m = DTGPKGameResult{} }
func (m *DTGPKGameResult) String() string { return proto.CompactTextString(m) }
func (*DTGPKGameResult) ProtoMessage()    {}
func (*DTGPKGameResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{27}
}
func (m *DTGPKGameResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DTGPKGameResult.Unmarshal(m, b)
}
func (m *DTGPKGameResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DTGPKGameResult.Marshal(b, m, deterministic)
}
func (dst *DTGPKGameResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DTGPKGameResult.Merge(dst, src)
}
func (m *DTGPKGameResult) XXX_Size() int {
	return xxx_messageInfo_DTGPKGameResult.Size(m)
}
func (m *DTGPKGameResult) XXX_DiscardUnknown() {
	xxx_messageInfo_DTGPKGameResult.DiscardUnknown(m)
}

var xxx_messageInfo_DTGPKGameResult proto.InternalMessageInfo

func (m *DTGPKGameResult) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *DTGPKGameResult) GetBusinessID() string {
	if m != nil {
		return m.BusinessID
	}
	return ""
}

func (m *DTGPKGameResult) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

func (m *DTGPKGameResult) GetGameCode() string {
	if m != nil {
		return m.GameCode
	}
	return ""
}

func (m *DTGPKGameResult) GetWin() float32 {
	if m != nil {
		return m.Win
	}
	return 0
}

func (m *DTGPKGameResult) GetBet() float32 {
	if m != nil {
		return m.Bet
	}
	return 0
}

func (m *DTGPKGameResult) GetOff() float32 {
	if m != nil {
		return m.Off
	}
	return 0
}

func (m *DTGPKGameResult) GetLines() int32 {
	if m != nil {
		return m.Lines
	}
	return 0
}

func (m *DTGPKGameResult) GetMoneyStart() float32 {
	if m != nil {
		return m.MoneyStart
	}
	return 0
}

func (m *DTGPKGameResult) GetMoneyEnd() float32 {
	if m != nil {
		return m.MoneyEnd
	}
	return 0
}

func (m *DTGPKGameResult) GetPlayerIP() string {
	if m != nil {
		return m.PlayerIP
	}
	return ""
}

func (m *DTGPKGameResult) GetDataState() string {
	if m != nil {
		return m.DataState
	}
	return ""
}

func (m *DTGPKGameResult) GetGameTime() string {
	if m != nil {
		return m.GameTime
	}
	return ""
}

func (m *DTGPKGameResult) GetClientType() string {
	if m != nil {
		return m.ClientType
	}
	return ""
}

func (m *DTGPKGameResult) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *DTGPKGameResult) GetIsComplete() bool {
	if m != nil {
		return m.IsComplete
	}
	return false
}

func (m *DTGPKGameResult) GetGiftFreeID() string {
	if m != nil {
		return m.GiftFreeID
	}
	return ""
}

func (m *DTGPKGameResult) GetGameData() string {
	if m != nil {
		return m.GameData
	}
	return ""
}

func (m *DTGPKGameResult) GetGameResult() string {
	if m != nil {
		return m.GameResult
	}
	return ""
}

func (m *DTGPKGameResult) GetHasSubGame() bool {
	if m != nil {
		return m.HasSubGame
	}
	return false
}

func (m *DTGPKGameResult) GetDtbaseid() string {
	if m != nil {
		return m.Dtbaseid
	}
	return ""
}

func (m *DTGPKGameResult) GetRootGame() bool {
	if m != nil {
		return m.RootGame
	}
	return false
}

func (m *DTGPKGameResult) GetChildren() []*DTGPKGameResult {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *DTGPKGameResult) GetErr() *DTGameResultErr {
	if m != nil {
		return m.Err
	}
	return nil
}

// DTGPKCheckGameResult -
type DTGPKCheckGameResult struct {
	Lst                  []*DTGPKGameResult `protobuf:"bytes,1,rep,name=lst,proto3" json:"lst,omitempty"`
	ErrNums              int32              `protobuf:"varint,10,opt,name=errNums,proto3" json:"errNums,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *DTGPKCheckGameResult) Reset()         { *m = DTGPKCheckGameResult{} }
func (m *DTGPKCheckGameResult) String() string { return proto.CompactTextString(m) }
func (*DTGPKCheckGameResult) ProtoMessage()    {}
func (*DTGPKCheckGameResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{28}
}
func (m *DTGPKCheckGameResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DTGPKCheckGameResult.Unmarshal(m, b)
}
func (m *DTGPKCheckGameResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DTGPKCheckGameResult.Marshal(b, m, deterministic)
}
func (dst *DTGPKCheckGameResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DTGPKCheckGameResult.Merge(dst, src)
}
func (m *DTGPKCheckGameResult) XXX_Size() int {
	return xxx_messageInfo_DTGPKCheckGameResult.Size(m)
}
func (m *DTGPKCheckGameResult) XXX_DiscardUnknown() {
	xxx_messageInfo_DTGPKCheckGameResult.DiscardUnknown(m)
}

var xxx_messageInfo_DTGPKCheckGameResult proto.InternalMessageInfo

func (m *DTGPKCheckGameResult) GetLst() []*DTGPKGameResult {
	if m != nil {
		return m.Lst
	}
	return nil
}

func (m *DTGPKCheckGameResult) GetErrNums() int32 {
	if m != nil {
		return m.ErrNums
	}
	return 0
}

// ReplyDTData - reply DT Data
type ReplyDTData struct {
	// gameReport
	GameReports []*DTBusinessGameReport `protobuf:"bytes,1,rep,name=gameReports,proto3" json:"gameReports,omitempty"`
	// todayGameData
	TodayGameData *DTTodayGameData `protobuf:"bytes,2,opt,name=todayGameData,proto3" json:"todayGameData,omitempty"`
	// checkGameResultGPK
	CheckGameResultGPK   *DTGPKCheckGameResult `protobuf:"bytes,3,opt,name=checkGameResultGPK,proto3" json:"checkGameResultGPK,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ReplyDTData) Reset()         { *m = ReplyDTData{} }
func (m *ReplyDTData) String() string { return proto.CompactTextString(m) }
func (*ReplyDTData) ProtoMessage()    {}
func (*ReplyDTData) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{29}
}
func (m *ReplyDTData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplyDTData.Unmarshal(m, b)
}
func (m *ReplyDTData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplyDTData.Marshal(b, m, deterministic)
}
func (dst *ReplyDTData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyDTData.Merge(dst, src)
}
func (m *ReplyDTData) XXX_Size() int {
	return xxx_messageInfo_ReplyDTData.Size(m)
}
func (m *ReplyDTData) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyDTData.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyDTData proto.InternalMessageInfo

func (m *ReplyDTData) GetGameReports() []*DTBusinessGameReport {
	if m != nil {
		return m.GameReports
	}
	return nil
}

func (m *ReplyDTData) GetTodayGameData() *DTTodayGameData {
	if m != nil {
		return m.TodayGameData
	}
	return nil
}

func (m *ReplyDTData) GetCheckGameResultGPK() *DTGPKCheckGameResult {
	if m != nil {
		return m.CheckGameResultGPK
	}
	return nil
}

// RequestCrunchBaseCompany - request a company infomation in crunchbase
type RequestCrunchBaseCompany struct {
	Search               string   `protobuf:"bytes,1,opt,name=search,proto3" json:"search,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestCrunchBaseCompany) Reset()         { *m = RequestCrunchBaseCompany{} }
func (m *RequestCrunchBaseCompany) String() string { return proto.CompactTextString(m) }
func (*RequestCrunchBaseCompany) ProtoMessage()    {}
func (*RequestCrunchBaseCompany) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{30}
}
func (m *RequestCrunchBaseCompany) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestCrunchBaseCompany.Unmarshal(m, b)
}
func (m *RequestCrunchBaseCompany) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestCrunchBaseCompany.Marshal(b, m, deterministic)
}
func (dst *RequestCrunchBaseCompany) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestCrunchBaseCompany.Merge(dst, src)
}
func (m *RequestCrunchBaseCompany) XXX_Size() int {
	return xxx_messageInfo_RequestCrunchBaseCompany.Size(m)
}
func (m *RequestCrunchBaseCompany) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestCrunchBaseCompany.DiscardUnknown(m)
}

var xxx_messageInfo_RequestCrunchBaseCompany proto.InternalMessageInfo

func (m *RequestCrunchBaseCompany) GetSearch() string {
	if m != nil {
		return m.Search
	}
	return ""
}

// RequestTranslate2 - request translate
type RequestTranslate2 struct {
	// text - source text
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// platform - it's like google
	Platform string `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty"`
	// srcLang - source language
	SrcLang string `protobuf:"bytes,3,opt,name=srcLang,proto3" json:"srcLang,omitempty"`
	// destLang - destination language
	DestLang             string   `protobuf:"bytes,4,opt,name=destLang,proto3" json:"destLang,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestTranslate2) Reset()         { *m = RequestTranslate2{} }
func (m *RequestTranslate2) String() string { return proto.CompactTextString(m) }
func (*RequestTranslate2) ProtoMessage()    {}
func (*RequestTranslate2) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{31}
}
func (m *RequestTranslate2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestTranslate2.Unmarshal(m, b)
}
func (m *RequestTranslate2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestTranslate2.Marshal(b, m, deterministic)
}
func (dst *RequestTranslate2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestTranslate2.Merge(dst, src)
}
func (m *RequestTranslate2) XXX_Size() int {
	return xxx_messageInfo_RequestTranslate2.Size(m)
}
func (m *RequestTranslate2) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestTranslate2.DiscardUnknown(m)
}

var xxx_messageInfo_RequestTranslate2 proto.InternalMessageInfo

func (m *RequestTranslate2) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *RequestTranslate2) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *RequestTranslate2) GetSrcLang() string {
	if m != nil {
		return m.SrcLang
	}
	return ""
}

func (m *RequestTranslate2) GetDestLang() string {
	if m != nil {
		return m.DestLang
	}
	return ""
}

// TranslateResult - reply translate
type TranslateResult struct {
	// text - destination text
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TranslateResult) Reset()         { *m = TranslateResult{} }
func (m *TranslateResult) String() string { return proto.CompactTextString(m) }
func (*TranslateResult) ProtoMessage()    {}
func (*TranslateResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{32}
}
func (m *TranslateResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TranslateResult.Unmarshal(m, b)
}
func (m *TranslateResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TranslateResult.Marshal(b, m, deterministic)
}
func (dst *TranslateResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TranslateResult.Merge(dst, src)
}
func (m *TranslateResult) XXX_Size() int {
	return xxx_messageInfo_TranslateResult.Size(m)
}
func (m *TranslateResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TranslateResult.DiscardUnknown(m)
}

var xxx_messageInfo_TranslateResult proto.InternalMessageInfo

func (m *TranslateResult) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

// AnalyzePage - analyze page
type AnalyzePage struct {
	// url - url
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// delay = delay in seconds
	Delay int32 `protobuf:"varint,2,opt,name=delay,proto3" json:"delay,omitempty"`
	// viewportWidth -
	ViewportWidth int32 `protobuf:"varint,3,opt,name=viewportWidth,proto3" json:"viewportWidth,omitempty"`
	// viewportHeight -
	ViewportHeight int32 `protobuf:"varint,4,opt,name=viewportHeight,proto3" json:"viewportHeight,omitempty"`
	// deviceScaleFactor -
	DeviceScaleFactor float32 `protobuf:"fixed32,5,opt,name=deviceScaleFactor,proto3" json:"deviceScaleFactor,omitempty"`
	// isMobile -
	IsMobile bool `protobuf:"varint,6,opt,name=isMobile,proto3" json:"isMobile,omitempty"`
	// isLandscape -
	IsLandscape bool `protobuf:"varint,7,opt,name=isLandscape,proto3" json:"isLandscape,omitempty"`
	// needScreenshots -
	NeedScreenshots bool `protobuf:"varint,8,opt,name=needScreenshots,proto3" json:"needScreenshots,omitempty"`
	// needLogs -
	NeedLogs bool `protobuf:"varint,9,opt,name=needLogs,proto3" json:"needLogs,omitempty"`
	// timeout - timeout in secend
	Timeout              int32    `protobuf:"varint,10,opt,name=timeout,proto3" json:"timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnalyzePage) Reset()         { *m = AnalyzePage{} }
func (m *AnalyzePage) String() string { return proto.CompactTextString(m) }
func (*AnalyzePage) ProtoMessage()    {}
func (*AnalyzePage) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{33}
}
func (m *AnalyzePage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnalyzePage.Unmarshal(m, b)
}
func (m *AnalyzePage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnalyzePage.Marshal(b, m, deterministic)
}
func (dst *AnalyzePage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalyzePage.Merge(dst, src)
}
func (m *AnalyzePage) XXX_Size() int {
	return xxx_messageInfo_AnalyzePage.Size(m)
}
func (m *AnalyzePage) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalyzePage.DiscardUnknown(m)
}

var xxx_messageInfo_AnalyzePage proto.InternalMessageInfo

func (m *AnalyzePage) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *AnalyzePage) GetDelay() int32 {
	if m != nil {
		return m.Delay
	}
	return 0
}

func (m *AnalyzePage) GetViewportWidth() int32 {
	if m != nil {
		return m.ViewportWidth
	}
	return 0
}

func (m *AnalyzePage) GetViewportHeight() int32 {
	if m != nil {
		return m.ViewportHeight
	}
	return 0
}

func (m *AnalyzePage) GetDeviceScaleFactor() float32 {
	if m != nil {
		return m.DeviceScaleFactor
	}
	return 0
}

func (m *AnalyzePage) GetIsMobile() bool {
	if m != nil {
		return m.IsMobile
	}
	return false
}

func (m *AnalyzePage) GetIsLandscape() bool {
	if m != nil {
		return m.IsLandscape
	}
	return false
}

func (m *AnalyzePage) GetNeedScreenshots() bool {
	if m != nil {
		return m.NeedScreenshots
	}
	return false
}

func (m *AnalyzePage) GetNeedLogs() bool {
	if m != nil {
		return m.NeedLogs
	}
	return false
}

func (m *AnalyzePage) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

// AnalyzeScreenshot - screenshot
type AnalyzeScreenshot struct {
	// name - name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// type - type
	Type AnalyzeScreenshotType `protobuf:"varint,2,opt,name=type,proto3,enum=jarviscrawlercore.AnalyzeScreenshotType" json:"type,omitempty"`
	// buf - buffer
	Buf                  []byte   `protobuf:"bytes,3,opt,name=buf,proto3" json:"buf,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnalyzeScreenshot) Reset()         { *m = AnalyzeScreenshot{} }
func (m *AnalyzeScreenshot) String() string { return proto.CompactTextString(m) }
func (*AnalyzeScreenshot) ProtoMessage()    {}
func (*AnalyzeScreenshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{34}
}
func (m *AnalyzeScreenshot) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnalyzeScreenshot.Unmarshal(m, b)
}
func (m *AnalyzeScreenshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnalyzeScreenshot.Marshal(b, m, deterministic)
}
func (dst *AnalyzeScreenshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalyzeScreenshot.Merge(dst, src)
}
func (m *AnalyzeScreenshot) XXX_Size() int {
	return xxx_messageInfo_AnalyzeScreenshot.Size(m)
}
func (m *AnalyzeScreenshot) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalyzeScreenshot.DiscardUnknown(m)
}

var xxx_messageInfo_AnalyzeScreenshot proto.InternalMessageInfo

func (m *AnalyzeScreenshot) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AnalyzeScreenshot) GetType() AnalyzeScreenshotType {
	if m != nil {
		return m.Type
	}
	return AnalyzeScreenshotType_AST_JPG
}

func (m *AnalyzeScreenshot) GetBuf() []byte {
	if m != nil {
		return m.Buf
	}
	return nil
}

// AnalyzeImage - analyze request infomation
type AnalyzeReqInfo struct {
	// url - url
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// downloadTime - download time
	DownloadTime int32 `protobuf:"varint,2,opt,name=downloadTime,proto3" json:"downloadTime,omitempty"`
	// bufBytes - buffer bytes
	BufBytes int32 `protobuf:"varint,3,opt,name=bufBytes,proto3" json:"bufBytes,omitempty"`
	// status - http status
	Status int32 `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	// startTime - start time
	StartTime int64 `protobuf:"varint,5,opt,name=startTime,proto3" json:"startTime,omitempty"`
	// isGZip - is gzip
	IsGZip bool `protobuf:"varint,6,opt,name=isGZip,proto3" json:"isGZip,omitempty"`
	// contentType - Content-Type
	ContentType string `protobuf:"bytes,7,opt,name=contentType,proto3" json:"contentType,omitempty"`
	// ipaddr - ip address, it's like 127.0.0.1;192.168.0.1;
	Ipaddr string `protobuf:"bytes,8,opt,name=ipaddr,proto3" json:"ipaddr,omitempty"`
	// remoteaddr - remote address, it's like 127.0.0.1:443
	Remoteaddr string `protobuf:"bytes,9,opt,name=remoteaddr,proto3" json:"remoteaddr,omitempty"`
	// imgWidth -
	ImgWidth int32 `protobuf:"varint,100,opt,name=imgWidth,proto3" json:"imgWidth,omitempty"`
	// imgHeight -
	ImgHeight            int32    `protobuf:"varint,101,opt,name=imgHeight,proto3" json:"imgHeight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnalyzeReqInfo) Reset()         { *m = AnalyzeReqInfo{} }
func (m *AnalyzeReqInfo) String() string { return proto.CompactTextString(m) }
func (*AnalyzeReqInfo) ProtoMessage()    {}
func (*AnalyzeReqInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{35}
}
func (m *AnalyzeReqInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnalyzeReqInfo.Unmarshal(m, b)
}
func (m *AnalyzeReqInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnalyzeReqInfo.Marshal(b, m, deterministic)
}
func (dst *AnalyzeReqInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalyzeReqInfo.Merge(dst, src)
}
func (m *AnalyzeReqInfo) XXX_Size() int {
	return xxx_messageInfo_AnalyzeReqInfo.Size(m)
}
func (m *AnalyzeReqInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalyzeReqInfo.DiscardUnknown(m)
}

var xxx_messageInfo_AnalyzeReqInfo proto.InternalMessageInfo

func (m *AnalyzeReqInfo) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *AnalyzeReqInfo) GetDownloadTime() int32 {
	if m != nil {
		return m.DownloadTime
	}
	return 0
}

func (m *AnalyzeReqInfo) GetBufBytes() int32 {
	if m != nil {
		return m.BufBytes
	}
	return 0
}

func (m *AnalyzeReqInfo) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *AnalyzeReqInfo) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *AnalyzeReqInfo) GetIsGZip() bool {
	if m != nil {
		return m.IsGZip
	}
	return false
}

func (m *AnalyzeReqInfo) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *AnalyzeReqInfo) GetIpaddr() string {
	if m != nil {
		return m.Ipaddr
	}
	return ""
}

func (m *AnalyzeReqInfo) GetRemoteaddr() string {
	if m != nil {
		return m.Remoteaddr
	}
	return ""
}

func (m *AnalyzeReqInfo) GetImgWidth() int32 {
	if m != nil {
		return m.ImgWidth
	}
	return 0
}

func (m *AnalyzeReqInfo) GetImgHeight() int32 {
	if m != nil {
		return m.ImgHeight
	}
	return 0
}

// ReplyAnalyzePage - reply analyze page
type ReplyAnalyzePage struct {
	// pageTime - page time
	PageTime int32 `protobuf:"varint,1,opt,name=pageTime,proto3" json:"pageTime,omitempty"`
	// pageBytes - page bytes
	PageBytes int32 `protobuf:"varint,2,opt,name=pageBytes,proto3" json:"pageBytes,omitempty"`
	// errs - error list
	Errs []string `protobuf:"bytes,100,rep,name=errs,proto3" json:"errs,omitempty"`
	// reqs - request list
	Reqs []*AnalyzeReqInfo `protobuf:"bytes,101,rep,name=reqs,proto3" json:"reqs,omitempty"`
	// screenshots - screenshot list
	Screenshots []*AnalyzeScreenshot `protobuf:"bytes,102,rep,name=screenshots,proto3" json:"screenshots,omitempty"`
	// logs - console.log list
	Logs                 []string `protobuf:"bytes,103,rep,name=logs,proto3" json:"logs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyAnalyzePage) Reset()         { *m = ReplyAnalyzePage{} }
func (m *ReplyAnalyzePage) String() string { return proto.CompactTextString(m) }
func (*ReplyAnalyzePage) ProtoMessage()    {}
func (*ReplyAnalyzePage) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{36}
}
func (m *ReplyAnalyzePage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplyAnalyzePage.Unmarshal(m, b)
}
func (m *ReplyAnalyzePage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplyAnalyzePage.Marshal(b, m, deterministic)
}
func (dst *ReplyAnalyzePage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyAnalyzePage.Merge(dst, src)
}
func (m *ReplyAnalyzePage) XXX_Size() int {
	return xxx_messageInfo_ReplyAnalyzePage.Size(m)
}
func (m *ReplyAnalyzePage) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyAnalyzePage.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyAnalyzePage proto.InternalMessageInfo

func (m *ReplyAnalyzePage) GetPageTime() int32 {
	if m != nil {
		return m.PageTime
	}
	return 0
}

func (m *ReplyAnalyzePage) GetPageBytes() int32 {
	if m != nil {
		return m.PageBytes
	}
	return 0
}

func (m *ReplyAnalyzePage) GetErrs() []string {
	if m != nil {
		return m.Errs
	}
	return nil
}

func (m *ReplyAnalyzePage) GetReqs() []*AnalyzeReqInfo {
	if m != nil {
		return m.Reqs
	}
	return nil
}

func (m *ReplyAnalyzePage) GetScreenshots() []*AnalyzeScreenshot {
	if m != nil {
		return m.Screenshots
	}
	return nil
}

func (m *ReplyAnalyzePage) GetLogs() []string {
	if m != nil {
		return m.Logs
	}
	return nil
}

// RequestGeoIP - request geoip
type RequestGeoIP struct {
	// ip - ip address
	Ip string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	// platform - it's like ipvoid, default is ipvoid
	Platform             string   `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestGeoIP) Reset()         { *m = RequestGeoIP{} }
func (m *RequestGeoIP) String() string { return proto.CompactTextString(m) }
func (*RequestGeoIP) ProtoMessage()    {}
func (*RequestGeoIP) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{37}
}
func (m *RequestGeoIP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestGeoIP.Unmarshal(m, b)
}
func (m *RequestGeoIP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestGeoIP.Marshal(b, m, deterministic)
}
func (dst *RequestGeoIP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestGeoIP.Merge(dst, src)
}
func (m *RequestGeoIP) XXX_Size() int {
	return xxx_messageInfo_RequestGeoIP.Size(m)
}
func (m *RequestGeoIP) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestGeoIP.DiscardUnknown(m)
}

var xxx_messageInfo_RequestGeoIP proto.InternalMessageInfo

func (m *RequestGeoIP) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *RequestGeoIP) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

// ReplyGeoIP - reply geoip
type ReplyGeoIP struct {
	Latitude             float32  `protobuf:"fixed32,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude            float32  `protobuf:"fixed32,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Organization         string   `protobuf:"bytes,3,opt,name=organization,proto3" json:"organization,omitempty"`
	Asn                  string   `protobuf:"bytes,4,opt,name=asn,proto3" json:"asn,omitempty"`
	Continent            string   `protobuf:"bytes,5,opt,name=continent,proto3" json:"continent,omitempty"`
	Country              string   `protobuf:"bytes,6,opt,name=country,proto3" json:"country,omitempty"`
	Region               string   `protobuf:"bytes,7,opt,name=region,proto3" json:"region,omitempty"`
	City                 string   `protobuf:"bytes,8,opt,name=city,proto3" json:"city,omitempty"`
	Hostname             string   `protobuf:"bytes,9,opt,name=hostname,proto3" json:"hostname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReplyGeoIP) Reset()         { *m = ReplyGeoIP{} }
func (m *ReplyGeoIP) String() string { return proto.CompactTextString(m) }
func (*ReplyGeoIP) ProtoMessage()    {}
func (*ReplyGeoIP) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{38}
}
func (m *ReplyGeoIP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplyGeoIP.Unmarshal(m, b)
}
func (m *ReplyGeoIP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplyGeoIP.Marshal(b, m, deterministic)
}
func (dst *ReplyGeoIP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyGeoIP.Merge(dst, src)
}
func (m *ReplyGeoIP) XXX_Size() int {
	return xxx_messageInfo_ReplyGeoIP.Size(m)
}
func (m *ReplyGeoIP) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyGeoIP.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyGeoIP proto.InternalMessageInfo

func (m *ReplyGeoIP) GetLatitude() float32 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *ReplyGeoIP) GetLongitude() float32 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *ReplyGeoIP) GetOrganization() string {
	if m != nil {
		return m.Organization
	}
	return ""
}

func (m *ReplyGeoIP) GetAsn() string {
	if m != nil {
		return m.Asn
	}
	return ""
}

func (m *ReplyGeoIP) GetContinent() string {
	if m != nil {
		return m.Continent
	}
	return ""
}

func (m *ReplyGeoIP) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *ReplyGeoIP) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *ReplyGeoIP) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *ReplyGeoIP) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

// TechInAsiaCompany - TechInAsia Company
type TechInAsiaCompany struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Avatar               string   `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Location             []string `protobuf:"bytes,3,rep,name=location,proto3" json:"location,omitempty"`
	Categories           []string `protobuf:"bytes,4,rep,name=categories,proto3" json:"categories,omitempty"`
	Employees            int32    `protobuf:"varint,5,opt,name=employees,proto3" json:"employees,omitempty"`
	Introduction         string   `protobuf:"bytes,6,opt,name=introduction,proto3" json:"introduction,omitempty"`
	Links                []string `protobuf:"bytes,7,rep,name=links,proto3" json:"links,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TechInAsiaCompany) Reset()         { *m = TechInAsiaCompany{} }
func (m *TechInAsiaCompany) String() string { return proto.CompactTextString(m) }
func (*TechInAsiaCompany) ProtoMessage()    {}
func (*TechInAsiaCompany) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{39}
}
func (m *TechInAsiaCompany) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TechInAsiaCompany.Unmarshal(m, b)
}
func (m *TechInAsiaCompany) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TechInAsiaCompany.Marshal(b, m, deterministic)
}
func (dst *TechInAsiaCompany) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TechInAsiaCompany.Merge(dst, src)
}
func (m *TechInAsiaCompany) XXX_Size() int {
	return xxx_messageInfo_TechInAsiaCompany.Size(m)
}
func (m *TechInAsiaCompany) XXX_DiscardUnknown() {
	xxx_messageInfo_TechInAsiaCompany.DiscardUnknown(m)
}

var xxx_messageInfo_TechInAsiaCompany proto.InternalMessageInfo

func (m *TechInAsiaCompany) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TechInAsiaCompany) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *TechInAsiaCompany) GetLocation() []string {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *TechInAsiaCompany) GetCategories() []string {
	if m != nil {
		return m.Categories
	}
	return nil
}

func (m *TechInAsiaCompany) GetEmployees() int32 {
	if m != nil {
		return m.Employees
	}
	return 0
}

func (m *TechInAsiaCompany) GetIntroduction() string {
	if m != nil {
		return m.Introduction
	}
	return ""
}

func (m *TechInAsiaCompany) GetLinks() []string {
	if m != nil {
		return m.Links
	}
	return nil
}

// TechInAsiaJob - TechInAsia Job
type TechInAsiaJob struct {
	CompanyName          string   `protobuf:"bytes,1,opt,name=companyName,proto3" json:"companyName,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Location             []string `protobuf:"bytes,3,rep,name=location,proto3" json:"location,omitempty"`
	MinSalary            int32    `protobuf:"varint,4,opt,name=minSalary,proto3" json:"minSalary,omitempty"`
	MaxSalary            int32    `protobuf:"varint,5,opt,name=maxSalary,proto3" json:"maxSalary,omitempty"`
	Currency             string   `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`
	CreateTime           int64    `protobuf:"varint,7,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime           int64    `protobuf:"varint,8,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	JobFunction          string   `protobuf:"bytes,9,opt,name=jobFunction,proto3" json:"jobFunction,omitempty"`
	JobType              string   `protobuf:"bytes,10,opt,name=jobType,proto3" json:"jobType,omitempty"`
	Experience           string   `protobuf:"bytes,11,opt,name=experience,proto3" json:"experience,omitempty"`
	Vacancies            int32    `protobuf:"varint,12,opt,name=vacancies,proto3" json:"vacancies,omitempty"`
	Description          string   `protobuf:"bytes,13,opt,name=description,proto3" json:"description,omitempty"`
	RequiredSkills       []string `protobuf:"bytes,14,rep,name=requiredSkills,proto3" json:"requiredSkills,omitempty"`
	Culture              string   `protobuf:"bytes,15,opt,name=culture,proto3" json:"culture,omitempty"`
	CompanyCode          string   `protobuf:"bytes,16,opt,name=companyCode,proto3" json:"companyCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TechInAsiaJob) Reset()         { *m = TechInAsiaJob{} }
func (m *TechInAsiaJob) String() string { return proto.CompactTextString(m) }
func (*TechInAsiaJob) ProtoMessage()    {}
func (*TechInAsiaJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{40}
}
func (m *TechInAsiaJob) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TechInAsiaJob.Unmarshal(m, b)
}
func (m *TechInAsiaJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TechInAsiaJob.Marshal(b, m, deterministic)
}
func (dst *TechInAsiaJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TechInAsiaJob.Merge(dst, src)
}
func (m *TechInAsiaJob) XXX_Size() int {
	return xxx_messageInfo_TechInAsiaJob.Size(m)
}
func (m *TechInAsiaJob) XXX_DiscardUnknown() {
	xxx_messageInfo_TechInAsiaJob.DiscardUnknown(m)
}

var xxx_messageInfo_TechInAsiaJob proto.InternalMessageInfo

func (m *TechInAsiaJob) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *TechInAsiaJob) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *TechInAsiaJob) GetLocation() []string {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *TechInAsiaJob) GetMinSalary() int32 {
	if m != nil {
		return m.MinSalary
	}
	return 0
}

func (m *TechInAsiaJob) GetMaxSalary() int32 {
	if m != nil {
		return m.MaxSalary
	}
	return 0
}

func (m *TechInAsiaJob) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *TechInAsiaJob) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *TechInAsiaJob) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *TechInAsiaJob) GetJobFunction() string {
	if m != nil {
		return m.JobFunction
	}
	return ""
}

func (m *TechInAsiaJob) GetJobType() string {
	if m != nil {
		return m.JobType
	}
	return ""
}

func (m *TechInAsiaJob) GetExperience() string {
	if m != nil {
		return m.Experience
	}
	return ""
}

func (m *TechInAsiaJob) GetVacancies() int32 {
	if m != nil {
		return m.Vacancies
	}
	return 0
}

func (m *TechInAsiaJob) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TechInAsiaJob) GetRequiredSkills() []string {
	if m != nil {
		return m.RequiredSkills
	}
	return nil
}

func (m *TechInAsiaJob) GetCulture() string {
	if m != nil {
		return m.Culture
	}
	return ""
}

func (m *TechInAsiaJob) GetCompanyCode() string {
	if m != nil {
		return m.CompanyCode
	}
	return ""
}

// RequestTechInAsia - request techinasia
type RequestTechInAsia struct {
	Mode                 TechInAsiaMode `protobuf:"varint,1,opt,name=mode,proto3,enum=jarviscrawlercore.TechInAsiaMode" json:"mode,omitempty"`
	CompanyCode          string         `protobuf:"bytes,2,opt,name=companyCode,proto3" json:"companyCode,omitempty"`
	JobCode              string         `protobuf:"bytes,3,opt,name=jobCode,proto3" json:"jobCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RequestTechInAsia) Reset()         { *m = RequestTechInAsia{} }
func (m *RequestTechInAsia) String() string { return proto.CompactTextString(m) }
func (*RequestTechInAsia) ProtoMessage()    {}
func (*RequestTechInAsia) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{41}
}
func (m *RequestTechInAsia) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestTechInAsia.Unmarshal(m, b)
}
func (m *RequestTechInAsia) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestTechInAsia.Marshal(b, m, deterministic)
}
func (dst *RequestTechInAsia) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestTechInAsia.Merge(dst, src)
}
func (m *RequestTechInAsia) XXX_Size() int {
	return xxx_messageInfo_RequestTechInAsia.Size(m)
}
func (m *RequestTechInAsia) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestTechInAsia.DiscardUnknown(m)
}

var xxx_messageInfo_RequestTechInAsia proto.InternalMessageInfo

func (m *RequestTechInAsia) GetMode() TechInAsiaMode {
	if m != nil {
		return m.Mode
	}
	return TechInAsiaMode_TIAM_COMPANY
}

func (m *RequestTechInAsia) GetCompanyCode() string {
	if m != nil {
		return m.CompanyCode
	}
	return ""
}

func (m *RequestTechInAsia) GetJobCode() string {
	if m != nil {
		return m.JobCode
	}
	return ""
}

// ReplyTechInAsia - reply techinasia
type ReplyTechInAsia struct {
	Mode TechInAsiaMode `protobuf:"varint,1,opt,name=mode,proto3,enum=jarviscrawlercore.TechInAsiaMode" json:"mode,omitempty"`
	// Types that are valid to be assigned to Reply:
	//	*ReplyTechInAsia_Company
	//	*ReplyTechInAsia_Job
	Reply                isReplyTechInAsia_Reply `protobuf_oneof:"reply"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ReplyTechInAsia) Reset()         { *m = ReplyTechInAsia{} }
func (m *ReplyTechInAsia) String() string { return proto.CompactTextString(m) }
func (*ReplyTechInAsia) ProtoMessage()    {}
func (*ReplyTechInAsia) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{42}
}
func (m *ReplyTechInAsia) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplyTechInAsia.Unmarshal(m, b)
}
func (m *ReplyTechInAsia) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplyTechInAsia.Marshal(b, m, deterministic)
}
func (dst *ReplyTechInAsia) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyTechInAsia.Merge(dst, src)
}
func (m *ReplyTechInAsia) XXX_Size() int {
	return xxx_messageInfo_ReplyTechInAsia.Size(m)
}
func (m *ReplyTechInAsia) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyTechInAsia.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyTechInAsia proto.InternalMessageInfo

type isReplyTechInAsia_Reply interface {
	isReplyTechInAsia_Reply()
}

type ReplyTechInAsia_Company struct {
	Company *TechInAsiaCompany `protobuf:"bytes,100,opt,name=company,proto3,oneof"`
}
type ReplyTechInAsia_Job struct {
	Job *TechInAsiaJob `protobuf:"bytes,101,opt,name=job,proto3,oneof"`
}

func (*ReplyTechInAsia_Company) isReplyTechInAsia_Reply() {}
func (*ReplyTechInAsia_Job) isReplyTechInAsia_Reply()     {}

func (m *ReplyTechInAsia) GetReply() isReplyTechInAsia_Reply {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *ReplyTechInAsia) GetMode() TechInAsiaMode {
	if m != nil {
		return m.Mode
	}
	return TechInAsiaMode_TIAM_COMPANY
}

func (m *ReplyTechInAsia) GetCompany() *TechInAsiaCompany {
	if x, ok := m.GetReply().(*ReplyTechInAsia_Company); ok {
		return x.Company
	}
	return nil
}

func (m *ReplyTechInAsia) GetJob() *TechInAsiaJob {
	if x, ok := m.GetReply().(*ReplyTechInAsia_Job); ok {
		return x.Job
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ReplyTechInAsia) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ReplyTechInAsia_OneofMarshaler, _ReplyTechInAsia_OneofUnmarshaler, _ReplyTechInAsia_OneofSizer, []interface{}{
		(*ReplyTechInAsia_Company)(nil),
		(*ReplyTechInAsia_Job)(nil),
	}
}

func _ReplyTechInAsia_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ReplyTechInAsia)
	// reply
	switch x := m.Reply.(type) {
	case *ReplyTechInAsia_Company:
		b.EncodeVarint(100<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Company); err != nil {
			return err
		}
	case *ReplyTechInAsia_Job:
		b.EncodeVarint(101<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Job); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplyTechInAsia.Reply has unexpected type %T", x)
	}
	return nil
}

func _ReplyTechInAsia_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ReplyTechInAsia)
	switch tag {
	case 100: // reply.company
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TechInAsiaCompany)
		err := b.DecodeMessage(msg)
		m.Reply = &ReplyTechInAsia_Company{msg}
		return true, err
	case 101: // reply.job
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TechInAsiaJob)
		err := b.DecodeMessage(msg)
		m.Reply = &ReplyTechInAsia_Job{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ReplyTechInAsia_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ReplyTechInAsia)
	// reply
	switch x := m.Reply.(type) {
	case *ReplyTechInAsia_Company:
		s := proto.Size(x.Company)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplyTechInAsia_Job:
		s := proto.Size(x.Job)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// RequestCrawler - request crawler
type RequestCrawler struct {
	Token       string      `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	CrawlerType CrawlerType `protobuf:"varint,2,opt,name=crawlerType,proto3,enum=jarviscrawlercore.CrawlerType" json:"crawlerType,omitempty"`
	// Types that are valid to be assigned to CrawlerParam:
	//	*RequestCrawler_CbCompany
	//	*RequestCrawler_Translate2
	//	*RequestCrawler_Dtdata
	//	*RequestCrawler_AnalyzePage
	//	*RequestCrawler_Geoip
	//	*RequestCrawler_Techinasia
	CrawlerParam         isRequestCrawler_CrawlerParam `protobuf_oneof:"crawlerParam"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *RequestCrawler) Reset()         { *m = RequestCrawler{} }
func (m *RequestCrawler) String() string { return proto.CompactTextString(m) }
func (*RequestCrawler) ProtoMessage()    {}
func (*RequestCrawler) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{43}
}
func (m *RequestCrawler) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestCrawler.Unmarshal(m, b)
}
func (m *RequestCrawler) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestCrawler.Marshal(b, m, deterministic)
}
func (dst *RequestCrawler) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestCrawler.Merge(dst, src)
}
func (m *RequestCrawler) XXX_Size() int {
	return xxx_messageInfo_RequestCrawler.Size(m)
}
func (m *RequestCrawler) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestCrawler.DiscardUnknown(m)
}

var xxx_messageInfo_RequestCrawler proto.InternalMessageInfo

type isRequestCrawler_CrawlerParam interface {
	isRequestCrawler_CrawlerParam()
}

type RequestCrawler_CbCompany struct {
	CbCompany *RequestCrunchBaseCompany `protobuf:"bytes,100,opt,name=cbCompany,proto3,oneof"`
}
type RequestCrawler_Translate2 struct {
	Translate2 *RequestTranslate2 `protobuf:"bytes,101,opt,name=translate2,proto3,oneof"`
}
type RequestCrawler_Dtdata struct {
	Dtdata *RequestDTData `protobuf:"bytes,102,opt,name=dtdata,proto3,oneof"`
}
type RequestCrawler_AnalyzePage struct {
	AnalyzePage *AnalyzePage `protobuf:"bytes,103,opt,name=analyzePage,proto3,oneof"`
}
type RequestCrawler_Geoip struct {
	Geoip *RequestGeoIP `protobuf:"bytes,105,opt,name=geoip,proto3,oneof"`
}
type RequestCrawler_Techinasia struct {
	Techinasia *RequestTechInAsia `protobuf:"bytes,106,opt,name=techinasia,proto3,oneof"`
}

func (*RequestCrawler_CbCompany) isRequestCrawler_CrawlerParam()   {}
func (*RequestCrawler_Translate2) isRequestCrawler_CrawlerParam()  {}
func (*RequestCrawler_Dtdata) isRequestCrawler_CrawlerParam()      {}
func (*RequestCrawler_AnalyzePage) isRequestCrawler_CrawlerParam() {}
func (*RequestCrawler_Geoip) isRequestCrawler_CrawlerParam()       {}
func (*RequestCrawler_Techinasia) isRequestCrawler_CrawlerParam()  {}

func (m *RequestCrawler) GetCrawlerParam() isRequestCrawler_CrawlerParam {
	if m != nil {
		return m.CrawlerParam
	}
	return nil
}

func (m *RequestCrawler) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *RequestCrawler) GetCrawlerType() CrawlerType {
	if m != nil {
		return m.CrawlerType
	}
	return CrawlerType_CT_TRANSLATE2
}

func (m *RequestCrawler) GetCbCompany() *RequestCrunchBaseCompany {
	if x, ok := m.GetCrawlerParam().(*RequestCrawler_CbCompany); ok {
		return x.CbCompany
	}
	return nil
}

func (m *RequestCrawler) GetTranslate2() *RequestTranslate2 {
	if x, ok := m.GetCrawlerParam().(*RequestCrawler_Translate2); ok {
		return x.Translate2
	}
	return nil
}

func (m *RequestCrawler) GetDtdata() *RequestDTData {
	if x, ok := m.GetCrawlerParam().(*RequestCrawler_Dtdata); ok {
		return x.Dtdata
	}
	return nil
}

func (m *RequestCrawler) GetAnalyzePage() *AnalyzePage {
	if x, ok := m.GetCrawlerParam().(*RequestCrawler_AnalyzePage); ok {
		return x.AnalyzePage
	}
	return nil
}

func (m *RequestCrawler) GetGeoip() *RequestGeoIP {
	if x, ok := m.GetCrawlerParam().(*RequestCrawler_Geoip); ok {
		return x.Geoip
	}
	return nil
}

func (m *RequestCrawler) GetTechinasia() *RequestTechInAsia {
	if x, ok := m.GetCrawlerParam().(*RequestCrawler_Techinasia); ok {
		return x.Techinasia
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RequestCrawler) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RequestCrawler_OneofMarshaler, _RequestCrawler_OneofUnmarshaler, _RequestCrawler_OneofSizer, []interface{}{
		(*RequestCrawler_CbCompany)(nil),
		(*RequestCrawler_Translate2)(nil),
		(*RequestCrawler_Dtdata)(nil),
		(*RequestCrawler_AnalyzePage)(nil),
		(*RequestCrawler_Geoip)(nil),
		(*RequestCrawler_Techinasia)(nil),
	}
}

func _RequestCrawler_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RequestCrawler)
	// crawlerParam
	switch x := m.CrawlerParam.(type) {
	case *RequestCrawler_CbCompany:
		b.EncodeVarint(100<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CbCompany); err != nil {
			return err
		}
	case *RequestCrawler_Translate2:
		b.EncodeVarint(101<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Translate2); err != nil {
			return err
		}
	case *RequestCrawler_Dtdata:
		b.EncodeVarint(102<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Dtdata); err != nil {
			return err
		}
	case *RequestCrawler_AnalyzePage:
		b.EncodeVarint(103<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AnalyzePage); err != nil {
			return err
		}
	case *RequestCrawler_Geoip:
		b.EncodeVarint(105<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Geoip); err != nil {
			return err
		}
	case *RequestCrawler_Techinasia:
		b.EncodeVarint(106<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Techinasia); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RequestCrawler.CrawlerParam has unexpected type %T", x)
	}
	return nil
}

func _RequestCrawler_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RequestCrawler)
	switch tag {
	case 100: // crawlerParam.cbCompany
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestCrunchBaseCompany)
		err := b.DecodeMessage(msg)
		m.CrawlerParam = &RequestCrawler_CbCompany{msg}
		return true, err
	case 101: // crawlerParam.translate2
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestTranslate2)
		err := b.DecodeMessage(msg)
		m.CrawlerParam = &RequestCrawler_Translate2{msg}
		return true, err
	case 102: // crawlerParam.dtdata
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestDTData)
		err := b.DecodeMessage(msg)
		m.CrawlerParam = &RequestCrawler_Dtdata{msg}
		return true, err
	case 103: // crawlerParam.analyzePage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AnalyzePage)
		err := b.DecodeMessage(msg)
		m.CrawlerParam = &RequestCrawler_AnalyzePage{msg}
		return true, err
	case 105: // crawlerParam.geoip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestGeoIP)
		err := b.DecodeMessage(msg)
		m.CrawlerParam = &RequestCrawler_Geoip{msg}
		return true, err
	case 106: // crawlerParam.techinasia
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RequestTechInAsia)
		err := b.DecodeMessage(msg)
		m.CrawlerParam = &RequestCrawler_Techinasia{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RequestCrawler_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RequestCrawler)
	// crawlerParam
	switch x := m.CrawlerParam.(type) {
	case *RequestCrawler_CbCompany:
		s := proto.Size(x.CbCompany)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RequestCrawler_Translate2:
		s := proto.Size(x.Translate2)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RequestCrawler_Dtdata:
		s := proto.Size(x.Dtdata)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RequestCrawler_AnalyzePage:
		s := proto.Size(x.AnalyzePage)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RequestCrawler_Geoip:
		s := proto.Size(x.Geoip)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *RequestCrawler_Techinasia:
		s := proto.Size(x.Techinasia)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ReplyCrawler - reply crawler
type ReplyCrawler struct {
	CrawlerType CrawlerType `protobuf:"varint,1,opt,name=crawlerType,proto3,enum=jarviscrawlercore.CrawlerType" json:"crawlerType,omitempty"`
	// Types that are valid to be assigned to CrawlerResult:
	//	*ReplyCrawler_CbCompany
	//	*ReplyCrawler_TranslateResult
	//	*ReplyCrawler_Dtdata
	//	*ReplyCrawler_AnalyzePage
	//	*ReplyCrawler_Geoip
	//	*ReplyCrawler_Techinasia
	CrawlerResult        isReplyCrawler_CrawlerResult `protobuf_oneof:"crawlerResult"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ReplyCrawler) Reset()         { *m = ReplyCrawler{} }
func (m *ReplyCrawler) String() string { return proto.CompactTextString(m) }
func (*ReplyCrawler) ProtoMessage()    {}
func (*ReplyCrawler) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{44}
}
func (m *ReplyCrawler) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplyCrawler.Unmarshal(m, b)
}
func (m *ReplyCrawler) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplyCrawler.Marshal(b, m, deterministic)
}
func (dst *ReplyCrawler) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyCrawler.Merge(dst, src)
}
func (m *ReplyCrawler) XXX_Size() int {
	return xxx_messageInfo_ReplyCrawler.Size(m)
}
func (m *ReplyCrawler) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyCrawler.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyCrawler proto.InternalMessageInfo

type isReplyCrawler_CrawlerResult interface {
	isReplyCrawler_CrawlerResult()
}

type ReplyCrawler_CbCompany struct {
	CbCompany *CrunchBaseOrganization `protobuf:"bytes,100,opt,name=cbCompany,proto3,oneof"`
}
type ReplyCrawler_TranslateResult struct {
	TranslateResult *TranslateResult `protobuf:"bytes,101,opt,name=translateResult,proto3,oneof"`
}
type ReplyCrawler_Dtdata struct {
	Dtdata *ReplyDTData `protobuf:"bytes,102,opt,name=dtdata,proto3,oneof"`
}
type ReplyCrawler_AnalyzePage struct {
	AnalyzePage *ReplyAnalyzePage `protobuf:"bytes,103,opt,name=analyzePage,proto3,oneof"`
}
type ReplyCrawler_Geoip struct {
	Geoip *ReplyGeoIP `protobuf:"bytes,105,opt,name=geoip,proto3,oneof"`
}
type ReplyCrawler_Techinasia struct {
	Techinasia *ReplyTechInAsia `protobuf:"bytes,106,opt,name=techinasia,proto3,oneof"`
}

func (*ReplyCrawler_CbCompany) isReplyCrawler_CrawlerResult()       {}
func (*ReplyCrawler_TranslateResult) isReplyCrawler_CrawlerResult() {}
func (*ReplyCrawler_Dtdata) isReplyCrawler_CrawlerResult()          {}
func (*ReplyCrawler_AnalyzePage) isReplyCrawler_CrawlerResult()     {}
func (*ReplyCrawler_Geoip) isReplyCrawler_CrawlerResult()           {}
func (*ReplyCrawler_Techinasia) isReplyCrawler_CrawlerResult()      {}

func (m *ReplyCrawler) GetCrawlerResult() isReplyCrawler_CrawlerResult {
	if m != nil {
		return m.CrawlerResult
	}
	return nil
}

func (m *ReplyCrawler) GetCrawlerType() CrawlerType {
	if m != nil {
		return m.CrawlerType
	}
	return CrawlerType_CT_TRANSLATE2
}

func (m *ReplyCrawler) GetCbCompany() *CrunchBaseOrganization {
	if x, ok := m.GetCrawlerResult().(*ReplyCrawler_CbCompany); ok {
		return x.CbCompany
	}
	return nil
}

func (m *ReplyCrawler) GetTranslateResult() *TranslateResult {
	if x, ok := m.GetCrawlerResult().(*ReplyCrawler_TranslateResult); ok {
		return x.TranslateResult
	}
	return nil
}

func (m *ReplyCrawler) GetDtdata() *ReplyDTData {
	if x, ok := m.GetCrawlerResult().(*ReplyCrawler_Dtdata); ok {
		return x.Dtdata
	}
	return nil
}

func (m *ReplyCrawler) GetAnalyzePage() *ReplyAnalyzePage {
	if x, ok := m.GetCrawlerResult().(*ReplyCrawler_AnalyzePage); ok {
		return x.AnalyzePage
	}
	return nil
}

func (m *ReplyCrawler) GetGeoip() *ReplyGeoIP {
	if x, ok := m.GetCrawlerResult().(*ReplyCrawler_Geoip); ok {
		return x.Geoip
	}
	return nil
}

func (m *ReplyCrawler) GetTechinasia() *ReplyTechInAsia {
	if x, ok := m.GetCrawlerResult().(*ReplyCrawler_Techinasia); ok {
		return x.Techinasia
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ReplyCrawler) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ReplyCrawler_OneofMarshaler, _ReplyCrawler_OneofUnmarshaler, _ReplyCrawler_OneofSizer, []interface{}{
		(*ReplyCrawler_CbCompany)(nil),
		(*ReplyCrawler_TranslateResult)(nil),
		(*ReplyCrawler_Dtdata)(nil),
		(*ReplyCrawler_AnalyzePage)(nil),
		(*ReplyCrawler_Geoip)(nil),
		(*ReplyCrawler_Techinasia)(nil),
	}
}

func _ReplyCrawler_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ReplyCrawler)
	// crawlerResult
	switch x := m.CrawlerResult.(type) {
	case *ReplyCrawler_CbCompany:
		b.EncodeVarint(100<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CbCompany); err != nil {
			return err
		}
	case *ReplyCrawler_TranslateResult:
		b.EncodeVarint(101<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TranslateResult); err != nil {
			return err
		}
	case *ReplyCrawler_Dtdata:
		b.EncodeVarint(102<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Dtdata); err != nil {
			return err
		}
	case *ReplyCrawler_AnalyzePage:
		b.EncodeVarint(103<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AnalyzePage); err != nil {
			return err
		}
	case *ReplyCrawler_Geoip:
		b.EncodeVarint(105<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Geoip); err != nil {
			return err
		}
	case *ReplyCrawler_Techinasia:
		b.EncodeVarint(106<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Techinasia); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplyCrawler.CrawlerResult has unexpected type %T", x)
	}
	return nil
}

func _ReplyCrawler_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ReplyCrawler)
	switch tag {
	case 100: // crawlerResult.cbCompany
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CrunchBaseOrganization)
		err := b.DecodeMessage(msg)
		m.CrawlerResult = &ReplyCrawler_CbCompany{msg}
		return true, err
	case 101: // crawlerResult.translateResult
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TranslateResult)
		err := b.DecodeMessage(msg)
		m.CrawlerResult = &ReplyCrawler_TranslateResult{msg}
		return true, err
	case 102: // crawlerResult.dtdata
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReplyDTData)
		err := b.DecodeMessage(msg)
		m.CrawlerResult = &ReplyCrawler_Dtdata{msg}
		return true, err
	case 103: // crawlerResult.analyzePage
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReplyAnalyzePage)
		err := b.DecodeMessage(msg)
		m.CrawlerResult = &ReplyCrawler_AnalyzePage{msg}
		return true, err
	case 105: // crawlerResult.geoip
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReplyGeoIP)
		err := b.DecodeMessage(msg)
		m.CrawlerResult = &ReplyCrawler_Geoip{msg}
		return true, err
	case 106: // crawlerResult.techinasia
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ReplyTechInAsia)
		err := b.DecodeMessage(msg)
		m.CrawlerResult = &ReplyCrawler_Techinasia{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ReplyCrawler_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ReplyCrawler)
	// crawlerResult
	switch x := m.CrawlerResult.(type) {
	case *ReplyCrawler_CbCompany:
		s := proto.Size(x.CbCompany)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplyCrawler_TranslateResult:
		s := proto.Size(x.TranslateResult)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplyCrawler_Dtdata:
		s := proto.Size(x.Dtdata)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplyCrawler_AnalyzePage:
		s := proto.Size(x.AnalyzePage)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplyCrawler_Geoip:
		s := proto.Size(x.Geoip)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplyCrawler_Techinasia:
		s := proto.Size(x.Techinasia)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ReplyCrawler - reply crawler
type ReplyCrawlerStream struct {
	// totalLength - If the message is too long, it will send data in multiple msg, this is the total length.
	TotalLength int32 `protobuf:"varint,1,opt,name=totalLength,proto3" json:"totalLength,omitempty"`
	// curStart - The starting point of the current data (in bytes).
	CurStart int32 `protobuf:"varint,2,opt,name=curStart,proto3" json:"curStart,omitempty"`
	// curLength - The length of the current data (in bytes).
	CurLength int32 `protobuf:"varint,3,opt,name=curLength,proto3" json:"curLength,omitempty"`
	// hashData - This is the hash of each paragraph.
	HashData string `protobuf:"bytes,4,opt,name=hashData,proto3" json:"hashData,omitempty"`
	// totalHashData - If multiple messages return data, this is the hash value of all data, only sent in the last message.
	TotalHashData string `protobuf:"bytes,5,opt,name=totalHashData,proto3" json:"totalHashData,omitempty"`
	// data
	Data                 []byte        `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	Error                string        `protobuf:"bytes,100,opt,name=error,proto3" json:"error,omitempty"`
	ReplyCrawler         *ReplyCrawler `protobuf:"bytes,200,opt,name=replyCrawler,proto3" json:"replyCrawler,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ReplyCrawlerStream) Reset()         { *m = ReplyCrawlerStream{} }
func (m *ReplyCrawlerStream) String() string { return proto.CompactTextString(m) }
func (*ReplyCrawlerStream) ProtoMessage()    {}
func (*ReplyCrawlerStream) Descriptor() ([]byte, []int) {
	return fileDescriptor_result_62cc0a00308f8f15, []int{45}
}
func (m *ReplyCrawlerStream) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplyCrawlerStream.Unmarshal(m, b)
}
func (m *ReplyCrawlerStream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplyCrawlerStream.Marshal(b, m, deterministic)
}
func (dst *ReplyCrawlerStream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyCrawlerStream.Merge(dst, src)
}
func (m *ReplyCrawlerStream) XXX_Size() int {
	return xxx_messageInfo_ReplyCrawlerStream.Size(m)
}
func (m *ReplyCrawlerStream) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyCrawlerStream.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyCrawlerStream proto.InternalMessageInfo

func (m *ReplyCrawlerStream) GetTotalLength() int32 {
	if m != nil {
		return m.TotalLength
	}
	return 0
}

func (m *ReplyCrawlerStream) GetCurStart() int32 {
	if m != nil {
		return m.CurStart
	}
	return 0
}

func (m *ReplyCrawlerStream) GetCurLength() int32 {
	if m != nil {
		return m.CurLength
	}
	return 0
}

func (m *ReplyCrawlerStream) GetHashData() string {
	if m != nil {
		return m.HashData
	}
	return ""
}

func (m *ReplyCrawlerStream) GetTotalHashData() string {
	if m != nil {
		return m.TotalHashData
	}
	return ""
}

func (m *ReplyCrawlerStream) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ReplyCrawlerStream) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ReplyCrawlerStream) GetReplyCrawler() *ReplyCrawler {
	if m != nil {
		return m.ReplyCrawler
	}
	return nil
}

func init() {
	proto.RegisterType((*ImageInfo)(nil), "jarviscrawlercore.ImageInfo")
	proto.RegisterType((*Paragraph)(nil), "jarviscrawlercore.Paragraph")
	proto.RegisterType((*ExportArticleResult)(nil), "jarviscrawlercore.ExportArticleResult")
	proto.RegisterType((*Article)(nil), "jarviscrawlercore.Article")
	proto.RegisterType((*ArticleList)(nil), "jarviscrawlercore.ArticleList")
	proto.RegisterType((*ConfluenceUpdateItem)(nil), "jarviscrawlercore.ConfluenceUpdateItem")
	proto.RegisterType((*ConfluenceUpdateGrouping)(nil), "jarviscrawlercore.ConfluenceUpdateGrouping")
	proto.RegisterType((*ConfluenceAllUpdates)(nil), "jarviscrawlercore.ConfluenceAllUpdates")
	proto.RegisterType((*YCCompanies)(nil), "jarviscrawlercore.YCCompanies")
	proto.RegisterType((*CrunchBaseEmployee)(nil), "jarviscrawlercore.CrunchBaseEmployee")
	proto.RegisterType((*CrunchBaseInvestment)(nil), "jarviscrawlercore.CrunchBaseInvestment")
	proto.RegisterType((*CrunchBaseAcquisition)(nil), "jarviscrawlercore.CrunchBaseAcquisition")
	proto.RegisterType((*CrunchBaseInvestor)(nil), "jarviscrawlercore.CrunchBaseInvestor")
	proto.RegisterType((*CrunchBaseFundingRound)(nil), "jarviscrawlercore.CrunchBaseFundingRound")
	proto.RegisterType((*CrunchBaseOrganization)(nil), "jarviscrawlercore.CrunchBaseOrganization")
	proto.RegisterType((*BTResFileInfo)(nil), "jarviscrawlercore.BTResFileInfo")
	proto.RegisterType((*BTResInfo)(nil), "jarviscrawlercore.BTResInfo")
	proto.RegisterMapType((map[string]string)(nil), "jarviscrawlercore.BTResInfo.NameEntry")
	proto.RegisterType((*RequestTranslate)(nil), "jarviscrawlercore.RequestTranslate")
	proto.RegisterType((*ReplyTranslate)(nil), "jarviscrawlercore.ReplyTranslate")
	proto.RegisterType((*RequestArticle)(nil), "jarviscrawlercore.RequestArticle")
	proto.RegisterType((*ReplyArticle)(nil), "jarviscrawlercore.ReplyArticle")
	proto.RegisterType((*RequestArticles)(nil), "jarviscrawlercore.RequestArticles")
	proto.RegisterType((*ReplyArticles)(nil), "jarviscrawlercore.ReplyArticles")
	proto.RegisterType((*DTGameResultErr)(nil), "jarviscrawlercore.DTGameResultErr")
	proto.RegisterType((*RequestDTData)(nil), "jarviscrawlercore.RequestDTData")
	proto.RegisterType((*DTBusinessGameReport)(nil), "jarviscrawlercore.DTBusinessGameReport")
	proto.RegisterType((*DTTodayGameData)(nil), "jarviscrawlercore.DTTodayGameData")
	proto.RegisterType((*DTGPKGameResult)(nil), "jarviscrawlercore.DTGPKGameResult")
	proto.RegisterType((*DTGPKCheckGameResult)(nil), "jarviscrawlercore.DTGPKCheckGameResult")
	proto.RegisterType((*ReplyDTData)(nil), "jarviscrawlercore.ReplyDTData")
	proto.RegisterType((*RequestCrunchBaseCompany)(nil), "jarviscrawlercore.RequestCrunchBaseCompany")
	proto.RegisterType((*RequestTranslate2)(nil), "jarviscrawlercore.RequestTranslate2")
	proto.RegisterType((*TranslateResult)(nil), "jarviscrawlercore.TranslateResult")
	proto.RegisterType((*AnalyzePage)(nil), "jarviscrawlercore.AnalyzePage")
	proto.RegisterType((*AnalyzeScreenshot)(nil), "jarviscrawlercore.AnalyzeScreenshot")
	proto.RegisterType((*AnalyzeReqInfo)(nil), "jarviscrawlercore.AnalyzeReqInfo")
	proto.RegisterType((*ReplyAnalyzePage)(nil), "jarviscrawlercore.ReplyAnalyzePage")
	proto.RegisterType((*RequestGeoIP)(nil), "jarviscrawlercore.RequestGeoIP")
	proto.RegisterType((*ReplyGeoIP)(nil), "jarviscrawlercore.ReplyGeoIP")
	proto.RegisterType((*TechInAsiaCompany)(nil), "jarviscrawlercore.TechInAsiaCompany")
	proto.RegisterType((*TechInAsiaJob)(nil), "jarviscrawlercore.TechInAsiaJob")
	proto.RegisterType((*RequestTechInAsia)(nil), "jarviscrawlercore.RequestTechInAsia")
	proto.RegisterType((*ReplyTechInAsia)(nil), "jarviscrawlercore.ReplyTechInAsia")
	proto.RegisterType((*RequestCrawler)(nil), "jarviscrawlercore.RequestCrawler")
	proto.RegisterType((*ReplyCrawler)(nil), "jarviscrawlercore.ReplyCrawler")
	proto.RegisterType((*ReplyCrawlerStream)(nil), "jarviscrawlercore.ReplyCrawlerStream")
	proto.RegisterEnum("jarviscrawlercore.ParagraphType", ParagraphType_name, ParagraphType_value)
	proto.RegisterEnum("jarviscrawlercore.BTResFileType", BTResFileType_name, BTResFileType_value)
	proto.RegisterEnum("jarviscrawlercore.DTDataType", DTDataType_name, DTDataType_value)
	proto.RegisterEnum("jarviscrawlercore.DTGameResultErrCode", DTGameResultErrCode_name, DTGameResultErrCode_value)
	proto.RegisterEnum("jarviscrawlercore.CrawlerType", CrawlerType_name, CrawlerType_value)
	proto.RegisterEnum("jarviscrawlercore.AnalyzeScreenshotType", AnalyzeScreenshotType_name, AnalyzeScreenshotType_value)
	proto.RegisterEnum("jarviscrawlercore.TechInAsiaMode", TechInAsiaMode_name, TechInAsiaMode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// JarvisCrawlerServiceClient is the client API for JarvisCrawlerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JarvisCrawlerServiceClient interface {
	// translate - translate text
	Translate(ctx context.Context, in *RequestTranslate, opts ...grpc.CallOption) (*ReplyTranslate, error)
	// exportArticle - export article
	ExportArticle(ctx context.Context, in *RequestArticle, opts ...grpc.CallOption) (JarvisCrawlerService_ExportArticleClient, error)
	// getArticles - get articles
	GetArticles(ctx context.Context, in *RequestArticles, opts ...grpc.CallOption) (*ReplyArticles, error)
	// getDTData - get DT data
	GetDTData(ctx context.Context, in *RequestDTData, opts ...grpc.CallOption) (*ReplyDTData, error)
	// requestCrawler - request crawler
	RequestCrawler(ctx context.Context, in *RequestCrawler, opts ...grpc.CallOption) (JarvisCrawlerService_RequestCrawlerClient, error)
}

type jarvisCrawlerServiceClient struct {
	cc *grpc.ClientConn
}

func NewJarvisCrawlerServiceClient(cc *grpc.ClientConn) JarvisCrawlerServiceClient {
	return &jarvisCrawlerServiceClient{cc}
}

func (c *jarvisCrawlerServiceClient) Translate(ctx context.Context, in *RequestTranslate, opts ...grpc.CallOption) (*ReplyTranslate, error) {
	out := new(ReplyTranslate)
	err := c.cc.Invoke(ctx, "/jarviscrawlercore.JarvisCrawlerService/translate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jarvisCrawlerServiceClient) ExportArticle(ctx context.Context, in *RequestArticle, opts ...grpc.CallOption) (JarvisCrawlerService_ExportArticleClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JarvisCrawlerService_serviceDesc.Streams[0], "/jarviscrawlercore.JarvisCrawlerService/exportArticle", opts...)
	if err != nil {
		return nil, err
	}
	x := &jarvisCrawlerServiceExportArticleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JarvisCrawlerService_ExportArticleClient interface {
	Recv() (*ReplyArticle, error)
	grpc.ClientStream
}

type jarvisCrawlerServiceExportArticleClient struct {
	grpc.ClientStream
}

func (x *jarvisCrawlerServiceExportArticleClient) Recv() (*ReplyArticle, error) {
	m := new(ReplyArticle)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jarvisCrawlerServiceClient) GetArticles(ctx context.Context, in *RequestArticles, opts ...grpc.CallOption) (*ReplyArticles, error) {
	out := new(ReplyArticles)
	err := c.cc.Invoke(ctx, "/jarviscrawlercore.JarvisCrawlerService/getArticles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jarvisCrawlerServiceClient) GetDTData(ctx context.Context, in *RequestDTData, opts ...grpc.CallOption) (*ReplyDTData, error) {
	out := new(ReplyDTData)
	err := c.cc.Invoke(ctx, "/jarviscrawlercore.JarvisCrawlerService/getDTData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jarvisCrawlerServiceClient) RequestCrawler(ctx context.Context, in *RequestCrawler, opts ...grpc.CallOption) (JarvisCrawlerService_RequestCrawlerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_JarvisCrawlerService_serviceDesc.Streams[1], "/jarviscrawlercore.JarvisCrawlerService/requestCrawler", opts...)
	if err != nil {
		return nil, err
	}
	x := &jarvisCrawlerServiceRequestCrawlerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type JarvisCrawlerService_RequestCrawlerClient interface {
	Recv() (*ReplyCrawlerStream, error)
	grpc.ClientStream
}

type jarvisCrawlerServiceRequestCrawlerClient struct {
	grpc.ClientStream
}

func (x *jarvisCrawlerServiceRequestCrawlerClient) Recv() (*ReplyCrawlerStream, error) {
	m := new(ReplyCrawlerStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JarvisCrawlerServiceServer is the server API for JarvisCrawlerService service.
type JarvisCrawlerServiceServer interface {
	// translate - translate text
	Translate(context.Context, *RequestTranslate) (*ReplyTranslate, error)
	// exportArticle - export article
	ExportArticle(*RequestArticle, JarvisCrawlerService_ExportArticleServer) error
	// getArticles - get articles
	GetArticles(context.Context, *RequestArticles) (*ReplyArticles, error)
	// getDTData - get DT data
	GetDTData(context.Context, *RequestDTData) (*ReplyDTData, error)
	// requestCrawler - request crawler
	RequestCrawler(*RequestCrawler, JarvisCrawlerService_RequestCrawlerServer) error
}

func RegisterJarvisCrawlerServiceServer(s *grpc.Server, srv JarvisCrawlerServiceServer) {
	s.RegisterService(&_JarvisCrawlerService_serviceDesc, srv)
}

func _JarvisCrawlerService_Translate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTranslate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisCrawlerServiceServer).Translate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jarviscrawlercore.JarvisCrawlerService/Translate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisCrawlerServiceServer).Translate(ctx, req.(*RequestTranslate))
	}
	return interceptor(ctx, in, info, handler)
}

func _JarvisCrawlerService_ExportArticle_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestArticle)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JarvisCrawlerServiceServer).ExportArticle(m, &jarvisCrawlerServiceExportArticleServer{stream})
}

type JarvisCrawlerService_ExportArticleServer interface {
	Send(*ReplyArticle) error
	grpc.ServerStream
}

type jarvisCrawlerServiceExportArticleServer struct {
	grpc.ServerStream
}

func (x *jarvisCrawlerServiceExportArticleServer) Send(m *ReplyArticle) error {
	return x.ServerStream.SendMsg(m)
}

func _JarvisCrawlerService_GetArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestArticles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisCrawlerServiceServer).GetArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jarviscrawlercore.JarvisCrawlerService/GetArticles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisCrawlerServiceServer).GetArticles(ctx, req.(*RequestArticles))
	}
	return interceptor(ctx, in, info, handler)
}

func _JarvisCrawlerService_GetDTData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDTData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JarvisCrawlerServiceServer).GetDTData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jarviscrawlercore.JarvisCrawlerService/GetDTData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JarvisCrawlerServiceServer).GetDTData(ctx, req.(*RequestDTData))
	}
	return interceptor(ctx, in, info, handler)
}

func _JarvisCrawlerService_RequestCrawler_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestCrawler)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JarvisCrawlerServiceServer).RequestCrawler(m, &jarvisCrawlerServiceRequestCrawlerServer{stream})
}

type JarvisCrawlerService_RequestCrawlerServer interface {
	Send(*ReplyCrawlerStream) error
	grpc.ServerStream
}

type jarvisCrawlerServiceRequestCrawlerServer struct {
	grpc.ServerStream
}

func (x *jarvisCrawlerServiceRequestCrawlerServer) Send(m *ReplyCrawlerStream) error {
	return x.ServerStream.SendMsg(m)
}

var _JarvisCrawlerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jarviscrawlercore.JarvisCrawlerService",
	HandlerType: (*JarvisCrawlerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "translate",
			Handler:    _JarvisCrawlerService_Translate_Handler,
		},
		{
			MethodName: "getArticles",
			Handler:    _JarvisCrawlerService_GetArticles_Handler,
		},
		{
			MethodName: "getDTData",
			Handler:    _JarvisCrawlerService_GetDTData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "exportArticle",
			Handler:       _JarvisCrawlerService_ExportArticle_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "requestCrawler",
			Handler:       _JarvisCrawlerService_RequestCrawler_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "result.proto",
}

func init() { proto.RegisterFile("result.proto", fileDescriptor_result_62cc0a00308f8f15) }

var fileDescriptor_result_62cc0a00308f8f15 = []byte{
	// 4089 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x3a, 0x4d, 0x6f, 0x1b, 0x49,
	0x76, 0x6a, 0x52, 0x94, 0xc4, 0xd2, 0x87, 0xdb, 0x65, 0xd9, 0xd3, 0xa3, 0xf1, 0x78, 0x34, 0x3d,
	0x1f, 0xeb, 0x38, 0xc1, 0xc0, 0xe3, 0xcc, 0x64, 0x17, 0xc6, 0xec, 0x62, 0x28, 0xb2, 0x25, 0xd1,
	0x96, 0x48, 0xa6, 0xd8, 0x8a, 0xd7, 0x8b, 0x24, 0x42, 0xa9, 0x59, 0x22, 0xdb, 0x6e, 0x76, 0xd3,
	0xdd, 0x4d, 0xd9, 0xda, 0x1c, 0x92, 0x4b, 0x72, 0x48, 0x80, 0x05, 0xf2, 0x03, 0x72, 0xc9, 0x31,
	0x40, 0xfe, 0x44, 0xb0, 0x40, 0x92, 0x43, 0xb2, 0x40, 0xf2, 0x0f, 0x72, 0x08, 0x90, 0x73, 0x90,
	0xd3, 0xce, 0x21, 0x78, 0xaf, 0xaa, 0xbb, 0xab, 0x29, 0x52, 0xf6, 0x20, 0xc1, 0xde, 0xfa, 0xbd,
	0xaa, 0x57, 0xf5, 0xbe, 0xea, 0xd5, 0x7b, 0xaf, 0x9a, 0x6c, 0xc4, 0x22, 0x99, 0x06, 0xe9, 0x17,
	0x93, 0x38, 0x4a, 0x23, 0x7a, 0xf3, 0x05, 0x8f, 0x2f, 0xfc, 0xc4, 0x8b, 0xf9, 0xeb, 0x40, 0xc4,
	0x5e, 0x14, 0x0b, 0xfb, 0x4f, 0x48, 0xbd, 0x3d, 0xe6, 0x43, 0xd1, 0x0e, 0xcf, 0x23, 0xba, 0x43,
	0xd6, 0x46, 0x3c, 0x19, 0x75, 0xf8, 0x58, 0x58, 0xc6, 0xae, 0x71, 0xbf, 0xce, 0x72, 0x98, 0x9a,
	0xa4, 0x3a, 0x8d, 0x03, 0xab, 0x82, 0x68, 0xf8, 0xa4, 0xdb, 0xa4, 0xf6, 0xda, 0x1f, 0xa4, 0x23,
	0xab, 0xba, 0x6b, 0xdc, 0xaf, 0x31, 0x09, 0xd0, 0x3b, 0x64, 0x65, 0x24, 0xfc, 0xe1, 0x28, 0xb5,
	0x96, 0x11, 0xad, 0x20, 0x4a, 0xc9, 0xf2, 0x80, 0xa7, 0xdc, 0xaa, 0xed, 0x1a, 0xf7, 0x37, 0x18,
	0x7e, 0xdb, 0x7f, 0x65, 0x90, 0x7a, 0x8f, 0xc7, 0x7c, 0x18, 0xf3, 0xc9, 0x88, 0x3e, 0x24, 0x95,
	0x49, 0x8a, 0xfb, 0x6e, 0x3d, 0xda, 0xfd, 0xe2, 0x0a, 0xab, 0x5f, 0xe4, 0x33, 0xdd, 0xcb, 0x89,
	0x60, 0x95, 0x49, 0x4a, 0x77, 0xc9, 0xba, 0x3f, 0x1e, 0x1e, 0x66, 0x2c, 0x4b, 0xde, 0x74, 0x14,
	0xec, 0x9a, 0x8a, 0x37, 0x29, 0xb2, 0x58, 0x67, 0xf8, 0x0d, 0x1c, 0xfa, 0xe3, 0xe1, 0x09, 0x3b,
	0x42, 0x0e, 0xeb, 0x4c, 0x41, 0xf6, 0x7f, 0x55, 0xc8, 0x2d, 0xe7, 0xcd, 0x24, 0x8a, 0xd3, 0x46,
	0x9c, 0xfa, 0x5e, 0x20, 0x18, 0xea, 0x0e, 0xe4, 0x4c, 0xfd, 0x34, 0xc8, 0x54, 0x22, 0x01, 0x58,
	0x85, 0x4f, 0xd3, 0x51, 0x14, 0xab, 0x6d, 0x15, 0x44, 0xef, 0x92, 0xfa, 0xeb, 0xd8, 0x4f, 0x85,
	0xeb, 0x8f, 0x85, 0xda, 0xb6, 0x40, 0x50, 0x8b, 0xac, 0x72, 0xb9, 0xb8, 0xda, 0x3c, 0x03, 0x33,
	0xfd, 0xd6, 0x0a, 0xfd, 0x3e, 0x24, 0xcb, 0xfe, 0x78, 0x98, 0x58, 0x2b, 0xbb, 0xd5, 0xfb, 0xeb,
	0x8f, 0xee, 0xce, 0xd1, 0x48, 0x6e, 0x39, 0x86, 0x33, 0xe9, 0x37, 0x84, 0x20, 0x73, 0x88, 0xb7,
	0x56, 0x77, 0x8d, 0xb7, 0xd2, 0x69, 0xf3, 0x51, 0x57, 0x7c, 0x98, 0x58, 0x6b, 0xbb, 0x55, 0xd4,
	0x15, 0x97, 0x2b, 0x4e, 0x32, 0xb5, 0x27, 0x56, 0x7d, 0x21, 0x27, 0xb9, 0x6d, 0x98, 0x36, 0x1f,
	0xa4, 0x4d, 0xa6, 0xe3, 0x31, 0x8f, 0x2f, 0x2d, 0x22, 0xa5, 0x55, 0xa0, 0xfd, 0xe7, 0x15, 0xb2,
	0xaa, 0xb4, 0xfc, 0xff, 0xad, 0xdf, 0x6c, 0xc7, 0xe5, 0xd2, 0x8e, 0x73, 0xf4, 0xfb, 0x88, 0xd4,
	0x7c, 0x54, 0xd4, 0xca, 0x3b, 0x28, 0x4a, 0x4e, 0x05, 0x8f, 0x4b, 0x84, 0x17, 0x85, 0x03, 0x17,
	0x39, 0x5e, 0x95, 0x1e, 0xa7, 0xa1, 0x80, 0x83, 0x49, 0x2c, 0xc6, 0xfe, 0x74, 0x6c, 0xad, 0xed,
	0x1a, 0xf7, 0xd7, 0x58, 0x06, 0x82, 0x7e, 0x03, 0x1e, 0x0e, 0xad, 0xba, 0xf4, 0x45, 0xf8, 0xb6,
	0x1d, 0xb2, 0xae, 0xd4, 0x70, 0xe4, 0x27, 0x29, 0xfd, 0x3d, 0xb2, 0xa6, 0xfc, 0x21, 0xb1, 0x0c,
	0x54, 0xf6, 0xce, 0x1c, 0xae, 0x32, 0xf7, 0xcc, 0xe7, 0xda, 0x3f, 0x25, 0xdb, 0xcd, 0x28, 0x3c,
	0x0f, 0xa6, 0x22, 0xf4, 0xc4, 0xc9, 0x64, 0xc0, 0x53, 0xd1, 0x4e, 0xc5, 0x78, 0x81, 0x6a, 0xaf,
	0x1e, 0x65, 0x4d, 0x6d, 0xd5, 0xb2, 0xa1, 0x5e, 0x11, 0x6b, 0x76, 0xe5, 0x83, 0x38, 0x9a, 0x4e,
	0xfc, 0x70, 0xa8, 0x99, 0xc8, 0x28, 0x99, 0xe8, 0xc7, 0xa4, 0xe6, 0xa7, 0x62, 0x9c, 0x58, 0x15,
	0x14, 0xe1, 0x07, 0x73, 0x44, 0x98, 0xc7, 0x2d, 0x93, 0x54, 0xf6, 0x1f, 0xe9, 0xc2, 0x34, 0x82,
	0x40, 0xce, 0x48, 0xa8, 0x43, 0x56, 0xa7, 0xf2, 0x53, 0xe9, 0xe6, 0xb7, 0xdf, 0x61, 0xe1, 0x8c,
	0x59, 0x96, 0xd1, 0xda, 0x09, 0x59, 0x7f, 0xde, 0x6c, 0x46, 0xe3, 0x09, 0x0f, 0x7d, 0x91, 0x80,
	0x55, 0xc2, 0x22, 0xde, 0xe1, 0xf7, 0x1c, 0x05, 0x51, 0xb2, 0xec, 0x87, 0xe7, 0x51, 0x16, 0x47,
	0xe0, 0x1b, 0x94, 0x7b, 0xc6, 0x53, 0x6f, 0xa4, 0x3c, 0x4d, 0x02, 0x80, 0xf5, 0x13, 0x3e, 0x99,
	0xa0, 0xa7, 0xad, 0x31, 0x09, 0xd8, 0x7f, 0x69, 0x10, 0xda, 0x8c, 0xa7, 0xa1, 0x37, 0xda, 0xe3,
	0x89, 0x70, 0xc6, 0x93, 0x20, 0xba, 0x14, 0x62, 0xee, 0xe6, 0x94, 0x2c, 0x7b, 0xd1, 0x20, 0x8b,
	0x66, 0xf8, 0x5d, 0xd8, 0xb1, 0xaa, 0xdb, 0xf1, 0x2e, 0xa9, 0x27, 0x29, 0x8f, 0xd3, 0x16, 0x4f,
	0xb3, 0x70, 0x52, 0x20, 0xc0, 0xa6, 0x22, 0x1c, 0xe0, 0x98, 0x74, 0xfa, 0x0c, 0xb4, 0xff, 0xcd,
	0x20, 0xdb, 0x05, 0x33, 0xed, 0xf0, 0x42, 0x24, 0xe9, 0x58, 0x84, 0x29, 0xfd, 0x94, 0x6c, 0xf2,
	0x30, 0x8c, 0xa6, 0xa1, 0x27, 0x24, 0xa1, 0xe4, 0xab, 0x8c, 0xa4, 0x0f, 0x88, 0x19, 0xc5, 0x43,
	0x1e, 0xfa, 0x3f, 0xe7, 0xa9, 0x1f, 0x85, 0x5a, 0xe8, 0xbd, 0x82, 0xa7, 0x36, 0xd9, 0x08, 0x04,
	0x1f, 0xc8, 0x3d, 0xa2, 0x18, 0xf9, 0x5f, 0x63, 0x25, 0x1c, 0xcc, 0x39, 0x9f, 0x86, 0x03, 0x30,
	0x52, 0x34, 0x0d, 0x07, 0x4a, 0x92, 0x12, 0x0e, 0xce, 0xdd, 0x38, 0x0a, 0xc5, 0x25, 0xe3, 0x7e,
	0x22, 0x06, 0x4a, 0x20, 0x1d, 0x65, 0xff, 0x63, 0x85, 0xdc, 0x2e, 0x84, 0x6a, 0x78, 0xaf, 0xa6,
	0x7e, 0xe2, 0x03, 0x1f, 0xf4, 0x31, 0xb1, 0x38, 0x80, 0xb1, 0x18, 0x74, 0x67, 0xf9, 0x96, 0x02,
	0x2e, 0x1c, 0x5f, 0x44, 0xdb, 0x2c, 0x0c, 0xb4, 0x70, 0xfc, 0xaa, 0x36, 0xab, 0xf3, 0xb4, 0xb9,
	0x4d, 0x6a, 0x93, 0xd8, 0xf7, 0x32, 0x03, 0x4a, 0x80, 0x7e, 0x43, 0xde, 0x97, 0xeb, 0xfa, 0xe1,
	0xf0, 0x0a, 0xd3, 0x52, 0xfa, 0xc5, 0x13, 0x16, 0x52, 0x23, 0xdb, 0x2b, 0xd7, 0x50, 0xc3, 0x04,
	0xfb, 0x8d, 0xee, 0xaa, 0xba, 0x95, 0x7c, 0xf5, 0xad, 0x69, 0xae, 0x84, 0xbb, 0x62, 0xed, 0xca,
	0x1c, 0x6b, 0xef, 0x90, 0xb5, 0x1e, 0x8f, 0xd3, 0x50, 0xc4, 0x89, 0x55, 0xc5, 0x9b, 0x26, 0x87,
	0xed, 0x5f, 0x19, 0xe4, 0x4e, 0xb1, 0xf5, 0xbe, 0xee, 0x00, 0xef, 0xe6, 0x9a, 0xf7, 0xc9, 0x8d,
	0x34, 0xe6, 0x61, 0xc2, 0xbd, 0x19, 0xcf, 0x9c, 0x45, 0xcf, 0x3a, 0x54, 0xf5, 0x8a, 0x43, 0xd1,
	0x26, 0xa9, 0x67, 0xc2, 0x25, 0xd6, 0x00, 0x03, 0xce, 0x67, 0xf3, 0x02, 0xce, 0x15, 0x55, 0xb1,
	0x82, 0xce, 0xfe, 0xe5, 0x8a, 0x2e, 0x91, 0xae, 0xea, 0x77, 0x3e, 0xfb, 0xf7, 0x08, 0xf1, 0x78,
	0x2a, 0x86, 0x51, 0xec, 0x8b, 0x4c, 0x65, 0x1a, 0x86, 0x3e, 0x24, 0xb7, 0x46, 0x82, 0x0f, 0x5e,
	0x4d, 0x79, 0x9c, 0x8a, 0x38, 0x61, 0x62, 0xe8, 0x47, 0x61, 0x62, 0x2d, 0xe3, 0xc4, 0x79, 0x43,
	0x20, 0xfb, 0x39, 0x28, 0x55, 0xe8, 0xd1, 0x41, 0x47, 0x81, 0x91, 0x24, 0x18, 0xcb, 0xf4, 0xa3,
	0xce, 0x72, 0x18, 0x74, 0x1c, 0x4d, 0x44, 0xcc, 0x53, 0x3f, 0x1c, 0xf6, 0x53, 0x9e, 0x4e, 0x13,
	0x75, 0x0d, 0xce, 0xa2, 0xc1, 0x66, 0xea, 0x10, 0xab, 0x79, 0x6b, 0xd2, 0x66, 0x25, 0x24, 0xac,
	0x17, 0xf0, 0x24, 0x55, 0xd6, 0x86, 0xdc, 0x4e, 0xdd, 0x90, 0xb3, 0x68, 0x88, 0x77, 0x81, 0x18,
	0xf2, 0x00, 0xed, 0x2a, 0x13, 0x8a, 0x02, 0x81, 0x57, 0x73, 0x1a, 0x79, 0x2f, 0xfb, 0x97, 0xe3,
	0xb3, 0x28, 0xb0, 0x06, 0xea, 0x6a, 0x2e, 0x50, 0xe0, 0x9e, 0x17, 0x3c, 0x98, 0xa2, 0xfa, 0xdb,
	0xbd, 0xae, 0x25, 0xa4, 0x0b, 0xeb, 0x38, 0x90, 0x1c, 0x4f, 0x20, 0x8c, 0x9f, 0xcb, 0x14, 0x38,
	0x83, 0x21, 0xa2, 0xe2, 0x5d, 0xd5, 0xeb, 0x5a, 0x43, 0x19, 0x51, 0x15, 0x48, 0x3f, 0x27, 0x5b,
	0x9a, 0xeb, 0xc0, 0x84, 0x11, 0x4e, 0x98, 0xc1, 0xd2, 0x5e, 0xae, 0x11, 0xf4, 0xea, 0xc4, 0xfa,
	0x27, 0x79, 0x93, 0xfd, 0xd6, 0xb5, 0x8e, 0xa5, 0x1f, 0x04, 0x56, 0x5e, 0x80, 0x3e, 0x21, 0x1b,
	0xde, 0x34, 0xce, 0x2e, 0x94, 0xc4, 0xfa, 0xfb, 0xca, 0x3b, 0x78, 0x6a, 0x36, 0x9d, 0x95, 0x68,
	0x61, 0xad, 0xb3, 0x88, 0xc7, 0x83, 0x63, 0x31, 0x3e, 0x03, 0xcb, 0xff, 0x75, 0xf5, 0x7b, 0xad,
	0xa5, 0xd3, 0xd2, 0x23, 0xb2, 0x39, 0xe1, 0x49, 0x5a, 0x30, 0xf6, 0x3f, 0xdf, 0x6b, 0xb1, 0x32,
	0xb1, 0xfd, 0x8c, 0x6c, 0xee, 0xb9, 0x4c, 0x24, 0xfb, 0x7e, 0x20, 0x2b, 0x95, 0xaf, 0xc8, 0x72,
	0x0a, 0x9e, 0xb2, 0xb8, 0x5a, 0xc8, 0xe7, 0x63, 0xb5, 0x80, 0xb3, 0xaf, 0xde, 0xeb, 0xf6, 0x7f,
	0x1a, 0xa4, 0x8e, 0x33, 0xb3, 0xfa, 0xe7, 0x7c, 0x1a, 0x04, 0xda, 0xb1, 0xcc, 0x61, 0xfa, 0x58,
	0x1d, 0x57, 0xa9, 0xdf, 0xcf, 0x17, 0xed, 0x08, 0xeb, 0x7c, 0x01, 0xfe, 0xe8, 0x84, 0x69, 0x7c,
	0xa9, 0x8e, 0xf5, 0x36, 0xa9, 0xc5, 0x22, 0xf1, 0xb3, 0x30, 0x23, 0x01, 0xfa, 0x88, 0x54, 0x83,
	0x24, 0xb5, 0x08, 0x2e, 0x78, 0xad, 0x08, 0x98, 0x81, 0xc2, 0xe4, 0x9d, 0x1f, 0x92, 0x7a, 0xbe,
	0x38, 0x88, 0xf3, 0x52, 0x5c, 0x2a, 0x4e, 0xe1, 0x13, 0x36, 0x02, 0x6f, 0xce, 0x02, 0x88, 0x04,
	0x1e, 0x57, 0x7e, 0x64, 0xd8, 0xbf, 0x30, 0x88, 0xc9, 0xc4, 0xab, 0xa9, 0x48, 0x52, 0x17, 0x42,
	0x61, 0x00, 0xc7, 0x3c, 0xab, 0x8e, 0x0c, 0xad, 0x3a, 0x82, 0x03, 0x10, 0xf0, 0xf4, 0x3c, 0x8a,
	0xc7, 0x6a, 0x95, 0x1c, 0xc6, 0x34, 0x31, 0xf6, 0x8e, 0x20, 0x89, 0xcd, 0xd2, 0x44, 0x09, 0x02,
	0xd5, 0x40, 0x24, 0x29, 0x0e, 0xc9, 0x8b, 0x2c, 0x87, 0x31, 0x79, 0x89, 0x5e, 0x8a, 0x50, 0x1d,
	0x49, 0x09, 0xd8, 0x9f, 0x92, 0x2d, 0x26, 0x26, 0xc1, 0xe5, 0xb5, 0xdc, 0xd8, 0x7f, 0x08, 0xb3,
	0x90, 0xeb, 0x46, 0xb9, 0x4e, 0x32, 0x8a, 0xdc, 0xcc, 0x26, 0x1b, 0x3c, 0x4d, 0xb9, 0x37, 0x7a,
	0xf2, 0xfb, 0x53, 0x11, 0x5f, 0x66, 0xb7, 0x8e, 0x8e, 0x5b, 0xc0, 0xc3, 0x9f, 0x55, 0xc8, 0x06,
	0x32, 0x91, 0x2d, 0xfe, 0x13, 0xb2, 0x22, 0x0b, 0x66, 0x5c, 0x7f, 0xbe, 0x99, 0xe7, 0x94, 0x88,
	0x4c, 0x51, 0x41, 0x0c, 0x4a, 0xa3, 0x94, 0x07, 0x47, 0x22, 0x1c, 0xa6, 0x23, 0xe4, 0xa4, 0xc6,
	0x74, 0x14, 0x28, 0xca, 0x9b, 0xc6, 0x7d, 0xc8, 0xd2, 0x54, 0xdd, 0x9c, 0xc3, 0x10, 0xdf, 0xbc,
	0x69, 0xac, 0x68, 0x65, 0xf5, 0x5c, 0x20, 0xb2, 0xe2, 0xbc, 0x95, 0x15, 0xd1, 0xaa, 0x38, 0x07,
	0x18, 0x22, 0x2d, 0x6e, 0x72, 0x98, 0x4d, 0x90, 0x97, 0x7c, 0x19, 0x99, 0x97, 0xe0, 0xab, 0x5a,
	0x09, 0xfe, 0xa7, 0xe4, 0x46, 0x59, 0xc1, 0x09, 0xdd, 0xd6, 0x34, 0xbc, 0x57, 0xb1, 0x0c, 0xa9,
	0xe5, 0xcf, 0xe7, 0x69, 0x19, 0x87, 0xcb, 0x9a, 0xb6, 0xc8, 0xea, 0x6b, 0x71, 0x96, 0xf8, 0x79,
	0xbe, 0x93, 0x81, 0x0b, 0x6c, 0xf0, 0x94, 0x6c, 0xea, 0x26, 0x48, 0xe8, 0xe3, 0x52, 0x0d, 0x04,
	0x56, 0xb8, 0xb7, 0xb8, 0x06, 0x82, 0xaa, 0x49, 0xab, 0x83, 0xfe, 0xc6, 0x20, 0x37, 0x5a, 0xee,
	0x01, 0x1f, 0x2b, 0xc3, 0x38, 0x71, 0x4c, 0xbf, 0x25, 0xab, 0x22, 0x8e, 0xf1, 0x5a, 0x95, 0xd1,
	0x62, 0x9e, 0x51, 0x67, 0x88, 0x20, 0x0f, 0x62, 0x19, 0x19, 0xd4, 0x39, 0x78, 0x90, 0x1e, 0xa2,
	0xd0, 0x55, 0xa6, 0xa0, 0x1c, 0xff, 0x25, 0x4a, 0x9a, 0xe1, 0xbf, 0xc4, 0x63, 0x92, 0xc6, 0x17,
	0x3c, 0x78, 0x98, 0x97, 0xbd, 0x12, 0xb4, 0xff, 0xae, 0x02, 0xd2, 0xa2, 0xba, 0x5b, 0x2e, 0xda,
	0xe4, 0x0e, 0x59, 0x1e, 0x67, 0xac, 0x49, 0x6d, 0x23, 0x9c, 0xe7, 0xf6, 0x58, 0xe6, 0x56, 0xb4,
	0xdc, 0x3e, 0x2b, 0x73, 0x05, 0x14, 0x9c, 0x79, 0x09, 0x9c, 0x81, 0xf4, 0xc7, 0x84, 0x0c, 0x20,
	0xff, 0xe7, 0x78, 0x91, 0x2e, 0xa3, 0xc0, 0x1f, 0xce, 0x15, 0x38, 0x9b, 0xc4, 0x34, 0x02, 0xb9,
	0xf0, 0x85, 0x96, 0x65, 0x66, 0x20, 0xa4, 0x21, 0x67, 0xd3, 0xc4, 0x0f, 0x45, 0x02, 0x81, 0x4c,
	0xfa, 0x97, 0x86, 0x01, 0xf7, 0x1c, 0xf2, 0xb1, 0xc0, 0x14, 0x53, 0xe6, 0x03, 0x39, 0x0c, 0xb4,
	0x93, 0x80, 0x5f, 0x0a, 0x99, 0x39, 0xca, 0x2c, 0x40, 0xc3, 0x2c, 0xf0, 0x8c, 0x7f, 0x30, 0xc8,
	0x76, 0xcb, 0xdd, 0x53, 0x5b, 0x48, 0xfb, 0xc0, 0xd1, 0x9b, 0x61, 0xc5, 0x58, 0xc4, 0x8a, 0x96,
	0x49, 0xe5, 0x30, 0x8c, 0xe1, 0xa1, 0x78, 0xe6, 0x87, 0xa8, 0xba, 0x0a, 0xcb, 0xe1, 0x7c, 0x6c,
	0x4f, 0xc8, 0xe6, 0x55, 0x36, 0xb6, 0x27, 0xd2, 0x6c, 0xcd, 0xce, 0x74, 0x9c, 0xa0, 0x66, 0x6a,
	0x2c, 0x87, 0xd5, 0x99, 0x8e, 0x45, 0xe8, 0x5d, 0x2a, 0xc5, 0xe4, 0xb0, 0x2d, 0xc0, 0x21, 0xdd,
	0x68, 0xc0, 0x2f, 0x41, 0x00, 0x34, 0xb9, 0xce, 0x82, 0x71, 0x0d, 0x0b, 0x95, 0x6b, 0x58, 0xa8,
	0x96, 0x59, 0xb0, 0xff, 0xa3, 0x86, 0x8e, 0xdf, 0x7b, 0x5a, 0xb8, 0x31, 0xdd, 0x22, 0x95, 0x76,
	0x4b, 0xa9, 0xa7, 0xd2, 0x6e, 0xe9, 0x6a, 0x6b, 0xb7, 0x94, 0x62, 0x34, 0xcc, 0x8c, 0x95, 0xaa,
	0x57, 0xac, 0xa4, 0x5b, 0x78, 0x79, 0xc6, 0xc2, 0x26, 0xa9, 0xbe, 0xf6, 0x43, 0xd4, 0x4c, 0x85,
	0xc1, 0x27, 0x60, 0xce, 0x44, 0x8a, 0xfa, 0xa8, 0x30, 0xf8, 0x04, 0x4c, 0x74, 0x7e, 0x8e, 0xce,
	0x51, 0x61, 0xf0, 0x09, 0x76, 0x0f, 0x60, 0x77, 0x74, 0x89, 0x1a, 0x93, 0x00, 0xf0, 0x81, 0x69,
	0x93, 0x0c, 0x92, 0x75, 0x9c, 0xae, 0x61, 0x80, 0x0f, 0x84, 0x9c, 0x70, 0x80, 0xe7, 0xab, 0xc2,
	0x72, 0x58, 0xdd, 0x5e, 0x97, 0x22, 0x6e, 0xf7, 0xac, 0xf5, 0xfc, 0xf6, 0x42, 0x18, 0x8e, 0x14,
	0x84, 0x3c, 0x48, 0x3b, 0x85, 0xb5, 0x21, 0x8f, 0x54, 0x8e, 0xc8, 0xa4, 0xc3, 0x33, 0xb5, 0x59,
	0x48, 0x87, 0x87, 0x0a, 0x52, 0xf0, 0xc0, 0x17, 0x61, 0x8a, 0x87, 0x6a, 0x4b, 0x6a, 0xa6, 0xc0,
	0x94, 0x1c, 0xe0, 0x46, 0xd9, 0x01, 0x80, 0xd6, 0x4f, 0x9a, 0xd1, 0x78, 0x12, 0x88, 0x54, 0x58,
	0x26, 0xde, 0x4d, 0x1a, 0x06, 0xc6, 0x87, 0xfe, 0x79, 0xba, 0x1f, 0x0b, 0xd1, 0x6e, 0x59, 0x37,
	0xe5, 0xda, 0x05, 0x26, 0xe3, 0x0b, 0xa3, 0x3a, 0x2d, 0xf8, 0x42, 0x4f, 0x02, 0xda, 0xdc, 0xde,
	0xd6, 0x2d, 0x45, 0x5b, 0x78, 0xc0, 0x3d, 0x42, 0x46, 0x3c, 0xe9, 0x4f, 0xcf, 0xc0, 0x2b, 0xac,
	0x6d, 0xb9, 0x77, 0x81, 0xc1, 0x5b, 0x3b, 0x3d, 0xe3, 0x89, 0xf0, 0x07, 0xd6, 0x6d, 0x75, 0x6b,
	0x2b, 0x18, 0xc6, 0xe2, 0x28, 0x4a, 0x91, 0xf2, 0x0e, 0x52, 0xe6, 0x30, 0xfd, 0x09, 0x59, 0xf3,
	0x46, 0x7e, 0x30, 0x88, 0xf1, 0xc8, 0x42, 0xfa, 0x62, 0xcf, 0x8f, 0xa9, 0xba, 0x3f, 0xb2, 0x9c,
	0x86, 0x7e, 0x4d, 0xaa, 0x22, 0x8e, 0x21, 0xf9, 0x35, 0x16, 0xd3, 0xea, 0xf1, 0x98, 0xc1, 0x7c,
	0xfb, 0x1c, 0xe2, 0xc1, 0x41, 0xef, 0x69, 0x73, 0x24, 0xbc, 0x97, 0x9a, 0xa3, 0x7f, 0x25, 0x13,
	0x29, 0xe3, 0x9d, 0x39, 0x81, 0xe9, 0x18, 0xea, 0xe2, 0x18, 0x4f, 0x13, 0x41, 0xf7, 0xcb, 0x40,
	0xfb, 0xd7, 0x06, 0x59, 0xc7, 0x3b, 0x49, 0xc5, 0xe8, 0x36, 0x59, 0x1f, 0xe6, 0xd1, 0x27, 0x6b,
	0x3e, 0xfd, 0x60, 0xee, 0x3e, 0x57, 0xa3, 0x15, 0xd3, 0x69, 0xe9, 0x21, 0x5c, 0xd4, 0x5a, 0x30,
	0xc0, 0x63, 0xb8, 0x88, 0xe9, 0x52, 0xd8, 0x60, 0x65, 0x42, 0xfa, 0x8c, 0x50, 0xaf, 0xac, 0x87,
	0x83, 0xde, 0x53, 0x3c, 0xb5, 0x8b, 0x78, 0xbb, 0xaa, 0x39, 0x36, 0x67, 0x09, 0xfb, 0x11, 0xb1,
	0xd4, 0x15, 0x55, 0xe4, 0xe5, 0xb2, 0x5d, 0x76, 0x09, 0x37, 0x5e, 0x22, 0x78, 0xec, 0x8d, 0xb2,
	0x8e, 0x9f, 0x84, 0xec, 0x4b, 0x72, 0x73, 0x36, 0xb9, 0x7c, 0xf4, 0x9b, 0xc9, 0x2e, 0xed, 0xcf,
	0xc8, 0x8d, 0x7c, 0x4f, 0xe5, 0x0f, 0xf3, 0x12, 0xc9, 0x5f, 0x55, 0xc8, 0x7a, 0x23, 0xe4, 0xc1,
	0xe5, 0xcf, 0x45, 0x8f, 0x0f, 0xe7, 0xa5, 0x91, 0xdb, 0xa4, 0x36, 0x10, 0x01, 0xbf, 0x54, 0x59,
	0x9b, 0x04, 0x20, 0xb3, 0xba, 0xf0, 0xc5, 0x6b, 0xb0, 0xde, 0x33, 0xed, 0xb1, 0xa3, 0x8c, 0x84,
	0xfa, 0x2f, 0x43, 0x1c, 0xea, 0x8f, 0x1f, 0x33, 0x58, 0xfa, 0x3b, 0xe4, 0xe6, 0x40, 0x5c, 0xf8,
	0x9e, 0xe8, 0x7b, 0x3c, 0x10, 0xfb, 0xdc, 0x4b, 0xa3, 0x58, 0x05, 0xcd, 0xab, 0x03, 0x20, 0xb6,
	0x9f, 0x1c, 0x47, 0x67, 0x7e, 0x20, 0xbb, 0x36, 0x6b, 0x2c, 0x87, 0xf1, 0xe9, 0x23, 0x39, 0xe2,
	0xe1, 0x20, 0xf1, 0xf8, 0x44, 0xde, 0xb8, 0x6b, 0x4c, 0x47, 0x41, 0x5d, 0x1d, 0x0a, 0x31, 0xe8,
	0x7b, 0xb1, 0x10, 0x61, 0x32, 0x8a, 0xd2, 0x44, 0x35, 0xa4, 0x67, 0xd1, 0xb0, 0x0f, 0xa0, 0x8e,
	0xa2, 0x61, 0x82, 0xe1, 0x76, 0x8d, 0xe5, 0x30, 0x18, 0x25, 0xf5, 0xc7, 0x22, 0x9a, 0xa6, 0xd9,
	0x29, 0x51, 0xa0, 0xfd, 0x9a, 0xdc, 0x54, 0x0a, 0x2d, 0xd6, 0x9a, 0xdb, 0xd4, 0xf8, 0x46, 0xd5,
	0x6a, 0x15, 0x4c, 0x46, 0xee, 0xcf, 0x4b, 0xe6, 0x66, 0xd7, 0x29, 0xd7, 0x6c, 0x67, 0xd3, 0x73,
	0x54, 0xfb, 0x06, 0x83, 0x4f, 0xfb, 0x97, 0x15, 0xb2, 0xa5, 0x28, 0x98, 0x78, 0x85, 0x85, 0xdb,
	0xdc, 0xa2, 0x60, 0x10, 0xbd, 0x0e, 0x83, 0x88, 0x0f, 0xf2, 0x14, 0xaa, 0xc6, 0x4a, 0x38, 0x90,
	0xfb, 0x6c, 0x7a, 0xbe, 0x77, 0x99, 0x8a, 0xfc, 0x42, 0xcd, 0x60, 0xf4, 0x74, 0xd9, 0xb4, 0x50,
	0xcf, 0x58, 0x12, 0x2a, 0xe7, 0x65, 0x35, 0x4c, 0xfb, 0xb4, 0xbc, 0xec, 0x0e, 0x59, 0xf1, 0x93,
	0x83, 0x9f, 0xf9, 0x13, 0x65, 0x2f, 0x05, 0x81, 0xb5, 0xbc, 0x28, 0x4c, 0xb3, 0x1b, 0x44, 0x3d,
	0x1b, 0x68, 0x28, 0xa4, 0x9c, 0xf0, 0xc1, 0x20, 0x56, 0xe9, 0x91, 0x82, 0x20, 0x84, 0xc7, 0x62,
	0x1c, 0xa5, 0x02, 0xc7, 0x64, 0x63, 0x44, 0xc3, 0xa0, 0x8f, 0x8c, 0x87, 0xd2, 0x35, 0x07, 0x52,
	0x86, 0x0c, 0x06, 0x5e, 0xfd, 0xf1, 0x50, 0x39, 0xa4, 0x90, 0xf5, 0x44, 0x8e, 0xb0, 0xff, 0x1b,
	0x2b, 0x42, 0xc8, 0xbc, 0xb5, 0x63, 0x01, 0xe7, 0x93, 0x0f, 0xe5, 0x2d, 0x68, 0xc8, 0xe5, 0x32,
	0x18, 0x96, 0x83, 0x6f, 0xa9, 0x2f, 0xa9, 0xcf, 0x02, 0x01, 0x96, 0x17, 0xb1, 0xea, 0x94, 0xd5,
	0x19, 0x7e, 0xd3, 0xaf, 0xc9, 0x72, 0x2c, 0x5e, 0x25, 0x96, 0xc0, 0x88, 0xf9, 0xf1, 0x62, 0xcb,
	0x2b, 0x3b, 0x32, 0x9c, 0x4e, 0xf7, 0xc9, 0x7a, 0xa2, 0x79, 0xed, 0x39, 0x52, 0x7f, 0xfa, 0x2e,
	0x7e, 0xc3, 0x74, 0x42, 0x7c, 0x70, 0x01, 0x9f, 0x1e, 0x4a, 0x96, 0xe0, 0xdb, 0x7e, 0x0c, 0x15,
	0x1f, 0x46, 0xaa, 0x03, 0x11, 0xb5, 0x7b, 0x90, 0x24, 0xf9, 0x93, 0x2c, 0x49, 0xf2, 0x27, 0xd7,
	0x05, 0x28, 0xfb, 0x3b, 0x83, 0x10, 0xd4, 0x98, 0x24, 0xdd, 0x21, 0x6b, 0x01, 0x4f, 0xfd, 0x74,
	0xaa, 0xd2, 0xf7, 0x0a, 0xcb, 0x61, 0x6c, 0x55, 0x45, 0xe1, 0x50, 0x0e, 0xca, 0x44, 0xae, 0x40,
	0x80, 0x73, 0xea, 0x9d, 0x72, 0x15, 0xee, 0x4a, 0x38, 0x70, 0x69, 0x9e, 0x84, 0x2a, 0xdc, 0xc1,
	0x27, 0x96, 0x87, 0x51, 0x98, 0xfa, 0xa1, 0x08, 0x53, 0x95, 0x9d, 0x17, 0x08, 0x38, 0xa8, 0x5e,
	0x34, 0x0d, 0xd3, 0x38, 0xcb, 0x41, 0x33, 0x10, 0x5c, 0x2b, 0xc6, 0xce, 0x9f, 0xf2, 0x3b, 0x05,
	0x61, 0xb3, 0xd1, 0x4f, 0x2f, 0x95, 0xc3, 0xe1, 0x37, 0x16, 0x99, 0x51, 0x92, 0xe2, 0x19, 0xae,
	0xab, 0x22, 0x53, 0xc1, 0xf6, 0xbf, 0x1b, 0xe4, 0xa6, 0x2b, 0xbc, 0x51, 0x3b, 0x6c, 0x24, 0x3e,
	0xcf, 0xae, 0x84, 0x79, 0x27, 0xfe, 0x0e, 0x59, 0xe1, 0x17, 0x3c, 0xe5, 0xc5, 0xdb, 0x1d, 0x42,
	0xa8, 0xb1, 0xc8, 0xcb, 0x64, 0xc6, 0xb6, 0x62, 0x06, 0xcf, 0xb4, 0x39, 0x97, 0xaf, 0xb4, 0x39,
	0xef, 0x92, 0xba, 0xc8, 0x9b, 0x49, 0x32, 0x03, 0x2f, 0x10, 0xb2, 0x3b, 0x9d, 0xc6, 0xd1, 0x60,
	0x8a, 0x2d, 0x5e, 0xa5, 0x82, 0x12, 0x4e, 0x65, 0x9b, 0x2f, 0x13, 0x6b, 0x15, 0x17, 0x97, 0x80,
	0xfd, 0xeb, 0x2a, 0xd9, 0x2c, 0xa4, 0x7a, 0x12, 0x9d, 0xc9, 0xc3, 0x8a, 0xc2, 0x69, 0x8d, 0x6e,
	0x1d, 0x55, 0x3c, 0xc7, 0x54, 0xf4, 0xe7, 0x98, 0xeb, 0xa4, 0xbb, 0x4b, 0xea, 0x63, 0x3f, 0xec,
	0xf3, 0x20, 0x7b, 0x99, 0xac, 0xb1, 0x02, 0x81, 0xa3, 0xfc, 0x8d, 0x1a, 0x55, 0xb2, 0xe5, 0x88,
	0xeb, 0xca, 0x0b, 0xd4, 0x5a, 0x2c, 0xb8, 0x7a, 0x0e, 0x5d, 0xc5, 0x78, 0xa4, 0x61, 0x60, 0x5c,
	0xbe, 0x7b, 0xe1, 0xf8, 0x9a, 0x1c, 0x2f, 0x30, 0x20, 0xeb, 0x8b, 0xe8, 0x6c, 0x7f, 0x1a, 0x4a,
	0xb5, 0x49, 0x93, 0xeb, 0x28, 0xf0, 0xab, 0x17, 0xd1, 0x19, 0x86, 0x2d, 0x55, 0xcc, 0x2a, 0x10,
	0xd6, 0x16, 0x6f, 0x26, 0x22, 0xf6, 0x45, 0xe8, 0x09, 0x95, 0x6d, 0x6b, 0x18, 0x90, 0xea, 0x82,
	0x7b, 0x3c, 0xf4, 0xc0, 0xa0, 0x1b, 0x52, 0xaa, 0x1c, 0x01, 0x3b, 0x0f, 0x44, 0xe2, 0xc5, 0xfe,
	0x04, 0x77, 0x96, 0x29, 0xb7, 0x8e, 0x82, 0x4b, 0x35, 0x16, 0xf2, 0x6d, 0xa5, 0xff, 0xd2, 0x0f,
	0x82, 0xc4, 0xda, 0x42, 0xad, 0xce, 0x60, 0xd1, 0xf3, 0xa7, 0x41, 0x3a, 0x8d, 0x85, 0x4a, 0xbe,
	0x33, 0x50, 0xb3, 0x24, 0x16, 0x2d, 0x66, 0xc9, 0x92, 0xf8, 0xd6, 0xf1, 0x17, 0x46, 0x91, 0xb9,
	0xe4, 0x4e, 0x00, 0x71, 0x6b, 0x5c, 0xf4, 0x0b, 0xe6, 0xc5, 0xad, 0x62, 0xf2, 0x71, 0x34, 0x10,
	0xaa, 0x66, 0x9f, 0xd9, 0xae, 0x72, 0x65, 0x3b, 0xa5, 0x4c, 0x1c, 0xad, 0xe6, 0xca, 0x44, 0x46,
	0xfe, 0xd9, 0x20, 0x37, 0x64, 0x3f, 0xec, 0xff, 0xcc, 0xc6, 0xb7, 0x10, 0x09, 0x70, 0x4f, 0xbc,
	0x11, 0xe6, 0x87, 0xce, 0x2b, 0x07, 0xf9, 0x70, 0x89, 0x65, 0x64, 0x90, 0x50, 0xbf, 0x88, 0xce,
	0xf0, 0xca, 0x98, 0xdf, 0x99, 0x2c, 0x1d, 0x98, 0xc3, 0x25, 0x06, 0xd3, 0xf7, 0x56, 0x49, 0x2d,
	0x06, 0x09, 0xec, 0x5f, 0x2c, 0xe7, 0x5d, 0xbb, 0xa6, 0x24, 0x2a, 0x2a, 0x7c, 0x43, 0xab, 0xf0,
	0xe9, 0xb7, 0x64, 0x5d, 0xad, 0xea, 0x16, 0x09, 0xc2, 0xbd, 0xb9, 0x1d, 0xe2, 0x7c, 0x16, 0xd3,
	0x49, 0xe8, 0x53, 0x52, 0xf7, 0xce, 0x9a, 0x25, 0x69, 0xe7, 0xbd, 0x0a, 0x2f, 0x4a, 0x68, 0x0f,
	0x97, 0x58, 0x41, 0x4f, 0xf7, 0x09, 0x49, 0xf3, 0xf4, 0x55, 0x49, 0xff, 0xe9, 0xe2, 0xd5, 0x8a,
	0x54, 0xf7, 0x70, 0x89, 0x69, 0x94, 0xf4, 0x31, 0x59, 0x19, 0xa4, 0xd8, 0x69, 0x3b, 0x5f, 0xa8,
	0xc1, 0x52, 0x17, 0xe8, 0x70, 0x89, 0x29, 0x0a, 0xba, 0x47, 0xd6, 0x79, 0x71, 0x1f, 0xe3, 0x3b,
	0xc3, 0x82, 0x06, 0x58, 0x31, 0xeb, 0x70, 0x89, 0xe9, 0x44, 0xf4, 0x87, 0xa4, 0x36, 0x14, 0x91,
	0x3f, 0xb1, 0x7c, 0xa4, 0xfe, 0x68, 0xf1, 0xf6, 0x78, 0x91, 0x1d, 0x2e, 0x31, 0x39, 0x1f, 0x15,
	0x20, 0xbc, 0x91, 0x1f, 0xf2, 0xc4, 0xe7, 0xd6, 0x8b, 0xb7, 0x2a, 0x20, 0xf7, 0x02, 0x54, 0x40,
	0x4e, 0xb9, 0xb7, 0x45, 0x36, 0xd4, 0xf4, 0x1e, 0x8f, 0xf9, 0xd8, 0xfe, 0xae, 0xaa, 0xfa, 0xac,
	0x99, 0x3b, 0xcc, 0x18, 0xde, 0xf8, 0xfe, 0x86, 0x6f, 0x5f, 0x35, 0xfc, 0xf5, 0x8f, 0x28, 0xfa,
	0xdb, 0x5b, 0xd9, 0xec, 0x1d, 0xf5, 0x68, 0x58, 0x54, 0x10, 0xca, 0xf6, 0xf3, 0xaa, 0xb2, 0x99,
	0x5a, 0xe3, 0x70, 0x89, 0xcd, 0x12, 0xd3, 0x1f, 0xcd, 0x98, 0xff, 0xde, 0x5c, 0x0d, 0xe6, 0xe5,
	0xa5, 0x66, 0xfc, 0x83, 0x79, 0xc6, 0xff, 0x64, 0x11, 0xf9, 0x35, 0x1e, 0xf0, 0x75, 0xd9, 0x03,
	0x3e, 0x5c, 0xb4, 0xc4, 0x8c, 0xfd, 0x5b, 0x73, 0xec, 0x6f, 0x2f, 0xa2, 0x5d, 0x68, 0xfd, 0x1b,
	0x64, 0x53, 0x4d, 0x96, 0x0a, 0xb1, 0xff, 0xb6, 0x42, 0xa8, 0x6e, 0xfe, 0x7e, 0x1a, 0x0b, 0x3e,
	0x9e, 0x6d, 0x96, 0x1b, 0xd7, 0x37, 0xcb, 0x2b, 0xd7, 0x35, 0xcb, 0xab, 0xd7, 0x35, 0xcb, 0x97,
	0xdf, 0xd6, 0x2c, 0xaf, 0x5d, 0xd7, 0x2c, 0x5f, 0x29, 0x9a, 0xe5, 0x10, 0xc5, 0x44, 0x1c, 0x47,
	0x71, 0xd6, 0xa7, 0x44, 0x80, 0xb6, 0xc8, 0x46, 0xac, 0x49, 0x97, 0xb5, 0x35, 0x3e, 0x5a, 0xa4,
	0x38, 0x35, 0x8f, 0x95, 0xa8, 0x1e, 0xf8, 0x64, 0xb3, 0xf4, 0x83, 0x1b, 0x5d, 0x27, 0xab, 0x3d,
	0xf7, 0xb4, 0x73, 0x72, 0x74, 0x64, 0x2e, 0x29, 0xc0, 0x75, 0x7e, 0xea, 0x9a, 0x06, 0xdd, 0x20,
	0x6b, 0x3d, 0xf7, 0xb4, 0x7d, 0xdc, 0x38, 0x70, 0xcc, 0x0a, 0xbd, 0x41, 0xd6, 0x7b, 0xee, 0xe9,
	0xa1, 0xd3, 0x68, 0x1d, 0xb5, 0x3b, 0x8e, 0x59, 0x55, 0x88, 0x5e, 0xb7, 0xef, 0x1e, 0xb5, 0xfb,
	0xae, 0xb9, 0x4c, 0xb7, 0x08, 0xe9, 0xb9, 0xa7, 0xcd, 0xee, 0xf1, 0xb1, 0xd3, 0x71, 0xcd, 0xda,
	0x83, 0x2f, 0xb5, 0xd7, 0x34, 0xdc, 0x6a, 0x8b, 0x90, 0x3d, 0x97, 0xed, 0xbb, 0xa7, 0x4e, 0xeb,
	0xd1, 0x53, 0x73, 0x89, 0x9a, 0x64, 0x43, 0xc2, 0xc7, 0x8d, 0x83, 0x8e, 0xe3, 0x9a, 0xc6, 0x03,
	0x4e, 0x48, 0xd1, 0x31, 0xa6, 0x77, 0x89, 0xd5, 0x72, 0x4f, 0x5b, 0xee, 0xe9, 0xde, 0x49, 0xbf,
	0xdd, 0x71, 0xfa, 0xfd, 0x83, 0xc6, 0xb1, 0xc3, 0x9c, 0x5e, 0x97, 0xb9, 0xe6, 0x12, 0x7d, 0x8f,
	0xdc, 0x92, 0xa3, 0x6e, 0xb7, 0xd5, 0x78, 0x0e, 0x43, 0xad, 0x86, 0xdb, 0x30, 0x8d, 0x82, 0xec,
	0xa0, 0xf7, 0xb4, 0x79, 0xe8, 0x34, 0x9f, 0x4a, 0xb2, 0xfe, 0xc9, 0x91, 0x6b, 0x56, 0x1e, 0xfc,
	0x4b, 0x0d, 0xe8, 0xae, 0xb4, 0xe1, 0x41, 0x9c, 0x96, 0x7b, 0xc0, 0x9c, 0xd3, 0x4e, 0xd7, 0x61,
	0xcc, 0x5c, 0xa2, 0x94, 0x6c, 0x49, 0x04, 0x90, 0x37, 0xbb, 0x2d, 0xc7, 0x34, 0x8a, 0x49, 0xa0,
	0x83, 0xbe, 0x59, 0x29, 0x26, 0x1d, 0x77, 0x3b, 0xce, 0xf3, 0xee, 0xfe, 0xbe, 0x59, 0xa5, 0xb7,
	0xb0, 0x47, 0xca, 0x9c, 0xd3, 0x67, 0xed, 0xce, 0x9e, 0xe3, 0x02, 0x72, 0xb9, 0xbc, 0x1a, 0x32,
	0x5a, 0xa3, 0x16, 0x36, 0x9a, 0x14, 0x4e, 0x32, 0x78, 0xba, 0xe7, 0xb8, 0xe6, 0xca, 0xdc, 0x91,
	0x67, 0xed, 0x8e, 0xb9, 0x2a, 0x85, 0x9b, 0x19, 0xe9, 0x9f, 0x1c, 0xe3, 0xe8, 0x1a, 0xdd, 0x26,
	0xa6, 0x1c, 0x6d, 0xf7, 0x9b, 0xdd, 0xe3, 0xde, 0x91, 0xe3, 0x3a, 0x66, 0xbd, 0x60, 0x08, 0x68,
	0xfa, 0x6e, 0xc3, 0x75, 0x4c, 0x52, 0x4c, 0xd5, 0xb4, 0xb3, 0x4e, 0x77, 0xc8, 0x9d, 0x2b, 0xcb,
	0x4b, 0x59, 0x37, 0xe6, 0x8e, 0xb9, 0xed, 0x63, 0xa7, 0x6f, 0x6e, 0x16, 0xab, 0x75, 0xba, 0xcd,
	0xc3, 0xf6, 0x51, 0x8b, 0x39, 0x1d, 0xf3, 0x46, 0x21, 0x46, 0x86, 0x3b, 0x75, 0x18, 0xeb, 0x32,
	0xd3, 0xa4, 0x1f, 0x92, 0xf7, 0xe5, 0x48, 0xff, 0x64, 0x0f, 0x96, 0x3b, 0xed, 0x74, 0xdd, 0x9c,
	0xe3, 0x9b, 0x05, 0x61, 0xcb, 0xdd, 0x6b, 0xf4, 0x9d, 0x76, 0x4b, 0x11, 0x52, 0x7d, 0xa3, 0x6c,
	0xcc, 0xbc, 0x45, 0x3f, 0x20, 0xef, 0xcd, 0xcc, 0xef, 0x74, 0xd5, 0xe0, 0x36, 0xfd, 0x88, 0x7c,
	0x30, 0x33, 0x58, 0x5a, 0xf3, 0xb6, 0xf4, 0xa4, 0xd2, 0x84, 0x7d, 0xe6, 0x38, 0xe6, 0x1d, 0xfa,
	0x3e, 0xb9, 0x3d, 0x33, 0xc0, 0x9c, 0x7e, 0xaf, 0xdd, 0x31, 0xdf, 0x2b, 0x38, 0x6c, 0x77, 0xfe,
	0xa0, 0x71, 0x04, 0x24, 0x07, 0x9d, 0x93, 0xe3, 0xbe, 0x69, 0xd1, 0x9b, 0x64, 0x53, 0x8d, 0x34,
	0xbb, 0x9d, 0xaf, 0x1e, 0x7e, 0x65, 0xbe, 0x4f, 0x3f, 0x21, 0x1f, 0x95, 0xa5, 0x65, 0x4e, 0xcf,
	0x69, 0xb8, 0x4e, 0xeb, 0x34, 0x97, 0x79, 0xa7, 0xb0, 0x6c, 0x36, 0x29, 0x5b, 0xf9, 0x49, 0xcf,
	0xfc, 0xa0, 0xe0, 0xb1, 0xc0, 0x82, 0xc9, 0xef, 0x3e, 0x78, 0x4d, 0xd6, 0xb5, 0xdb, 0x0b, 0x76,
	0x6f, 0xba, 0xa7, 0x2e, 0x6b, 0x74, 0xfa, 0x47, 0x0d, 0xd7, 0x79, 0x64, 0x2e, 0x29, 0x54, 0x73,
	0x0f, 0x37, 0x6b, 0x74, 0x9e, 0x9b, 0x06, 0xdd, 0x24, 0xf5, 0x26, 0x1c, 0x11, 0x74, 0x44, 0xf4,
	0xe2, 0xa6, 0x7b, 0xda, 0xe8, 0x34, 0x8e, 0x9e, 0xff, 0xcc, 0xe9, 0xc1, 0x79, 0xaf, 0xc2, 0xe9,
	0x6f, 0xba, 0xa7, 0x07, 0x4e, 0xb7, 0xdd, 0x33, 0x6b, 0xd9, 0xb2, 0x4e, 0xf3, 0xb0, 0xdd, 0x69,
	0xf4, 0xdb, 0x0d, 0x73, 0xe5, 0xc1, 0x97, 0xe4, 0xf6, 0xdc, 0x86, 0x0a, 0x04, 0x91, 0x46, 0xdf,
	0x3d, 0x7d, 0xd2, 0x3b, 0x90, 0x11, 0x05, 0x80, 0x5e, 0xe7, 0xc0, 0x34, 0x1e, 0x3c, 0x24, 0x5b,
	0xe5, 0x54, 0x12, 0x42, 0x80, 0xdb, 0x6e, 0x1c, 0xe7, 0xac, 0x2d, 0xc1, 0xbe, 0x88, 0x79, 0xd2,
	0xdd, 0x33, 0x8d, 0x47, 0xff, 0x5a, 0x25, 0xdb, 0x4f, 0x30, 0xbe, 0x65, 0x41, 0x5d, 0xc4, 0x17,
	0xbe, 0x27, 0xe8, 0x09, 0xa9, 0xe7, 0x17, 0x22, 0xfd, 0xe4, 0x1d, 0xb2, 0xa7, 0x9d, 0x8f, 0x17,
	0xde, 0x30, 0xd9, 0x14, 0x7b, 0x89, 0x3e, 0x23, 0x9b, 0x42, 0x7f, 0x78, 0xa5, 0x1f, 0x2f, 0x5e,
	0x5a, 0x4d, 0xd9, 0x59, 0x18, 0x81, 0xd5, 0x04, 0x7b, 0xe9, 0xa1, 0x41, 0x4f, 0xc8, 0xfa, 0x50,
	0x14, 0x8f, 0x9f, 0xf6, 0x5b, 0x97, 0x4d, 0x76, 0x76, 0xdf, 0xb2, 0x6e, 0x62, 0x2f, 0xd1, 0x2e,
	0xa9, 0x0f, 0x45, 0xf6, 0xc8, 0xf7, 0xd6, 0x04, 0x70, 0xe7, 0x2d, 0x39, 0x82, 0xbd, 0x44, 0xff,
	0x58, 0x56, 0x43, 0x5a, 0x4e, 0xfd, 0xf1, 0x75, 0x89, 0x2e, 0xa2, 0x76, 0x3e, 0x7b, 0xcb, 0x1d,
	0x24, 0x6f, 0x62, 0xd0, 0xc3, 0xd9, 0x0a, 0xfe, 0x22, 0xfe, 0xbb, 0xff, 0x1b, 0x00, 0x00, 0xff,
	0xff, 0xf6, 0xda, 0x27, 0xe1, 0x32, 0x2e, 0x00, 0x00,
}

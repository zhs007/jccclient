// Code generated by protoc-gen-go. DO NOT EDIT.
// source: steepandcheap.proto

package jarviscrawlercore

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// SteepAndCheapMode - steep&cheap mode
type SteepAndCheapMode int32

const (
	// SACM_PRODUCTS - products
	SteepAndCheapMode_SACM_PRODUCTS SteepAndCheapMode = 0
	// SACM_PRODUCT - product
	SteepAndCheapMode_SACM_PRODUCT SteepAndCheapMode = 1
)

var SteepAndCheapMode_name = map[int32]string{
	0: "SACM_PRODUCTS",
	1: "SACM_PRODUCT",
}
var SteepAndCheapMode_value = map[string]int32{
	"SACM_PRODUCTS": 0,
	"SACM_PRODUCT":  1,
}

func (x SteepAndCheapMode) String() string {
	return proto.EnumName(SteepAndCheapMode_name, int32(x))
}
func (SteepAndCheapMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_steepandcheap_2c4387a2065d0e05, []int{0}
}

// SteepAndCheapSaleProductInfo - Steep&Cheap product infomation for sale
type SteepAndCheapSaleProductInfo struct {
	SaleCode             string   `protobuf:"bytes,1,opt,name=saleCode,proto3" json:"saleCode,omitempty"`
	Rank                 int32    `protobuf:"varint,2,opt,name=rank,proto3" json:"rank,omitempty"`
	Score                int32    `protobuf:"varint,3,opt,name=score,proto3" json:"score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SteepAndCheapSaleProductInfo) Reset()         { *m = SteepAndCheapSaleProductInfo{} }
func (m *SteepAndCheapSaleProductInfo) String() string { return proto.CompactTextString(m) }
func (*SteepAndCheapSaleProductInfo) ProtoMessage()    {}
func (*SteepAndCheapSaleProductInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_steepandcheap_2c4387a2065d0e05, []int{0}
}
func (m *SteepAndCheapSaleProductInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SteepAndCheapSaleProductInfo.Unmarshal(m, b)
}
func (m *SteepAndCheapSaleProductInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SteepAndCheapSaleProductInfo.Marshal(b, m, deterministic)
}
func (dst *SteepAndCheapSaleProductInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SteepAndCheapSaleProductInfo.Merge(dst, src)
}
func (m *SteepAndCheapSaleProductInfo) XXX_Size() int {
	return xxx_messageInfo_SteepAndCheapSaleProductInfo.Size(m)
}
func (m *SteepAndCheapSaleProductInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SteepAndCheapSaleProductInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SteepAndCheapSaleProductInfo proto.InternalMessageInfo

func (m *SteepAndCheapSaleProductInfo) GetSaleCode() string {
	if m != nil {
		return m.SaleCode
	}
	return ""
}

func (m *SteepAndCheapSaleProductInfo) GetRank() int32 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *SteepAndCheapSaleProductInfo) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

// SteepAndCheapColorSizeData - Steep&Cheap color size data
type SteepAndCheapColorSizeData struct {
	Size                 string   `protobuf:"bytes,1,opt,name=size,proto3" json:"size,omitempty"`
	SizeValid            bool     `protobuf:"varint,2,opt,name=sizeValid,proto3" json:"sizeValid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SteepAndCheapColorSizeData) Reset()         { *m = SteepAndCheapColorSizeData{} }
func (m *SteepAndCheapColorSizeData) String() string { return proto.CompactTextString(m) }
func (*SteepAndCheapColorSizeData) ProtoMessage()    {}
func (*SteepAndCheapColorSizeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_steepandcheap_2c4387a2065d0e05, []int{1}
}
func (m *SteepAndCheapColorSizeData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SteepAndCheapColorSizeData.Unmarshal(m, b)
}
func (m *SteepAndCheapColorSizeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SteepAndCheapColorSizeData.Marshal(b, m, deterministic)
}
func (dst *SteepAndCheapColorSizeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SteepAndCheapColorSizeData.Merge(dst, src)
}
func (m *SteepAndCheapColorSizeData) XXX_Size() int {
	return xxx_messageInfo_SteepAndCheapColorSizeData.Size(m)
}
func (m *SteepAndCheapColorSizeData) XXX_DiscardUnknown() {
	xxx_messageInfo_SteepAndCheapColorSizeData.DiscardUnknown(m)
}

var xxx_messageInfo_SteepAndCheapColorSizeData proto.InternalMessageInfo

func (m *SteepAndCheapColorSizeData) GetSize() string {
	if m != nil {
		return m.Size
	}
	return ""
}

func (m *SteepAndCheapColorSizeData) GetSizeValid() bool {
	if m != nil {
		return m.SizeValid
	}
	return false
}

// SteepAndCheapColorSize - Steep&Cheap color size
type SteepAndCheapColorSize struct {
	Color                string                        `protobuf:"bytes,1,opt,name=color,proto3" json:"color,omitempty"`
	Size                 []string                      `protobuf:"bytes,2,rep,name=size,proto3" json:"size,omitempty"`
	SizeValid            []bool                        `protobuf:"varint,3,rep,packed,name=sizeValid,proto3" json:"sizeValid,omitempty"`
	Data                 []*SteepAndCheapColorSizeData `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *SteepAndCheapColorSize) Reset()         { *m = SteepAndCheapColorSize{} }
func (m *SteepAndCheapColorSize) String() string { return proto.CompactTextString(m) }
func (*SteepAndCheapColorSize) ProtoMessage()    {}
func (*SteepAndCheapColorSize) Descriptor() ([]byte, []int) {
	return fileDescriptor_steepandcheap_2c4387a2065d0e05, []int{2}
}
func (m *SteepAndCheapColorSize) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SteepAndCheapColorSize.Unmarshal(m, b)
}
func (m *SteepAndCheapColorSize) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SteepAndCheapColorSize.Marshal(b, m, deterministic)
}
func (dst *SteepAndCheapColorSize) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SteepAndCheapColorSize.Merge(dst, src)
}
func (m *SteepAndCheapColorSize) XXX_Size() int {
	return xxx_messageInfo_SteepAndCheapColorSize.Size(m)
}
func (m *SteepAndCheapColorSize) XXX_DiscardUnknown() {
	xxx_messageInfo_SteepAndCheapColorSize.DiscardUnknown(m)
}

var xxx_messageInfo_SteepAndCheapColorSize proto.InternalMessageInfo

func (m *SteepAndCheapColorSize) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *SteepAndCheapColorSize) GetSize() []string {
	if m != nil {
		return m.Size
	}
	return nil
}

func (m *SteepAndCheapColorSize) GetSizeValid() []bool {
	if m != nil {
		return m.SizeValid
	}
	return nil
}

func (m *SteepAndCheapColorSize) GetData() []*SteepAndCheapColorSizeData {
	if m != nil {
		return m.Data
	}
	return nil
}

// SteepAndCheapColorSize2 - Steep&Cheap color size v2
type SteepAndCheapColorSize2 struct {
	Color                string   `protobuf:"bytes,1,opt,name=color,proto3" json:"color,omitempty"`
	Size                 string   `protobuf:"bytes,2,opt,name=size,proto3" json:"size,omitempty"`
	Price                float32  `protobuf:"fixed32,3,opt,name=price,proto3" json:"price,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SteepAndCheapColorSize2) Reset()         { *m = SteepAndCheapColorSize2{} }
func (m *SteepAndCheapColorSize2) String() string { return proto.CompactTextString(m) }
func (*SteepAndCheapColorSize2) ProtoMessage()    {}
func (*SteepAndCheapColorSize2) Descriptor() ([]byte, []int) {
	return fileDescriptor_steepandcheap_2c4387a2065d0e05, []int{3}
}
func (m *SteepAndCheapColorSize2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SteepAndCheapColorSize2.Unmarshal(m, b)
}
func (m *SteepAndCheapColorSize2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SteepAndCheapColorSize2.Marshal(b, m, deterministic)
}
func (dst *SteepAndCheapColorSize2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SteepAndCheapColorSize2.Merge(dst, src)
}
func (m *SteepAndCheapColorSize2) XXX_Size() int {
	return xxx_messageInfo_SteepAndCheapColorSize2.Size(m)
}
func (m *SteepAndCheapColorSize2) XXX_DiscardUnknown() {
	xxx_messageInfo_SteepAndCheapColorSize2.DiscardUnknown(m)
}

var xxx_messageInfo_SteepAndCheapColorSize2 proto.InternalMessageInfo

func (m *SteepAndCheapColorSize2) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *SteepAndCheapColorSize2) GetSize() string {
	if m != nil {
		return m.Size
	}
	return ""
}

func (m *SteepAndCheapColorSize2) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

// SteepAndCheapUser - Steep&Cheap user
type SteepAndCheapUser struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Photo                string   `protobuf:"bytes,2,opt,name=photo,proto3" json:"photo,omitempty"`
	Height               string   `protobuf:"bytes,3,opt,name=height,proto3" json:"height,omitempty"`
	Weight               string   `protobuf:"bytes,4,opt,name=weight,proto3" json:"weight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SteepAndCheapUser) Reset()         { *m = SteepAndCheapUser{} }
func (m *SteepAndCheapUser) String() string { return proto.CompactTextString(m) }
func (*SteepAndCheapUser) ProtoMessage()    {}
func (*SteepAndCheapUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_steepandcheap_2c4387a2065d0e05, []int{4}
}
func (m *SteepAndCheapUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SteepAndCheapUser.Unmarshal(m, b)
}
func (m *SteepAndCheapUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SteepAndCheapUser.Marshal(b, m, deterministic)
}
func (dst *SteepAndCheapUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SteepAndCheapUser.Merge(dst, src)
}
func (m *SteepAndCheapUser) XXX_Size() int {
	return xxx_messageInfo_SteepAndCheapUser.Size(m)
}
func (m *SteepAndCheapUser) XXX_DiscardUnknown() {
	xxx_messageInfo_SteepAndCheapUser.DiscardUnknown(m)
}

var xxx_messageInfo_SteepAndCheapUser proto.InternalMessageInfo

func (m *SteepAndCheapUser) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SteepAndCheapUser) GetPhoto() string {
	if m != nil {
		return m.Photo
	}
	return ""
}

func (m *SteepAndCheapUser) GetHeight() string {
	if m != nil {
		return m.Height
	}
	return ""
}

func (m *SteepAndCheapUser) GetWeight() string {
	if m != nil {
		return m.Weight
	}
	return ""
}

// SteepAndCheapReview - Steep&Cheap review
type SteepAndCheapReview struct {
	Title                string             `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	CreateTime           int64              `protobuf:"varint,2,opt,name=createTime,proto3" json:"createTime,omitempty"`
	Rating               int32              `protobuf:"varint,3,opt,name=rating,proto3" json:"rating,omitempty"`
	Familiarity          string             `protobuf:"bytes,4,opt,name=familiarity,proto3" json:"familiarity,omitempty"`
	Fit                  string             `protobuf:"bytes,5,opt,name=fit,proto3" json:"fit,omitempty"`
	SizeBought           string             `protobuf:"bytes,6,opt,name=sizeBought,proto3" json:"sizeBought,omitempty"`
	Imgs                 []string           `protobuf:"bytes,7,rep,name=imgs,proto3" json:"imgs,omitempty"`
	Description          string             `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	User                 *SteepAndCheapUser `protobuf:"bytes,9,opt,name=user,proto3" json:"user,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *SteepAndCheapReview) Reset()         { *m = SteepAndCheapReview{} }
func (m *SteepAndCheapReview) String() string { return proto.CompactTextString(m) }
func (*SteepAndCheapReview) ProtoMessage()    {}
func (*SteepAndCheapReview) Descriptor() ([]byte, []int) {
	return fileDescriptor_steepandcheap_2c4387a2065d0e05, []int{5}
}
func (m *SteepAndCheapReview) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SteepAndCheapReview.Unmarshal(m, b)
}
func (m *SteepAndCheapReview) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SteepAndCheapReview.Marshal(b, m, deterministic)
}
func (dst *SteepAndCheapReview) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SteepAndCheapReview.Merge(dst, src)
}
func (m *SteepAndCheapReview) XXX_Size() int {
	return xxx_messageInfo_SteepAndCheapReview.Size(m)
}
func (m *SteepAndCheapReview) XXX_DiscardUnknown() {
	xxx_messageInfo_SteepAndCheapReview.DiscardUnknown(m)
}

var xxx_messageInfo_SteepAndCheapReview proto.InternalMessageInfo

func (m *SteepAndCheapReview) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SteepAndCheapReview) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *SteepAndCheapReview) GetRating() int32 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *SteepAndCheapReview) GetFamiliarity() string {
	if m != nil {
		return m.Familiarity
	}
	return ""
}

func (m *SteepAndCheapReview) GetFit() string {
	if m != nil {
		return m.Fit
	}
	return ""
}

func (m *SteepAndCheapReview) GetSizeBought() string {
	if m != nil {
		return m.SizeBought
	}
	return ""
}

func (m *SteepAndCheapReview) GetImgs() []string {
	if m != nil {
		return m.Imgs
	}
	return nil
}

func (m *SteepAndCheapReview) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *SteepAndCheapReview) GetUser() *SteepAndCheapUser {
	if m != nil {
		return m.User
	}
	return nil
}

// SteepAndCheapHistory - Steep&Cheap history
type SteepAndCheapHistory struct {
	UpdateTime           int64                      `protobuf:"varint,1,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	Price                float32                    `protobuf:"fixed32,2,opt,name=price,proto3" json:"price,omitempty"`
	CurPrice             float32                    `protobuf:"fixed32,3,opt,name=curPrice,proto3" json:"curPrice,omitempty"`
	StockLevel           int32                      `protobuf:"varint,4,opt,name=stockLevel,proto3" json:"stockLevel,omitempty"`
	Reviews              int32                      `protobuf:"varint,5,opt,name=reviews,proto3" json:"reviews,omitempty"`
	RatingValue          float32                    `protobuf:"fixed32,6,opt,name=ratingValue,proto3" json:"ratingValue,omitempty"`
	Color                []*SteepAndCheapColorSize  `protobuf:"bytes,7,rep,name=color,proto3" json:"color,omitempty"` // Deprecated: Do not use.
	SaleCode             string                     `protobuf:"bytes,8,opt,name=saleCode,proto3" json:"saleCode,omitempty"`
	Offers               []*SteepAndCheapColorSize2 `protobuf:"bytes,9,rep,name=offers,proto3" json:"offers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *SteepAndCheapHistory) Reset()         { *m = SteepAndCheapHistory{} }
func (m *SteepAndCheapHistory) String() string { return proto.CompactTextString(m) }
func (*SteepAndCheapHistory) ProtoMessage()    {}
func (*SteepAndCheapHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_steepandcheap_2c4387a2065d0e05, []int{6}
}
func (m *SteepAndCheapHistory) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SteepAndCheapHistory.Unmarshal(m, b)
}
func (m *SteepAndCheapHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SteepAndCheapHistory.Marshal(b, m, deterministic)
}
func (dst *SteepAndCheapHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SteepAndCheapHistory.Merge(dst, src)
}
func (m *SteepAndCheapHistory) XXX_Size() int {
	return xxx_messageInfo_SteepAndCheapHistory.Size(m)
}
func (m *SteepAndCheapHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_SteepAndCheapHistory.DiscardUnknown(m)
}

var xxx_messageInfo_SteepAndCheapHistory proto.InternalMessageInfo

func (m *SteepAndCheapHistory) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *SteepAndCheapHistory) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *SteepAndCheapHistory) GetCurPrice() float32 {
	if m != nil {
		return m.CurPrice
	}
	return 0
}

func (m *SteepAndCheapHistory) GetStockLevel() int32 {
	if m != nil {
		return m.StockLevel
	}
	return 0
}

func (m *SteepAndCheapHistory) GetReviews() int32 {
	if m != nil {
		return m.Reviews
	}
	return 0
}

func (m *SteepAndCheapHistory) GetRatingValue() float32 {
	if m != nil {
		return m.RatingValue
	}
	return 0
}

// Deprecated: Do not use.
func (m *SteepAndCheapHistory) GetColor() []*SteepAndCheapColorSize {
	if m != nil {
		return m.Color
	}
	return nil
}

func (m *SteepAndCheapHistory) GetSaleCode() string {
	if m != nil {
		return m.SaleCode
	}
	return ""
}

func (m *SteepAndCheapHistory) GetOffers() []*SteepAndCheapColorSize2 {
	if m != nil {
		return m.Offers
	}
	return nil
}

// SteepAndCheapProduct - Steep&Cheap product
type SteepAndCheapProduct struct {
	BrandName            string                          `protobuf:"bytes,1,opt,name=brandName,proto3" json:"brandName,omitempty"`
	Skuid                string                          `protobuf:"bytes,2,opt,name=skuid,proto3" json:"skuid,omitempty"`
	ProductName          []string                        `protobuf:"bytes,3,rep,name=productName,proto3" json:"productName,omitempty"`
	StockLevel           int32                           `protobuf:"varint,4,opt,name=stockLevel,proto3" json:"stockLevel,omitempty"`
	Price                float32                         `protobuf:"fixed32,5,opt,name=price,proto3" json:"price,omitempty"`
	CurPrice             float32                         `protobuf:"fixed32,6,opt,name=curPrice,proto3" json:"curPrice,omitempty"`
	Url                  string                          `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`
	Reviews              int32                           `protobuf:"varint,8,opt,name=reviews,proto3" json:"reviews,omitempty"`
	RatingValue          float32                         `protobuf:"fixed32,9,opt,name=ratingValue,proto3" json:"ratingValue,omitempty"`
	Currency             string                          `protobuf:"bytes,10,opt,name=currency,proto3" json:"currency,omitempty"`
	IsNew                bool                            `protobuf:"varint,11,opt,name=isNew,proto3" json:"isNew,omitempty"`
	Category             []string                        `protobuf:"bytes,12,rep,name=category,proto3" json:"category,omitempty"`
	Imgs                 []string                        `protobuf:"bytes,13,rep,name=imgs,proto3" json:"imgs,omitempty"`
	Color                []*SteepAndCheapColorSize       `protobuf:"bytes,14,rep,name=color,proto3" json:"color,omitempty"` // Deprecated: Do not use.
	Material             string                          `protobuf:"bytes,15,opt,name=material,proto3" json:"material,omitempty"`
	Fit                  string                          `protobuf:"bytes,16,opt,name=fit,proto3" json:"fit,omitempty"`
	Style                string                          `protobuf:"bytes,17,opt,name=style,proto3" json:"style,omitempty"`
	RatingUPF            string                          `protobuf:"bytes,18,opt,name=ratingUPF,proto3" json:"ratingUPF,omitempty"`
	ClaimedWeight        float32                         `protobuf:"fixed32,19,opt,name=claimedWeight,proto3" json:"claimedWeight,omitempty"`
	WeightUnit           string                          `protobuf:"bytes,20,opt,name=weightUnit,proto3" json:"weightUnit,omitempty"`
	RecommendedUse       []string                        `protobuf:"bytes,21,rep,name=recommendedUse,proto3" json:"recommendedUse,omitempty"`
	ManufacturerWarranty string                          `protobuf:"bytes,22,opt,name=manufacturerWarranty,proto3" json:"manufacturerWarranty,omitempty"`
	StrWeight            string                          `protobuf:"bytes,23,opt,name=strWeight,proto3" json:"strWeight,omitempty"`
	Infomation           string                          `protobuf:"bytes,24,opt,name=infomation,proto3" json:"infomation,omitempty"`
	SizeChart            string                          `protobuf:"bytes,25,opt,name=sizeChart,proto3" json:"sizeChart,omitempty"`
	LstReview            []*SteepAndCheapReview          `protobuf:"bytes,26,rep,name=lstReview,proto3" json:"lstReview,omitempty"`
	LinkProducts         []string                        `protobuf:"bytes,27,rep,name=linkProducts,proto3" json:"linkProducts,omitempty"`
	LstHistory           []*SteepAndCheapHistory         `protobuf:"bytes,28,rep,name=lstHistory,proto3" json:"lstHistory,omitempty"`
	LstSale              []*SteepAndCheapSaleProductInfo `protobuf:"bytes,29,rep,name=lstSale,proto3" json:"lstSale,omitempty"`
	LastUpdatedTime      int64                           `protobuf:"varint,30,opt,name=lastUpdatedTime,proto3" json:"lastUpdatedTime,omitempty"`
	MinPrice             int64                           `protobuf:"varint,31,opt,name=minPrice,proto3" json:"minPrice,omitempty"`
	MaxPrice             int64                           `protobuf:"varint,32,opt,name=maxPrice,proto3" json:"maxPrice,omitempty"`
	Offers               []*SteepAndCheapColorSize2      `protobuf:"bytes,33,rep,name=offers,proto3" json:"offers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *SteepAndCheapProduct) Reset()         { *m = SteepAndCheapProduct{} }
func (m *SteepAndCheapProduct) String() string { return proto.CompactTextString(m) }
func (*SteepAndCheapProduct) ProtoMessage()    {}
func (*SteepAndCheapProduct) Descriptor() ([]byte, []int) {
	return fileDescriptor_steepandcheap_2c4387a2065d0e05, []int{7}
}
func (m *SteepAndCheapProduct) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SteepAndCheapProduct.Unmarshal(m, b)
}
func (m *SteepAndCheapProduct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SteepAndCheapProduct.Marshal(b, m, deterministic)
}
func (dst *SteepAndCheapProduct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SteepAndCheapProduct.Merge(dst, src)
}
func (m *SteepAndCheapProduct) XXX_Size() int {
	return xxx_messageInfo_SteepAndCheapProduct.Size(m)
}
func (m *SteepAndCheapProduct) XXX_DiscardUnknown() {
	xxx_messageInfo_SteepAndCheapProduct.DiscardUnknown(m)
}

var xxx_messageInfo_SteepAndCheapProduct proto.InternalMessageInfo

func (m *SteepAndCheapProduct) GetBrandName() string {
	if m != nil {
		return m.BrandName
	}
	return ""
}

func (m *SteepAndCheapProduct) GetSkuid() string {
	if m != nil {
		return m.Skuid
	}
	return ""
}

func (m *SteepAndCheapProduct) GetProductName() []string {
	if m != nil {
		return m.ProductName
	}
	return nil
}

func (m *SteepAndCheapProduct) GetStockLevel() int32 {
	if m != nil {
		return m.StockLevel
	}
	return 0
}

func (m *SteepAndCheapProduct) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *SteepAndCheapProduct) GetCurPrice() float32 {
	if m != nil {
		return m.CurPrice
	}
	return 0
}

func (m *SteepAndCheapProduct) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *SteepAndCheapProduct) GetReviews() int32 {
	if m != nil {
		return m.Reviews
	}
	return 0
}

func (m *SteepAndCheapProduct) GetRatingValue() float32 {
	if m != nil {
		return m.RatingValue
	}
	return 0
}

func (m *SteepAndCheapProduct) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *SteepAndCheapProduct) GetIsNew() bool {
	if m != nil {
		return m.IsNew
	}
	return false
}

func (m *SteepAndCheapProduct) GetCategory() []string {
	if m != nil {
		return m.Category
	}
	return nil
}

func (m *SteepAndCheapProduct) GetImgs() []string {
	if m != nil {
		return m.Imgs
	}
	return nil
}

// Deprecated: Do not use.
func (m *SteepAndCheapProduct) GetColor() []*SteepAndCheapColorSize {
	if m != nil {
		return m.Color
	}
	return nil
}

func (m *SteepAndCheapProduct) GetMaterial() string {
	if m != nil {
		return m.Material
	}
	return ""
}

func (m *SteepAndCheapProduct) GetFit() string {
	if m != nil {
		return m.Fit
	}
	return ""
}

func (m *SteepAndCheapProduct) GetStyle() string {
	if m != nil {
		return m.Style
	}
	return ""
}

func (m *SteepAndCheapProduct) GetRatingUPF() string {
	if m != nil {
		return m.RatingUPF
	}
	return ""
}

func (m *SteepAndCheapProduct) GetClaimedWeight() float32 {
	if m != nil {
		return m.ClaimedWeight
	}
	return 0
}

func (m *SteepAndCheapProduct) GetWeightUnit() string {
	if m != nil {
		return m.WeightUnit
	}
	return ""
}

func (m *SteepAndCheapProduct) GetRecommendedUse() []string {
	if m != nil {
		return m.RecommendedUse
	}
	return nil
}

func (m *SteepAndCheapProduct) GetManufacturerWarranty() string {
	if m != nil {
		return m.ManufacturerWarranty
	}
	return ""
}

func (m *SteepAndCheapProduct) GetStrWeight() string {
	if m != nil {
		return m.StrWeight
	}
	return ""
}

func (m *SteepAndCheapProduct) GetInfomation() string {
	if m != nil {
		return m.Infomation
	}
	return ""
}

func (m *SteepAndCheapProduct) GetSizeChart() string {
	if m != nil {
		return m.SizeChart
	}
	return ""
}

func (m *SteepAndCheapProduct) GetLstReview() []*SteepAndCheapReview {
	if m != nil {
		return m.LstReview
	}
	return nil
}

func (m *SteepAndCheapProduct) GetLinkProducts() []string {
	if m != nil {
		return m.LinkProducts
	}
	return nil
}

func (m *SteepAndCheapProduct) GetLstHistory() []*SteepAndCheapHistory {
	if m != nil {
		return m.LstHistory
	}
	return nil
}

func (m *SteepAndCheapProduct) GetLstSale() []*SteepAndCheapSaleProductInfo {
	if m != nil {
		return m.LstSale
	}
	return nil
}

func (m *SteepAndCheapProduct) GetLastUpdatedTime() int64 {
	if m != nil {
		return m.LastUpdatedTime
	}
	return 0
}

func (m *SteepAndCheapProduct) GetMinPrice() int64 {
	if m != nil {
		return m.MinPrice
	}
	return 0
}

func (m *SteepAndCheapProduct) GetMaxPrice() int64 {
	if m != nil {
		return m.MaxPrice
	}
	return 0
}

func (m *SteepAndCheapProduct) GetOffers() []*SteepAndCheapColorSize2 {
	if m != nil {
		return m.Offers
	}
	return nil
}

// SteepAndCheapProducts - Steep&Cheap products
type SteepAndCheapProducts struct {
	MaxPage              int32                   `protobuf:"varint,1,opt,name=maxPage,proto3" json:"maxPage,omitempty"`
	Products             []*SteepAndCheapProduct `protobuf:"bytes,2,rep,name=products,proto3" json:"products,omitempty"`
	Name                 string                  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *SteepAndCheapProducts) Reset()         { *m = SteepAndCheapProducts{} }
func (m *SteepAndCheapProducts) String() string { return proto.CompactTextString(m) }
func (*SteepAndCheapProducts) ProtoMessage()    {}
func (*SteepAndCheapProducts) Descriptor() ([]byte, []int) {
	return fileDescriptor_steepandcheap_2c4387a2065d0e05, []int{8}
}
func (m *SteepAndCheapProducts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SteepAndCheapProducts.Unmarshal(m, b)
}
func (m *SteepAndCheapProducts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SteepAndCheapProducts.Marshal(b, m, deterministic)
}
func (dst *SteepAndCheapProducts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SteepAndCheapProducts.Merge(dst, src)
}
func (m *SteepAndCheapProducts) XXX_Size() int {
	return xxx_messageInfo_SteepAndCheapProducts.Size(m)
}
func (m *SteepAndCheapProducts) XXX_DiscardUnknown() {
	xxx_messageInfo_SteepAndCheapProducts.DiscardUnknown(m)
}

var xxx_messageInfo_SteepAndCheapProducts proto.InternalMessageInfo

func (m *SteepAndCheapProducts) GetMaxPage() int32 {
	if m != nil {
		return m.MaxPage
	}
	return 0
}

func (m *SteepAndCheapProducts) GetProducts() []*SteepAndCheapProduct {
	if m != nil {
		return m.Products
	}
	return nil
}

func (m *SteepAndCheapProducts) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// RequestSteepAndCheap - request steep&cheap
type RequestSteepAndCheap struct {
	Mode                 SteepAndCheapMode `protobuf:"varint,1,opt,name=mode,proto3,enum=jarviscrawlercore.SteepAndCheapMode" json:"mode,omitempty"`
	Url                  string            `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Page                 int32             `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RequestSteepAndCheap) Reset()         { *m = RequestSteepAndCheap{} }
func (m *RequestSteepAndCheap) String() string { return proto.CompactTextString(m) }
func (*RequestSteepAndCheap) ProtoMessage()    {}
func (*RequestSteepAndCheap) Descriptor() ([]byte, []int) {
	return fileDescriptor_steepandcheap_2c4387a2065d0e05, []int{9}
}
func (m *RequestSteepAndCheap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestSteepAndCheap.Unmarshal(m, b)
}
func (m *RequestSteepAndCheap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestSteepAndCheap.Marshal(b, m, deterministic)
}
func (dst *RequestSteepAndCheap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSteepAndCheap.Merge(dst, src)
}
func (m *RequestSteepAndCheap) XXX_Size() int {
	return xxx_messageInfo_RequestSteepAndCheap.Size(m)
}
func (m *RequestSteepAndCheap) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSteepAndCheap.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSteepAndCheap proto.InternalMessageInfo

func (m *RequestSteepAndCheap) GetMode() SteepAndCheapMode {
	if m != nil {
		return m.Mode
	}
	return SteepAndCheapMode_SACM_PRODUCTS
}

func (m *RequestSteepAndCheap) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *RequestSteepAndCheap) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

// ReplySteepAndCheap - reply steep&cheap
type ReplySteepAndCheap struct {
	Mode SteepAndCheapMode `protobuf:"varint,1,opt,name=mode,proto3,enum=jarviscrawlercore.SteepAndCheapMode" json:"mode,omitempty"`
	// Types that are valid to be assigned to Reply:
	//	*ReplySteepAndCheap_Products
	//	*ReplySteepAndCheap_Product
	Reply                isReplySteepAndCheap_Reply `protobuf_oneof:"reply"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ReplySteepAndCheap) Reset()         { *m = ReplySteepAndCheap{} }
func (m *ReplySteepAndCheap) String() string { return proto.CompactTextString(m) }
func (*ReplySteepAndCheap) ProtoMessage()    {}
func (*ReplySteepAndCheap) Descriptor() ([]byte, []int) {
	return fileDescriptor_steepandcheap_2c4387a2065d0e05, []int{10}
}
func (m *ReplySteepAndCheap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplySteepAndCheap.Unmarshal(m, b)
}
func (m *ReplySteepAndCheap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplySteepAndCheap.Marshal(b, m, deterministic)
}
func (dst *ReplySteepAndCheap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplySteepAndCheap.Merge(dst, src)
}
func (m *ReplySteepAndCheap) XXX_Size() int {
	return xxx_messageInfo_ReplySteepAndCheap.Size(m)
}
func (m *ReplySteepAndCheap) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplySteepAndCheap.DiscardUnknown(m)
}

var xxx_messageInfo_ReplySteepAndCheap proto.InternalMessageInfo

type isReplySteepAndCheap_Reply interface {
	isReplySteepAndCheap_Reply()
}

type ReplySteepAndCheap_Products struct {
	Products *SteepAndCheapProducts `protobuf:"bytes,100,opt,name=products,proto3,oneof"`
}
type ReplySteepAndCheap_Product struct {
	Product *SteepAndCheapProduct `protobuf:"bytes,101,opt,name=product,proto3,oneof"`
}

func (*ReplySteepAndCheap_Products) isReplySteepAndCheap_Reply() {}
func (*ReplySteepAndCheap_Product) isReplySteepAndCheap_Reply()  {}

func (m *ReplySteepAndCheap) GetReply() isReplySteepAndCheap_Reply {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *ReplySteepAndCheap) GetMode() SteepAndCheapMode {
	if m != nil {
		return m.Mode
	}
	return SteepAndCheapMode_SACM_PRODUCTS
}

func (m *ReplySteepAndCheap) GetProducts() *SteepAndCheapProducts {
	if x, ok := m.GetReply().(*ReplySteepAndCheap_Products); ok {
		return x.Products
	}
	return nil
}

func (m *ReplySteepAndCheap) GetProduct() *SteepAndCheapProduct {
	if x, ok := m.GetReply().(*ReplySteepAndCheap_Product); ok {
		return x.Product
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ReplySteepAndCheap) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ReplySteepAndCheap_OneofMarshaler, _ReplySteepAndCheap_OneofUnmarshaler, _ReplySteepAndCheap_OneofSizer, []interface{}{
		(*ReplySteepAndCheap_Products)(nil),
		(*ReplySteepAndCheap_Product)(nil),
	}
}

func _ReplySteepAndCheap_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ReplySteepAndCheap)
	// reply
	switch x := m.Reply.(type) {
	case *ReplySteepAndCheap_Products:
		b.EncodeVarint(100<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Products); err != nil {
			return err
		}
	case *ReplySteepAndCheap_Product:
		b.EncodeVarint(101<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Product); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplySteepAndCheap.Reply has unexpected type %T", x)
	}
	return nil
}

func _ReplySteepAndCheap_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ReplySteepAndCheap)
	switch tag {
	case 100: // reply.products
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SteepAndCheapProducts)
		err := b.DecodeMessage(msg)
		m.Reply = &ReplySteepAndCheap_Products{msg}
		return true, err
	case 101: // reply.product
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SteepAndCheapProduct)
		err := b.DecodeMessage(msg)
		m.Reply = &ReplySteepAndCheap_Product{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ReplySteepAndCheap_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ReplySteepAndCheap)
	// reply
	switch x := m.Reply.(type) {
	case *ReplySteepAndCheap_Products:
		s := proto.Size(x.Products)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplySteepAndCheap_Product:
		s := proto.Size(x.Product)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*SteepAndCheapSaleProductInfo)(nil), "jarviscrawlercore.SteepAndCheapSaleProductInfo")
	proto.RegisterType((*SteepAndCheapColorSizeData)(nil), "jarviscrawlercore.SteepAndCheapColorSizeData")
	proto.RegisterType((*SteepAndCheapColorSize)(nil), "jarviscrawlercore.SteepAndCheapColorSize")
	proto.RegisterType((*SteepAndCheapColorSize2)(nil), "jarviscrawlercore.SteepAndCheapColorSize2")
	proto.RegisterType((*SteepAndCheapUser)(nil), "jarviscrawlercore.SteepAndCheapUser")
	proto.RegisterType((*SteepAndCheapReview)(nil), "jarviscrawlercore.SteepAndCheapReview")
	proto.RegisterType((*SteepAndCheapHistory)(nil), "jarviscrawlercore.SteepAndCheapHistory")
	proto.RegisterType((*SteepAndCheapProduct)(nil), "jarviscrawlercore.SteepAndCheapProduct")
	proto.RegisterType((*SteepAndCheapProducts)(nil), "jarviscrawlercore.SteepAndCheapProducts")
	proto.RegisterType((*RequestSteepAndCheap)(nil), "jarviscrawlercore.RequestSteepAndCheap")
	proto.RegisterType((*ReplySteepAndCheap)(nil), "jarviscrawlercore.ReplySteepAndCheap")
	proto.RegisterEnum("jarviscrawlercore.SteepAndCheapMode", SteepAndCheapMode_name, SteepAndCheapMode_value)
}

func init() { proto.RegisterFile("steepandcheap.proto", fileDescriptor_steepandcheap_2c4387a2065d0e05) }

var fileDescriptor_steepandcheap_2c4387a2065d0e05 = []byte{
	// 1103 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcb, 0x6e, 0x1b, 0x37,
	0x17, 0xb6, 0x6e, 0x96, 0x74, 0x7c, 0x89, 0x4c, 0x2b, 0x0e, 0x7f, 0xff, 0x6e, 0xaa, 0x0e, 0x82,
	0x54, 0x0d, 0x50, 0x17, 0x70, 0x37, 0xd9, 0xda, 0x32, 0x52, 0x07, 0x68, 0x5c, 0x83, 0x8e, 0x12,
	0x74, 0x55, 0x30, 0x33, 0x94, 0xcd, 0x7a, 0x2e, 0x2a, 0xc9, 0xb1, 0xab, 0x3c, 0x42, 0x5f, 0xa3,
	0x8b, 0x3e, 0x42, 0x5f, 0xa8, 0x9b, 0xbe, 0x45, 0xc1, 0xc3, 0xb9, 0x49, 0x71, 0x2a, 0xa1, 0xed,
	0x6a, 0x78, 0xbe, 0x99, 0x73, 0xe1, 0x77, 0x0e, 0xbf, 0x21, 0xec, 0x6a, 0x23, 0xc4, 0x94, 0xc7,
	0x81, 0x7f, 0x2d, 0xf8, 0xf4, 0x70, 0xaa, 0x12, 0x93, 0x90, 0x9d, 0x1f, 0xb9, 0xba, 0x95, 0xda,
	0x57, 0xfc, 0x2e, 0x14, 0xca, 0x4f, 0x94, 0xf0, 0x02, 0x38, 0xb8, 0xb4, 0x5f, 0x1e, 0xc7, 0xc1,
	0xc8, 0x7e, 0x79, 0xc9, 0x43, 0x71, 0xa1, 0x92, 0x20, 0xf5, 0xcd, 0xcb, 0x78, 0x92, 0x90, 0x7d,
	0xe8, 0x68, 0x1e, 0x8a, 0x51, 0x12, 0x08, 0x5a, 0x1b, 0xd4, 0x86, 0x5d, 0x56, 0xd8, 0x84, 0x40,
	0x53, 0xf1, 0xf8, 0x86, 0xd6, 0x07, 0xb5, 0x61, 0x8b, 0xe1, 0x9a, 0xf4, 0xa1, 0xa5, 0x6d, 0x60,
	0xda, 0x40, 0xd0, 0x19, 0xde, 0x39, 0xec, 0xcf, 0x65, 0x19, 0x25, 0x61, 0xa2, 0x2e, 0xe5, 0x7b,
	0x71, 0xca, 0x0d, 0xb7, 0x71, 0xb4, 0x7c, 0x9f, 0xc7, 0xc7, 0x35, 0x39, 0x80, 0xae, 0x7d, 0xbe,
	0xe1, 0xa1, 0x0c, 0x30, 0x41, 0x87, 0x95, 0x80, 0xf7, 0x6b, 0x0d, 0xf6, 0xee, 0x0f, 0x68, 0x0b,
	0xf0, 0xad, 0x91, 0x45, 0x73, 0x46, 0x91, 0xa2, 0x3e, 0x68, 0xdc, 0x9f, 0xa2, 0x31, 0x68, 0xcc,
	0xa5, 0x20, 0xc7, 0xd0, 0x0c, 0xb8, 0xe1, 0xb4, 0x39, 0x68, 0x0c, 0x37, 0x8e, 0xbe, 0x3c, 0xfc,
	0x80, 0xba, 0xc3, 0x8f, 0xef, 0x88, 0xa1, 0xab, 0xf7, 0x3d, 0x3c, 0xba, 0xff, 0x9b, 0xa3, 0xa5,
	0x55, 0x96, 0x44, 0xf4, 0xa1, 0x35, 0x55, 0xd2, 0x77, 0x84, 0xd6, 0x99, 0x33, 0xbc, 0x08, 0x76,
	0xe6, 0x42, 0x8f, 0xb5, 0x40, 0xf7, 0x98, 0x47, 0x05, 0x8f, 0x76, 0x8d, 0xee, 0xd7, 0x89, 0x49,
	0xb2, 0x98, 0xce, 0x20, 0x7b, 0xb0, 0x7e, 0x2d, 0xe4, 0xd5, 0xb5, 0xc1, 0xa8, 0x5d, 0x96, 0x59,
	0x16, 0xbf, 0x73, 0x78, 0xd3, 0xe1, 0xce, 0xf2, 0x7e, 0xab, 0xc3, 0xee, 0x5c, 0x3e, 0x26, 0x6e,
	0xa5, 0xb8, 0xb3, 0xd1, 0x8d, 0x34, 0x61, 0x9e, 0xd2, 0x19, 0xe4, 0x31, 0x80, 0xaf, 0x04, 0x37,
	0xe2, 0xb5, 0x8c, 0xdc, 0x66, 0x1a, 0xac, 0x82, 0xd8, 0x2c, 0x8a, 0x1b, 0x19, 0x5f, 0x65, 0x43,
	0x92, 0x59, 0x64, 0x00, 0x1b, 0x13, 0x1e, 0xc9, 0x50, 0x72, 0x25, 0xcd, 0x2c, 0x2b, 0xa1, 0x0a,
	0x91, 0x1e, 0x34, 0x26, 0xd2, 0xd0, 0x16, 0xbe, 0xb1, 0x4b, 0x9b, 0xcb, 0xd2, 0x74, 0x92, 0xa4,
	0xb6, 0xea, 0x75, 0x7c, 0x51, 0x41, 0x2c, 0x27, 0x32, 0xba, 0xd2, 0xb4, 0xed, 0x1a, 0x6f, 0xd7,
	0x36, 0x4f, 0x20, 0xb4, 0xaf, 0xe4, 0xd4, 0xc8, 0x24, 0xa6, 0x1d, 0x97, 0xa7, 0x02, 0x91, 0xe7,
	0xd0, 0x4c, 0xb5, 0x50, 0xb4, 0x3b, 0xa8, 0x0d, 0x37, 0x8e, 0x9e, 0x2c, 0x6b, 0xbe, 0x65, 0x9f,
	0xa1, 0x87, 0xf7, 0x67, 0x1d, 0xfa, 0x73, 0xef, 0xce, 0xa4, 0x36, 0x89, 0x9a, 0xd9, 0x42, 0xd3,
	0x69, 0x90, 0x93, 0x52, 0x73, 0xa4, 0x94, 0x48, 0xd9, 0xe7, 0x7a, 0xa5, 0xcf, 0xf6, 0xf8, 0xf9,
	0xa9, 0xba, 0xa8, 0x0c, 0x40, 0x61, 0xe3, 0xd6, 0x4d, 0xe2, 0xdf, 0x7c, 0x2b, 0x6e, 0x45, 0x88,
	0x6c, 0xb5, 0x58, 0x05, 0x21, 0x14, 0xda, 0x0a, 0xdb, 0xa4, 0x91, 0xb0, 0x16, 0xcb, 0x4d, 0x4b,
	0x80, 0xa3, 0xfc, 0x0d, 0x0f, 0x53, 0x81, 0xac, 0xd5, 0x59, 0x15, 0x22, 0xa3, 0x7c, 0x3e, 0xdb,
	0x38, 0xfe, 0x5f, 0xac, 0x3c, 0xfe, 0x27, 0x75, 0x5a, 0xcb, 0xc7, 0xb9, 0xaa, 0x1d, 0x9d, 0x05,
	0xed, 0x38, 0x81, 0xf5, 0x64, 0x32, 0x11, 0x4a, 0xd3, 0x2e, 0x66, 0x78, 0xb6, 0x72, 0x86, 0x23,
	0x96, 0x79, 0x7a, 0xbf, 0x77, 0x17, 0xb8, 0xce, 0x84, 0xcb, 0x9e, 0xec, 0x77, 0x8a, 0xc7, 0xc1,
	0x79, 0x79, 0x1a, 0x4a, 0x00, 0x25, 0xea, 0x26, 0xcd, 0x64, 0xa5, 0xcb, 0x9c, 0x61, 0x39, 0x99,
	0x3a, 0x77, 0xf4, 0x6a, 0xe0, 0xbc, 0x54, 0xa1, 0xa5, 0x7c, 0x17, 0x1d, 0x6c, 0x7d, 0xac, 0x83,
	0xeb, 0x0b, 0x1d, 0xec, 0x41, 0x23, 0x55, 0x21, 0x6d, 0xbb, 0x71, 0x4e, 0xd5, 0x5c, 0xcf, 0x3a,
	0x7f, 0xdb, 0xb3, 0xee, 0x87, 0x3d, 0x73, 0x99, 0x94, 0x88, 0xfd, 0x19, 0x05, 0x47, 0x77, 0x6e,
	0xdb, 0xda, 0xa4, 0x3e, 0x17, 0x77, 0x74, 0x03, 0xa5, 0xd4, 0x19, 0xe8, 0xc1, 0x8d, 0xb8, 0x4a,
	0xd4, 0x8c, 0x6e, 0xe2, 0x86, 0x0b, 0xbb, 0x38, 0x38, 0x5b, 0x95, 0x83, 0x53, 0x4c, 0xc5, 0xf6,
	0xbf, 0x9b, 0x8a, 0x88, 0x1b, 0xa1, 0x24, 0x0f, 0xe9, 0x03, 0x57, 0x66, 0x6e, 0xe7, 0xe7, 0xbb,
	0x57, 0x9e, 0x6f, 0xdb, 0x2c, 0x33, 0x0b, 0x05, 0xdd, 0xc9, 0x9a, 0x65, 0x0d, 0xdb, 0x60, 0xb7,
	0xf3, 0xf1, 0xc5, 0x0b, 0x4a, 0x5c, 0x83, 0x0b, 0x80, 0x3c, 0x81, 0x2d, 0x3f, 0xe4, 0x32, 0x12,
	0xc1, 0x5b, 0x27, 0x66, 0xbb, 0x48, 0xd6, 0x3c, 0x68, 0xdb, 0xe9, 0xd4, 0x6d, 0x1c, 0x4b, 0x43,
	0xfb, 0x4e, 0x39, 0x4a, 0x84, 0x3c, 0x85, 0x6d, 0x25, 0xfc, 0x24, 0x8a, 0x44, 0x1c, 0x88, 0x60,
	0xac, 0x05, 0x7d, 0x88, 0x54, 0x2c, 0xa0, 0xe4, 0x08, 0xfa, 0x11, 0x8f, 0xd3, 0x09, 0xf7, 0x4d,
	0xaa, 0x84, 0x7a, 0xcb, 0x95, 0xe2, 0xb1, 0x99, 0xd1, 0x3d, 0x8c, 0x78, 0xef, 0x3b, 0xfc, 0xf5,
	0x18, 0x95, 0x55, 0xf7, 0xc8, 0xd5, 0x5f, 0x00, 0xb6, 0x32, 0x19, 0x4f, 0x92, 0x88, 0xa3, 0x3c,
	0x51, 0x57, 0x59, 0x89, 0xe4, 0x3f, 0xae, 0xd1, 0x35, 0x57, 0x86, 0xfe, 0x2f, 0xf3, 0xce, 0x01,
	0x72, 0x0a, 0xdd, 0x50, 0x1b, 0x27, 0xd0, 0x74, 0x1f, 0x1b, 0xf5, 0x74, 0x59, 0xa3, 0xdc, 0xd7,
	0xac, 0x74, 0x24, 0x1e, 0x6c, 0x86, 0x32, 0xbe, 0xc9, 0x4e, 0x94, 0xa6, 0xff, 0xc7, 0xbd, 0xcf,
	0x61, 0xe4, 0x1b, 0x80, 0x50, 0x9b, 0x4c, 0xe0, 0xe8, 0x01, 0xa6, 0xfa, 0x7c, 0x59, 0xaa, 0xec,
	0x73, 0x56, 0x71, 0x25, 0x2f, 0xa1, 0x1d, 0x6a, 0x63, 0xaf, 0x1e, 0xf4, 0x13, 0x8c, 0xf2, 0xd5,
	0xb2, 0x28, 0x0b, 0xd7, 0x14, 0x96, 0xfb, 0x93, 0x21, 0x3c, 0x08, 0xb9, 0x36, 0x63, 0x14, 0xd6,
	0x00, 0xb5, 0xf6, 0x31, 0x6a, 0xed, 0x22, 0x8c, 0x73, 0x28, 0x63, 0x77, 0x30, 0x3f, 0xc5, 0x4f,
	0x0a, 0xdb, 0xcd, 0xe8, 0xcf, 0xee, 0xdd, 0x20, 0x7b, 0x97, 0xd9, 0x15, 0xe5, 0xfa, 0xec, 0x1f,
	0x2b, 0xd7, 0x2f, 0x35, 0x78, 0x78, 0x9f, 0x72, 0x69, 0x2b, 0x00, 0x36, 0x13, 0xbf, 0x72, 0xc2,
	0xd5, 0x62, 0xb9, 0x49, 0x46, 0xd0, 0x99, 0xe6, 0xdd, 0xa8, 0xaf, 0xc6, 0x75, 0x16, 0x95, 0x15,
	0x8e, 0xc5, 0x15, 0xa1, 0x51, 0x5e, 0x11, 0xbc, 0x5b, 0xe8, 0x33, 0xf1, 0x53, 0x2a, 0xb4, 0x99,
	0x73, 0xb6, 0x3f, 0xc1, 0x28, 0xbf, 0xf6, 0x6d, 0x2f, 0xff, 0x09, 0xbe, 0x4a, 0x02, 0xc1, 0xd0,
	0x23, 0xd7, 0xb5, 0x7a, 0xa9, 0x6b, 0x04, 0x9a, 0x53, 0xbb, 0x27, 0xf7, 0xc3, 0xc7, 0xb5, 0xf7,
	0x47, 0x0d, 0x08, 0x13, 0xd3, 0x70, 0xf6, 0x5f, 0xa5, 0x7d, 0x51, 0x61, 0x28, 0xc0, 0x3f, 0xf7,
	0x70, 0x45, 0x86, 0xf4, 0xd9, 0x5a, 0x85, 0xa4, 0x11, 0xb4, 0xb3, 0x35, 0x15, 0x18, 0x66, 0x55,
	0xa2, 0xcf, 0xd6, 0x58, 0xee, 0x79, 0xd2, 0x86, 0x96, 0xb2, 0x9b, 0x7b, 0xf6, 0x7c, 0xe1, 0xaa,
	0x66, 0x0b, 0x26, 0x3b, 0xb0, 0x75, 0x79, 0x3c, 0x7a, 0xf5, 0xc3, 0x05, 0xfb, 0xee, 0x74, 0x3c,
	0x7a, 0x7d, 0xd9, 0x5b, 0x23, 0x3d, 0xd8, 0xac, 0x42, 0xbd, 0xda, 0xbb, 0x75, 0xbc, 0xb5, 0x7f,
	0xfd, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x62, 0xdf, 0xf9, 0xd2, 0xcc, 0x0b, 0x00, 0x00,
}

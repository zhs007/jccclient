// Code generated by protoc-gen-go. DO NOT EDIT.
// source: techinasia.proto

package jarviscrawlercore

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TechInAsiaMode int32

const (
	// TIAM_COMPANY - company
	TechInAsiaMode_TIAM_COMPANY TechInAsiaMode = 0
	// TIAM_JOB - job
	TechInAsiaMode_TIAM_JOB TechInAsiaMode = 1
	// TIAM_JOBLIST - job list
	TechInAsiaMode_TIAM_JOBLIST TechInAsiaMode = 2
	// TIAM_JOBTAG - job tag
	TechInAsiaMode_TIAM_JOBTAG TechInAsiaMode = 3
)

var TechInAsiaMode_name = map[int32]string{
	0: "TIAM_COMPANY",
	1: "TIAM_JOB",
	2: "TIAM_JOBLIST",
	3: "TIAM_JOBTAG",
}
var TechInAsiaMode_value = map[string]int32{
	"TIAM_COMPANY": 0,
	"TIAM_JOB":     1,
	"TIAM_JOBLIST": 2,
	"TIAM_JOBTAG":  3,
}

func (x TechInAsiaMode) String() string {
	return proto.EnumName(TechInAsiaMode_name, int32(x))
}
func (TechInAsiaMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_techinasia_cfd2aeafd3456c70, []int{0}
}

// TechInAsiaCompany - TechInAsia Company
type TechInAsiaCompany struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Avatar               string   `protobuf:"bytes,2,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Location             []string `protobuf:"bytes,3,rep,name=location,proto3" json:"location,omitempty"`
	Categories           []string `protobuf:"bytes,4,rep,name=categories,proto3" json:"categories,omitempty"`
	Employees            int32    `protobuf:"varint,5,opt,name=employees,proto3" json:"employees,omitempty"`
	Introduction         string   `protobuf:"bytes,6,opt,name=introduction,proto3" json:"introduction,omitempty"`
	Links                []string `protobuf:"bytes,7,rep,name=links,proto3" json:"links,omitempty"`
	CompanyCode          string   `protobuf:"bytes,8,opt,name=companyCode,proto3" json:"companyCode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TechInAsiaCompany) Reset()         { *m = TechInAsiaCompany{} }
func (m *TechInAsiaCompany) String() string { return proto.CompactTextString(m) }
func (*TechInAsiaCompany) ProtoMessage()    {}
func (*TechInAsiaCompany) Descriptor() ([]byte, []int) {
	return fileDescriptor_techinasia_cfd2aeafd3456c70, []int{0}
}
func (m *TechInAsiaCompany) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TechInAsiaCompany.Unmarshal(m, b)
}
func (m *TechInAsiaCompany) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TechInAsiaCompany.Marshal(b, m, deterministic)
}
func (dst *TechInAsiaCompany) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TechInAsiaCompany.Merge(dst, src)
}
func (m *TechInAsiaCompany) XXX_Size() int {
	return xxx_messageInfo_TechInAsiaCompany.Size(m)
}
func (m *TechInAsiaCompany) XXX_DiscardUnknown() {
	xxx_messageInfo_TechInAsiaCompany.DiscardUnknown(m)
}

var xxx_messageInfo_TechInAsiaCompany proto.InternalMessageInfo

func (m *TechInAsiaCompany) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TechInAsiaCompany) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *TechInAsiaCompany) GetLocation() []string {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *TechInAsiaCompany) GetCategories() []string {
	if m != nil {
		return m.Categories
	}
	return nil
}

func (m *TechInAsiaCompany) GetEmployees() int32 {
	if m != nil {
		return m.Employees
	}
	return 0
}

func (m *TechInAsiaCompany) GetIntroduction() string {
	if m != nil {
		return m.Introduction
	}
	return ""
}

func (m *TechInAsiaCompany) GetLinks() []string {
	if m != nil {
		return m.Links
	}
	return nil
}

func (m *TechInAsiaCompany) GetCompanyCode() string {
	if m != nil {
		return m.CompanyCode
	}
	return ""
}

// TechInAsiaJob - TechInAsia Job
type TechInAsiaJob struct {
	CompanyName          string   `protobuf:"bytes,1,opt,name=companyName,proto3" json:"companyName,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Location             []string `protobuf:"bytes,3,rep,name=location,proto3" json:"location,omitempty"`
	MinSalary            int32    `protobuf:"varint,4,opt,name=minSalary,proto3" json:"minSalary,omitempty"`
	MaxSalary            int32    `protobuf:"varint,5,opt,name=maxSalary,proto3" json:"maxSalary,omitempty"`
	Currency             string   `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`
	CreateTime           int64    `protobuf:"varint,7,opt,name=createTime,proto3" json:"createTime,omitempty"`
	UpdateTime           int64    `protobuf:"varint,8,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	JobFunction          string   `protobuf:"bytes,9,opt,name=jobFunction,proto3" json:"jobFunction,omitempty"`
	JobType              string   `protobuf:"bytes,10,opt,name=jobType,proto3" json:"jobType,omitempty"`
	Experience           string   `protobuf:"bytes,11,opt,name=experience,proto3" json:"experience,omitempty"`
	Vacancies            int32    `protobuf:"varint,12,opt,name=vacancies,proto3" json:"vacancies,omitempty"`
	Description          string   `protobuf:"bytes,13,opt,name=description,proto3" json:"description,omitempty"`
	RequiredSkills       []string `protobuf:"bytes,14,rep,name=requiredSkills,proto3" json:"requiredSkills,omitempty"`
	Culture              string   `protobuf:"bytes,15,opt,name=culture,proto3" json:"culture,omitempty"`
	CompanyCode          string   `protobuf:"bytes,16,opt,name=companyCode,proto3" json:"companyCode,omitempty"`
	JobCode              string   `protobuf:"bytes,17,opt,name=jobCode,proto3" json:"jobCode,omitempty"`
	SubType              []string `protobuf:"bytes,18,rep,name=subType,proto3" json:"subType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TechInAsiaJob) Reset()         { *m = TechInAsiaJob{} }
func (m *TechInAsiaJob) String() string { return proto.CompactTextString(m) }
func (*TechInAsiaJob) ProtoMessage()    {}
func (*TechInAsiaJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_techinasia_cfd2aeafd3456c70, []int{1}
}
func (m *TechInAsiaJob) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TechInAsiaJob.Unmarshal(m, b)
}
func (m *TechInAsiaJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TechInAsiaJob.Marshal(b, m, deterministic)
}
func (dst *TechInAsiaJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TechInAsiaJob.Merge(dst, src)
}
func (m *TechInAsiaJob) XXX_Size() int {
	return xxx_messageInfo_TechInAsiaJob.Size(m)
}
func (m *TechInAsiaJob) XXX_DiscardUnknown() {
	xxx_messageInfo_TechInAsiaJob.DiscardUnknown(m)
}

var xxx_messageInfo_TechInAsiaJob proto.InternalMessageInfo

func (m *TechInAsiaJob) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *TechInAsiaJob) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *TechInAsiaJob) GetLocation() []string {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *TechInAsiaJob) GetMinSalary() int32 {
	if m != nil {
		return m.MinSalary
	}
	return 0
}

func (m *TechInAsiaJob) GetMaxSalary() int32 {
	if m != nil {
		return m.MaxSalary
	}
	return 0
}

func (m *TechInAsiaJob) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *TechInAsiaJob) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *TechInAsiaJob) GetUpdateTime() int64 {
	if m != nil {
		return m.UpdateTime
	}
	return 0
}

func (m *TechInAsiaJob) GetJobFunction() string {
	if m != nil {
		return m.JobFunction
	}
	return ""
}

func (m *TechInAsiaJob) GetJobType() string {
	if m != nil {
		return m.JobType
	}
	return ""
}

func (m *TechInAsiaJob) GetExperience() string {
	if m != nil {
		return m.Experience
	}
	return ""
}

func (m *TechInAsiaJob) GetVacancies() int32 {
	if m != nil {
		return m.Vacancies
	}
	return 0
}

func (m *TechInAsiaJob) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *TechInAsiaJob) GetRequiredSkills() []string {
	if m != nil {
		return m.RequiredSkills
	}
	return nil
}

func (m *TechInAsiaJob) GetCulture() string {
	if m != nil {
		return m.Culture
	}
	return ""
}

func (m *TechInAsiaJob) GetCompanyCode() string {
	if m != nil {
		return m.CompanyCode
	}
	return ""
}

func (m *TechInAsiaJob) GetJobCode() string {
	if m != nil {
		return m.JobCode
	}
	return ""
}

func (m *TechInAsiaJob) GetSubType() []string {
	if m != nil {
		return m.SubType
	}
	return nil
}

// TechInAsiaJobTag - TechInAsia Job tag
type TechInAsiaJobTag struct {
	Tag                  string   `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	SubTags              []string `protobuf:"bytes,2,rep,name=subTags,proto3" json:"subTags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TechInAsiaJobTag) Reset()         { *m = TechInAsiaJobTag{} }
func (m *TechInAsiaJobTag) String() string { return proto.CompactTextString(m) }
func (*TechInAsiaJobTag) ProtoMessage()    {}
func (*TechInAsiaJobTag) Descriptor() ([]byte, []int) {
	return fileDescriptor_techinasia_cfd2aeafd3456c70, []int{2}
}
func (m *TechInAsiaJobTag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TechInAsiaJobTag.Unmarshal(m, b)
}
func (m *TechInAsiaJobTag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TechInAsiaJobTag.Marshal(b, m, deterministic)
}
func (dst *TechInAsiaJobTag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TechInAsiaJobTag.Merge(dst, src)
}
func (m *TechInAsiaJobTag) XXX_Size() int {
	return xxx_messageInfo_TechInAsiaJobTag.Size(m)
}
func (m *TechInAsiaJobTag) XXX_DiscardUnknown() {
	xxx_messageInfo_TechInAsiaJobTag.DiscardUnknown(m)
}

var xxx_messageInfo_TechInAsiaJobTag proto.InternalMessageInfo

func (m *TechInAsiaJobTag) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *TechInAsiaJobTag) GetSubTags() []string {
	if m != nil {
		return m.SubTags
	}
	return nil
}

// TechInAsiaJobTagList - TechInAsia Job tag list
type TechInAsiaJobTagList struct {
	Tags                 []*TechInAsiaJobTag `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TechInAsiaJobTagList) Reset()         { *m = TechInAsiaJobTagList{} }
func (m *TechInAsiaJobTagList) String() string { return proto.CompactTextString(m) }
func (*TechInAsiaJobTagList) ProtoMessage()    {}
func (*TechInAsiaJobTagList) Descriptor() ([]byte, []int) {
	return fileDescriptor_techinasia_cfd2aeafd3456c70, []int{3}
}
func (m *TechInAsiaJobTagList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TechInAsiaJobTagList.Unmarshal(m, b)
}
func (m *TechInAsiaJobTagList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TechInAsiaJobTagList.Marshal(b, m, deterministic)
}
func (dst *TechInAsiaJobTagList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TechInAsiaJobTagList.Merge(dst, src)
}
func (m *TechInAsiaJobTagList) XXX_Size() int {
	return xxx_messageInfo_TechInAsiaJobTagList.Size(m)
}
func (m *TechInAsiaJobTagList) XXX_DiscardUnknown() {
	xxx_messageInfo_TechInAsiaJobTagList.DiscardUnknown(m)
}

var xxx_messageInfo_TechInAsiaJobTagList proto.InternalMessageInfo

func (m *TechInAsiaJobTagList) GetTags() []*TechInAsiaJobTag {
	if m != nil {
		return m.Tags
	}
	return nil
}

// TechInAsiaJobList - TechInAsia JobList
type TechInAsiaJobList struct {
	Jobs                 []*TechInAsiaJob `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TechInAsiaJobList) Reset()         { *m = TechInAsiaJobList{} }
func (m *TechInAsiaJobList) String() string { return proto.CompactTextString(m) }
func (*TechInAsiaJobList) ProtoMessage()    {}
func (*TechInAsiaJobList) Descriptor() ([]byte, []int) {
	return fileDescriptor_techinasia_cfd2aeafd3456c70, []int{4}
}
func (m *TechInAsiaJobList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TechInAsiaJobList.Unmarshal(m, b)
}
func (m *TechInAsiaJobList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TechInAsiaJobList.Marshal(b, m, deterministic)
}
func (dst *TechInAsiaJobList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TechInAsiaJobList.Merge(dst, src)
}
func (m *TechInAsiaJobList) XXX_Size() int {
	return xxx_messageInfo_TechInAsiaJobList.Size(m)
}
func (m *TechInAsiaJobList) XXX_DiscardUnknown() {
	xxx_messageInfo_TechInAsiaJobList.DiscardUnknown(m)
}

var xxx_messageInfo_TechInAsiaJobList proto.InternalMessageInfo

func (m *TechInAsiaJobList) GetJobs() []*TechInAsiaJob {
	if m != nil {
		return m.Jobs
	}
	return nil
}

// RequestTechInAsia - request techinasia
type RequestTechInAsia struct {
	Mode                 TechInAsiaMode `protobuf:"varint,1,opt,name=mode,proto3,enum=jarviscrawlercore.TechInAsiaMode" json:"mode,omitempty"`
	CompanyCode          string         `protobuf:"bytes,2,opt,name=companyCode,proto3" json:"companyCode,omitempty"`
	JobCode              string         `protobuf:"bytes,3,opt,name=jobCode,proto3" json:"jobCode,omitempty"`
	JobNums              int32          `protobuf:"varint,4,opt,name=jobNums,proto3" json:"jobNums,omitempty"`
	JobTag               string         `protobuf:"bytes,5,opt,name=jobTag,proto3" json:"jobTag,omitempty"`
	JobSubTag            string         `protobuf:"bytes,6,opt,name=jobSubTag,proto3" json:"jobSubTag,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *RequestTechInAsia) Reset()         { *m = RequestTechInAsia{} }
func (m *RequestTechInAsia) String() string { return proto.CompactTextString(m) }
func (*RequestTechInAsia) ProtoMessage()    {}
func (*RequestTechInAsia) Descriptor() ([]byte, []int) {
	return fileDescriptor_techinasia_cfd2aeafd3456c70, []int{5}
}
func (m *RequestTechInAsia) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestTechInAsia.Unmarshal(m, b)
}
func (m *RequestTechInAsia) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestTechInAsia.Marshal(b, m, deterministic)
}
func (dst *RequestTechInAsia) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestTechInAsia.Merge(dst, src)
}
func (m *RequestTechInAsia) XXX_Size() int {
	return xxx_messageInfo_RequestTechInAsia.Size(m)
}
func (m *RequestTechInAsia) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestTechInAsia.DiscardUnknown(m)
}

var xxx_messageInfo_RequestTechInAsia proto.InternalMessageInfo

func (m *RequestTechInAsia) GetMode() TechInAsiaMode {
	if m != nil {
		return m.Mode
	}
	return TechInAsiaMode_TIAM_COMPANY
}

func (m *RequestTechInAsia) GetCompanyCode() string {
	if m != nil {
		return m.CompanyCode
	}
	return ""
}

func (m *RequestTechInAsia) GetJobCode() string {
	if m != nil {
		return m.JobCode
	}
	return ""
}

func (m *RequestTechInAsia) GetJobNums() int32 {
	if m != nil {
		return m.JobNums
	}
	return 0
}

func (m *RequestTechInAsia) GetJobTag() string {
	if m != nil {
		return m.JobTag
	}
	return ""
}

func (m *RequestTechInAsia) GetJobSubTag() string {
	if m != nil {
		return m.JobSubTag
	}
	return ""
}

// ReplyTechInAsia - reply techinasia
type ReplyTechInAsia struct {
	Mode TechInAsiaMode `protobuf:"varint,1,opt,name=mode,proto3,enum=jarviscrawlercore.TechInAsiaMode" json:"mode,omitempty"`
	// Types that are valid to be assigned to Reply:
	//	*ReplyTechInAsia_Company
	//	*ReplyTechInAsia_Job
	//	*ReplyTechInAsia_Jobs
	//	*ReplyTechInAsia_Tags
	Reply                isReplyTechInAsia_Reply `protobuf_oneof:"reply"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ReplyTechInAsia) Reset()         { *m = ReplyTechInAsia{} }
func (m *ReplyTechInAsia) String() string { return proto.CompactTextString(m) }
func (*ReplyTechInAsia) ProtoMessage()    {}
func (*ReplyTechInAsia) Descriptor() ([]byte, []int) {
	return fileDescriptor_techinasia_cfd2aeafd3456c70, []int{6}
}
func (m *ReplyTechInAsia) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplyTechInAsia.Unmarshal(m, b)
}
func (m *ReplyTechInAsia) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplyTechInAsia.Marshal(b, m, deterministic)
}
func (dst *ReplyTechInAsia) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyTechInAsia.Merge(dst, src)
}
func (m *ReplyTechInAsia) XXX_Size() int {
	return xxx_messageInfo_ReplyTechInAsia.Size(m)
}
func (m *ReplyTechInAsia) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyTechInAsia.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyTechInAsia proto.InternalMessageInfo

type isReplyTechInAsia_Reply interface {
	isReplyTechInAsia_Reply()
}

type ReplyTechInAsia_Company struct {
	Company *TechInAsiaCompany `protobuf:"bytes,100,opt,name=company,proto3,oneof"`
}
type ReplyTechInAsia_Job struct {
	Job *TechInAsiaJob `protobuf:"bytes,101,opt,name=job,proto3,oneof"`
}
type ReplyTechInAsia_Jobs struct {
	Jobs *TechInAsiaJobList `protobuf:"bytes,102,opt,name=jobs,proto3,oneof"`
}
type ReplyTechInAsia_Tags struct {
	Tags *TechInAsiaJobTagList `protobuf:"bytes,103,opt,name=tags,proto3,oneof"`
}

func (*ReplyTechInAsia_Company) isReplyTechInAsia_Reply() {}
func (*ReplyTechInAsia_Job) isReplyTechInAsia_Reply()     {}
func (*ReplyTechInAsia_Jobs) isReplyTechInAsia_Reply()    {}
func (*ReplyTechInAsia_Tags) isReplyTechInAsia_Reply()    {}

func (m *ReplyTechInAsia) GetReply() isReplyTechInAsia_Reply {
	if m != nil {
		return m.Reply
	}
	return nil
}

func (m *ReplyTechInAsia) GetMode() TechInAsiaMode {
	if m != nil {
		return m.Mode
	}
	return TechInAsiaMode_TIAM_COMPANY
}

func (m *ReplyTechInAsia) GetCompany() *TechInAsiaCompany {
	if x, ok := m.GetReply().(*ReplyTechInAsia_Company); ok {
		return x.Company
	}
	return nil
}

func (m *ReplyTechInAsia) GetJob() *TechInAsiaJob {
	if x, ok := m.GetReply().(*ReplyTechInAsia_Job); ok {
		return x.Job
	}
	return nil
}

func (m *ReplyTechInAsia) GetJobs() *TechInAsiaJobList {
	if x, ok := m.GetReply().(*ReplyTechInAsia_Jobs); ok {
		return x.Jobs
	}
	return nil
}

func (m *ReplyTechInAsia) GetTags() *TechInAsiaJobTagList {
	if x, ok := m.GetReply().(*ReplyTechInAsia_Tags); ok {
		return x.Tags
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ReplyTechInAsia) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ReplyTechInAsia_OneofMarshaler, _ReplyTechInAsia_OneofUnmarshaler, _ReplyTechInAsia_OneofSizer, []interface{}{
		(*ReplyTechInAsia_Company)(nil),
		(*ReplyTechInAsia_Job)(nil),
		(*ReplyTechInAsia_Jobs)(nil),
		(*ReplyTechInAsia_Tags)(nil),
	}
}

func _ReplyTechInAsia_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ReplyTechInAsia)
	// reply
	switch x := m.Reply.(type) {
	case *ReplyTechInAsia_Company:
		b.EncodeVarint(100<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Company); err != nil {
			return err
		}
	case *ReplyTechInAsia_Job:
		b.EncodeVarint(101<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Job); err != nil {
			return err
		}
	case *ReplyTechInAsia_Jobs:
		b.EncodeVarint(102<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Jobs); err != nil {
			return err
		}
	case *ReplyTechInAsia_Tags:
		b.EncodeVarint(103<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tags); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ReplyTechInAsia.Reply has unexpected type %T", x)
	}
	return nil
}

func _ReplyTechInAsia_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ReplyTechInAsia)
	switch tag {
	case 100: // reply.company
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TechInAsiaCompany)
		err := b.DecodeMessage(msg)
		m.Reply = &ReplyTechInAsia_Company{msg}
		return true, err
	case 101: // reply.job
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TechInAsiaJob)
		err := b.DecodeMessage(msg)
		m.Reply = &ReplyTechInAsia_Job{msg}
		return true, err
	case 102: // reply.jobs
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TechInAsiaJobList)
		err := b.DecodeMessage(msg)
		m.Reply = &ReplyTechInAsia_Jobs{msg}
		return true, err
	case 103: // reply.tags
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TechInAsiaJobTagList)
		err := b.DecodeMessage(msg)
		m.Reply = &ReplyTechInAsia_Tags{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ReplyTechInAsia_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ReplyTechInAsia)
	// reply
	switch x := m.Reply.(type) {
	case *ReplyTechInAsia_Company:
		s := proto.Size(x.Company)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplyTechInAsia_Job:
		s := proto.Size(x.Job)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplyTechInAsia_Jobs:
		s := proto.Size(x.Jobs)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ReplyTechInAsia_Tags:
		s := proto.Size(x.Tags)
		n += 2 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*TechInAsiaCompany)(nil), "jarviscrawlercore.TechInAsiaCompany")
	proto.RegisterType((*TechInAsiaJob)(nil), "jarviscrawlercore.TechInAsiaJob")
	proto.RegisterType((*TechInAsiaJobTag)(nil), "jarviscrawlercore.TechInAsiaJobTag")
	proto.RegisterType((*TechInAsiaJobTagList)(nil), "jarviscrawlercore.TechInAsiaJobTagList")
	proto.RegisterType((*TechInAsiaJobList)(nil), "jarviscrawlercore.TechInAsiaJobList")
	proto.RegisterType((*RequestTechInAsia)(nil), "jarviscrawlercore.RequestTechInAsia")
	proto.RegisterType((*ReplyTechInAsia)(nil), "jarviscrawlercore.ReplyTechInAsia")
	proto.RegisterEnum("jarviscrawlercore.TechInAsiaMode", TechInAsiaMode_name, TechInAsiaMode_value)
}

func init() { proto.RegisterFile("techinasia.proto", fileDescriptor_techinasia_cfd2aeafd3456c70) }

var fileDescriptor_techinasia_cfd2aeafd3456c70 = []byte{
	// 730 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xd1, 0x6e, 0xda, 0x4a,
	0x10, 0xc5, 0x18, 0x02, 0x0c, 0x84, 0x98, 0x55, 0x74, 0xb5, 0xba, 0x8a, 0xae, 0x7c, 0x7d, 0xaf,
	0x5a, 0xd4, 0x87, 0x3c, 0xa4, 0xa9, 0x2a, 0x55, 0x6a, 0x55, 0x12, 0xa9, 0x0d, 0x28, 0x09, 0x95,
	0xe1, 0xa5, 0x4f, 0xd5, 0xda, 0x6c, 0xc9, 0x3a, 0xc6, 0xeb, 0xac, 0xed, 0x34, 0x7c, 0x55, 0x7f,
	0xa2, 0xdf, 0xd0, 0x3f, 0xe9, 0x7b, 0xb5, 0xeb, 0x35, 0x38, 0x44, 0x22, 0x91, 0xfa, 0xe6, 0x39,
	0x67, 0xcf, 0x8c, 0xcf, 0xcc, 0xac, 0x0d, 0x56, 0x4a, 0xfd, 0x2b, 0x16, 0x91, 0x84, 0x91, 0xc3,
	0x58, 0xf0, 0x94, 0xa3, 0x5e, 0x40, 0xc4, 0x2d, 0x4b, 0x7c, 0x41, 0xbe, 0x85, 0x54, 0xf8, 0x5c,
	0x50, 0xe7, 0x97, 0x01, 0xbd, 0x29, 0xf5, 0xaf, 0x86, 0xd1, 0x20, 0x61, 0xe4, 0x94, 0x2f, 0x62,
	0x12, 0x2d, 0x11, 0x82, 0x5a, 0x44, 0x16, 0x14, 0x1b, 0xb6, 0xd1, 0x6f, 0xb9, 0xea, 0x19, 0xfd,
	0x05, 0x3b, 0xe4, 0x96, 0xa4, 0x44, 0xe0, 0xaa, 0x42, 0x75, 0x84, 0xfe, 0x86, 0x66, 0xc8, 0x7d,
	0x92, 0x32, 0x1e, 0x61, 0xd3, 0x36, 0xfb, 0x2d, 0x77, 0x15, 0xa3, 0x7f, 0x00, 0x7c, 0x92, 0xd2,
	0x39, 0x17, 0x8c, 0x26, 0xb8, 0xa6, 0xd8, 0x12, 0x82, 0x0e, 0xa0, 0x45, 0x17, 0x71, 0xc8, 0x97,
	0x94, 0x26, 0xb8, 0x6e, 0x1b, 0xfd, 0xba, 0xbb, 0x06, 0x90, 0x03, 0x1d, 0x16, 0xa5, 0x82, 0xcf,
	0x32, 0x5f, 0x65, 0xdf, 0x51, 0x75, 0xef, 0x61, 0x68, 0x1f, 0xea, 0x21, 0x8b, 0xae, 0x13, 0xdc,
	0x50, 0xc9, 0xf3, 0x00, 0xd9, 0xd0, 0xf6, 0x73, 0x2b, 0xa7, 0x7c, 0x46, 0x71, 0x53, 0x09, 0xcb,
	0x90, 0xf3, 0xbd, 0x06, 0xbb, 0x6b, 0xdf, 0x23, 0xee, 0x95, 0x34, 0x97, 0x6b, 0xeb, 0x65, 0x48,
	0xd6, 0x4a, 0x59, 0x1a, 0x52, 0xdd, 0x80, 0x3c, 0xd8, 0xea, 0xff, 0x00, 0x5a, 0x0b, 0x16, 0x4d,
	0x48, 0x48, 0xc4, 0x12, 0xd7, 0x72, 0x7f, 0x2b, 0x40, 0xb1, 0xe4, 0x4e, 0xb3, 0xda, 0xfd, 0x0a,
	0x90, 0x79, 0xfd, 0x4c, 0x08, 0x1a, 0xf9, 0x4b, 0xed, 0x7c, 0x15, 0xab, 0xbe, 0x0a, 0x4a, 0x52,
	0x3a, 0x65, 0x0b, 0x8a, 0x1b, 0xb6, 0xd1, 0x37, 0xdd, 0x12, 0x22, 0xf9, 0x2c, 0x9e, 0x15, 0x7c,
	0x33, 0xe7, 0xd7, 0x88, 0xf4, 0x1a, 0x70, 0xef, 0x43, 0x16, 0xe5, 0x8d, 0x6d, 0xe5, 0x5e, 0x4b,
	0x10, 0xc2, 0xd0, 0x08, 0xb8, 0x37, 0x5d, 0xc6, 0x14, 0x83, 0x62, 0x8b, 0x50, 0xe6, 0xa6, 0x77,
	0x31, 0x15, 0x8c, 0x46, 0x3e, 0xc5, 0x6d, 0x45, 0x96, 0x10, 0xe9, 0xea, 0x96, 0xf8, 0x24, 0xf2,
	0xe5, 0xc8, 0x3b, 0xb9, 0xab, 0x15, 0x20, 0x2b, 0xcf, 0x68, 0xe2, 0x0b, 0x16, 0xab, 0xca, 0xbb,
	0x79, 0xe5, 0x12, 0x84, 0x9e, 0x41, 0x57, 0xd0, 0x9b, 0x8c, 0x09, 0x3a, 0x9b, 0x5c, 0xb3, 0x30,
	0x4c, 0x70, 0x57, 0x75, 0x75, 0x03, 0x95, 0x6f, 0xe8, 0x67, 0x61, 0x9a, 0x09, 0x8a, 0xf7, 0xf2,
	0x37, 0xd4, 0xe1, 0xe6, 0xf4, 0xad, 0x07, 0xd3, 0xd7, 0xee, 0x14, 0xdb, 0x5b, 0xb9, 0x2b, 0x98,
	0x24, 0xcb, 0x7d, 0x23, 0x55, 0xb6, 0x08, 0x9d, 0x77, 0x60, 0xdd, 0x5b, 0x98, 0x29, 0x99, 0x23,
	0x0b, 0xcc, 0x94, 0xcc, 0xf5, 0xae, 0xc8, 0xc7, 0x42, 0x4f, 0xe6, 0x09, 0xae, 0xae, 0xf5, 0x64,
	0x9e, 0x38, 0x63, 0xd8, 0xdf, 0xd4, 0x9f, 0xb3, 0x24, 0x45, 0xaf, 0xa1, 0x96, 0xca, 0xe3, 0x86,
	0x6d, 0xf6, 0xdb, 0x47, 0xff, 0x1d, 0x3e, 0xb8, 0xa3, 0x87, 0x9b, 0x32, 0x57, 0x09, 0x9c, 0x61,
	0xf9, 0xe6, 0x8e, 0xb8, 0xa7, 0xb2, 0x1d, 0x43, 0x2d, 0xe0, 0x5e, 0x91, 0xcd, 0x7e, 0x2c, 0x9b,
	0xab, 0x4e, 0x3b, 0x3f, 0x0d, 0xe8, 0xb9, 0xf4, 0x26, 0xa3, 0x49, 0xba, 0xa6, 0xd1, 0x2b, 0xa8,
	0x2d, 0x64, 0x8b, 0xa4, 0xbd, 0xee, 0xd1, 0xbf, 0x5b, 0x73, 0x5d, 0xf0, 0x19, 0x75, 0xd5, 0xf1,
	0xcd, 0xf6, 0x57, 0xb7, 0xb6, 0xdf, 0x7c, 0xd0, 0xfe, 0x80, 0x7b, 0x97, 0xd9, 0x22, 0xd1, 0xd7,
	0xa5, 0x08, 0xe5, 0xe7, 0x27, 0x50, 0xee, 0xd5, 0x4d, 0x69, 0xb9, 0x3a, 0x92, 0xeb, 0x16, 0x70,
	0x6f, 0xa2, 0x9a, 0xac, 0xef, 0xc9, 0x1a, 0x70, 0x7e, 0x54, 0x61, 0xcf, 0xa5, 0x71, 0xb8, 0xfc,
	0x73, 0x5b, 0xef, 0xa1, 0xa1, 0x3d, 0xe0, 0x99, 0x6d, 0xf4, 0xdb, 0x47, 0xff, 0x6f, 0x55, 0xea,
	0x4f, 0xe9, 0x59, 0xc5, 0x2d, 0x64, 0xe8, 0x18, 0xcc, 0x80, 0x7b, 0x98, 0x2a, 0xf5, 0xa3, 0xa3,
	0x39, 0xab, 0xb8, 0xf2, 0x38, 0x7a, 0xa3, 0x27, 0xfa, 0xf5, 0x09, 0x45, 0xf5, 0x16, 0x9c, 0x55,
	0xf2, 0xb9, 0xa2, 0xb7, 0x7a, 0xb7, 0xe6, 0x4a, 0xfb, 0xfc, 0x09, 0xbb, 0x55, 0xc8, 0xa5, 0xec,
	0xa4, 0x01, 0x75, 0x21, 0x9b, 0xf7, 0x62, 0x02, 0xdd, 0xfb, 0x3d, 0x41, 0x16, 0x74, 0xa6, 0xc3,
	0xc1, 0xc5, 0x97, 0xd3, 0xf1, 0xc5, 0xa7, 0xc1, 0xe5, 0x67, 0xab, 0x82, 0x3a, 0xd0, 0x54, 0xc8,
	0x68, 0x7c, 0x62, 0x19, 0x2b, 0x7e, 0x34, 0x3e, 0x39, 0x1f, 0x4e, 0xa6, 0x56, 0x15, 0xed, 0x41,
	0xbb, 0x40, 0xa6, 0x83, 0x8f, 0x96, 0xe9, 0xed, 0xa8, 0x9f, 0xd2, 0xcb, 0xdf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xa4, 0x6d, 0x2f, 0x52, 0xa8, 0x06, 0x00, 0x00,
}

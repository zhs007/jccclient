// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dt.proto

package jarviscrawlercore

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// DTDataType -
type DTDataType int32

const (
	DTDataType_DT_DT_BUSINESSGAMEREPORT DTDataType = 0
	DTDataType_DT_DT_TODAYGAMEDATA      DTDataType = 1
	DTDataType_DT_DT_GPKCHECKGAMERESULT DTDataType = 2
)

var DTDataType_name = map[int32]string{
	0: "DT_DT_BUSINESSGAMEREPORT",
	1: "DT_DT_TODAYGAMEDATA",
	2: "DT_DT_GPKCHECKGAMERESULT",
}
var DTDataType_value = map[string]int32{
	"DT_DT_BUSINESSGAMEREPORT": 0,
	"DT_DT_TODAYGAMEDATA":      1,
	"DT_DT_GPKCHECKGAMERESULT": 2,
}

func (x DTDataType) String() string {
	return proto.EnumName(DTDataType_name, int32(x))
}
func (DTDataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dt_07c4d1a9cc1c82ce, []int{0}
}

// DTGameResultErrCode -
type DTGameResultErrCode int32

const (
	// no error
	DTGameResultErrCode_DTGRE_NOERR DTGameResultErrCode = 0
	// id.gamecode != gamecode
	DTGameResultErrCode_DTGRE_GAMECODE DTGameResultErrCode = 1
	// invalid lines
	DTGameResultErrCode_DTGRE_LINES DTGameResultErrCode = 2
	// moneyEnd != moneyStart + off
	DTGameResultErrCode_DTGRE_MONEYOFF DTGameResultErrCode = 3
	// off != win - bet
	DTGameResultErrCode_DTGRE_WINBETOFF DTGameResultErrCode = 4
	// invalid gamedata
	DTGameResultErrCode_DTGRE_GAMEDATA DTGameResultErrCode = 5
	// invalid gameresult bet
	DTGameResultErrCode_DTGRE_GAMERESULT_BET DTGameResultErrCode = 6
	// invalid gameresult win
	DTGameResultErrCode_DTGRE_GAMERESULT_WIN DTGameResultErrCode = 7
	// invalid gameresult sumwin
	DTGameResultErrCode_DTGRE_GAMERESULT_SUM_WIN DTGameResultErrCode = 8
	// invalid iscomplete
	DTGameResultErrCode_DTGRE_ISCOMPLETE DTGameResultErrCode = 9
	// invalid gamestate
	DTGameResultErrCode_DTGRE_GAMESTATE DTGameResultErrCode = 10
	// invalid gameresult
	DTGameResultErrCode_DTGRE_GAMERESULT DTGameResultErrCode = 11
	// invalid gameresult lines
	DTGameResultErrCode_DTGRE_GAMERESULT_LINES DTGameResultErrCode = 12
	// invalid gameresult times
	DTGameResultErrCode_DTGRE_GAMERESULT_TIMES DTGameResultErrCode = 13
	// no children
	DTGameResultErrCode_DTGRE_NOCHILDREN DTGameResultErrCode = 15
	// no children error
	DTGameResultErrCode_DTGRE_CHILDREN_ERROR DTGameResultErrCode = 16
	// sub game not complete
	DTGameResultErrCode_DTGRE_SUBGAME_NOTCOMPLETE DTGameResultErrCode = 17
	// dtbaseid error
	DTGameResultErrCode_DTGRE_DTBASEID_ERROR DTGameResultErrCode = 18
	// no dtbaseid
	DTGameResultErrCode_DTGRE_NODTBASEID DTGameResultErrCode = 19
	// no dtbaseid baseid
	DTGameResultErrCode_DTGRE_DTBASEID_NOBASEID DTGameResultErrCode = 20
	// dtbaseid baseid error
	DTGameResultErrCode_DTGRE_DTBASEID_BASEID_ERROR DTGameResultErrCode = 21
	// can not find dtbaseid free
	DTGameResultErrCode_DTGRE_DTBASEID_FREE DTGameResultErrCode = 22
	// can not find dtbaseid respin
	DTGameResultErrCode_DTGRE_DTBASEID_RESPIN DTGameResultErrCode = 23
	// invalid fgnums
	DTGameResultErrCode_DTGRE_INVALID_FGNUMS DTGameResultErrCode = 24
	// icon404
	DTGameResultErrCode_DTGRE_ICON404 DTGameResultErrCode = 25
	// sub game repeated complete
	DTGameResultErrCode_DTGRE_SUBGAME_REPEATED_COMPLETE DTGameResultErrCode = 26
	// sub game invalid jp
	DTGameResultErrCode_DTGRE_SUBGAME_INVALID_JP DTGameResultErrCode = 27
	// invalid jp win
	DTGameResultErrCode_DTGRE_INVALID_JPWIN DTGameResultErrCode = 28
)

var DTGameResultErrCode_name = map[int32]string{
	0:  "DTGRE_NOERR",
	1:  "DTGRE_GAMECODE",
	2:  "DTGRE_LINES",
	3:  "DTGRE_MONEYOFF",
	4:  "DTGRE_WINBETOFF",
	5:  "DTGRE_GAMEDATA",
	6:  "DTGRE_GAMERESULT_BET",
	7:  "DTGRE_GAMERESULT_WIN",
	8:  "DTGRE_GAMERESULT_SUM_WIN",
	9:  "DTGRE_ISCOMPLETE",
	10: "DTGRE_GAMESTATE",
	11: "DTGRE_GAMERESULT",
	12: "DTGRE_GAMERESULT_LINES",
	13: "DTGRE_GAMERESULT_TIMES",
	15: "DTGRE_NOCHILDREN",
	16: "DTGRE_CHILDREN_ERROR",
	17: "DTGRE_SUBGAME_NOTCOMPLETE",
	18: "DTGRE_DTBASEID_ERROR",
	19: "DTGRE_NODTBASEID",
	20: "DTGRE_DTBASEID_NOBASEID",
	21: "DTGRE_DTBASEID_BASEID_ERROR",
	22: "DTGRE_DTBASEID_FREE",
	23: "DTGRE_DTBASEID_RESPIN",
	24: "DTGRE_INVALID_FGNUMS",
	25: "DTGRE_ICON404",
	26: "DTGRE_SUBGAME_REPEATED_COMPLETE",
	27: "DTGRE_SUBGAME_INVALID_JP",
	28: "DTGRE_INVALID_JPWIN",
}
var DTGameResultErrCode_value = map[string]int32{
	"DTGRE_NOERR":                     0,
	"DTGRE_GAMECODE":                  1,
	"DTGRE_LINES":                     2,
	"DTGRE_MONEYOFF":                  3,
	"DTGRE_WINBETOFF":                 4,
	"DTGRE_GAMEDATA":                  5,
	"DTGRE_GAMERESULT_BET":            6,
	"DTGRE_GAMERESULT_WIN":            7,
	"DTGRE_GAMERESULT_SUM_WIN":        8,
	"DTGRE_ISCOMPLETE":                9,
	"DTGRE_GAMESTATE":                 10,
	"DTGRE_GAMERESULT":                11,
	"DTGRE_GAMERESULT_LINES":          12,
	"DTGRE_GAMERESULT_TIMES":          13,
	"DTGRE_NOCHILDREN":                15,
	"DTGRE_CHILDREN_ERROR":            16,
	"DTGRE_SUBGAME_NOTCOMPLETE":       17,
	"DTGRE_DTBASEID_ERROR":            18,
	"DTGRE_NODTBASEID":                19,
	"DTGRE_DTBASEID_NOBASEID":         20,
	"DTGRE_DTBASEID_BASEID_ERROR":     21,
	"DTGRE_DTBASEID_FREE":             22,
	"DTGRE_DTBASEID_RESPIN":           23,
	"DTGRE_INVALID_FGNUMS":            24,
	"DTGRE_ICON404":                   25,
	"DTGRE_SUBGAME_REPEATED_COMPLETE": 26,
	"DTGRE_SUBGAME_INVALID_JP":        27,
	"DTGRE_INVALID_JPWIN":             28,
}

func (x DTGameResultErrCode) String() string {
	return proto.EnumName(DTGameResultErrCode_name, int32(x))
}
func (DTGameResultErrCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dt_07c4d1a9cc1c82ce, []int{1}
}

// DTGameResultErr -
type DTGameResultErr struct {
	// errcode
	Errcode DTGameResultErrCode `protobuf:"varint,1,opt,name=errcode,proto3,enum=jarviscrawlercore.DTGameResultErrCode" json:"errcode,omitempty"`
	// value0
	Value0 int64 `protobuf:"varint,2,opt,name=value0,proto3" json:"value0,omitempty"`
	// value1
	Value1 int64 `protobuf:"varint,3,opt,name=value1,proto3" json:"value1,omitempty"`
	// strval0
	Strval0              string   `protobuf:"bytes,10,opt,name=strval0,proto3" json:"strval0,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DTGameResultErr) Reset()         { *m = DTGameResultErr{} }
func (m *DTGameResultErr) String() string { return proto.CompactTextString(m) }
func (*DTGameResultErr) ProtoMessage()    {}
func (*DTGameResultErr) Descriptor() ([]byte, []int) {
	return fileDescriptor_dt_07c4d1a9cc1c82ce, []int{0}
}
func (m *DTGameResultErr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DTGameResultErr.Unmarshal(m, b)
}
func (m *DTGameResultErr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DTGameResultErr.Marshal(b, m, deterministic)
}
func (dst *DTGameResultErr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DTGameResultErr.Merge(dst, src)
}
func (m *DTGameResultErr) XXX_Size() int {
	return xxx_messageInfo_DTGameResultErr.Size(m)
}
func (m *DTGameResultErr) XXX_DiscardUnknown() {
	xxx_messageInfo_DTGameResultErr.DiscardUnknown(m)
}

var xxx_messageInfo_DTGameResultErr proto.InternalMessageInfo

func (m *DTGameResultErr) GetErrcode() DTGameResultErrCode {
	if m != nil {
		return m.Errcode
	}
	return DTGameResultErrCode_DTGRE_NOERR
}

func (m *DTGameResultErr) GetValue0() int64 {
	if m != nil {
		return m.Value0
	}
	return 0
}

func (m *DTGameResultErr) GetValue1() int64 {
	if m != nil {
		return m.Value1
	}
	return 0
}

func (m *DTGameResultErr) GetStrval0() string {
	if m != nil {
		return m.Strval0
	}
	return ""
}

// RequestDTData - request DT Data
type RequestDTData struct {
	// mode
	Mode string `protobuf:"bytes,1,opt,name=mode,proto3" json:"mode,omitempty"` // Deprecated: Do not use.
	// startTime
	StartTime string `protobuf:"bytes,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	// endTime
	EndTime string `protobuf:"bytes,3,opt,name=endTime,proto3" json:"endTime,omitempty"`
	// dtDataType
	DtDataType DTDataType `protobuf:"varint,4,opt,name=dtDataType,proto3,enum=jarviscrawlercore.DTDataType" json:"dtDataType,omitempty"`
	// environment name
	EnvName string `protobuf:"bytes,5,opt,name=envName,proto3" json:"envName,omitempty"`
	// business id
	Businessid string `protobuf:"bytes,6,opt,name=businessid,proto3" json:"businessid,omitempty"`
	// game code
	GameCode string `protobuf:"bytes,7,opt,name=gameCode,proto3" json:"gameCode,omitempty"`
	// player name
	PlayerName string `protobuf:"bytes,8,opt,name=playerName,proto3" json:"playerName,omitempty"`
	// token - You need to have a valid token in order to get back correctly
	Token                string   `protobuf:"bytes,100,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestDTData) Reset()         { *m = RequestDTData{} }
func (m *RequestDTData) String() string { return proto.CompactTextString(m) }
func (*RequestDTData) ProtoMessage()    {}
func (*RequestDTData) Descriptor() ([]byte, []int) {
	return fileDescriptor_dt_07c4d1a9cc1c82ce, []int{1}
}
func (m *RequestDTData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestDTData.Unmarshal(m, b)
}
func (m *RequestDTData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestDTData.Marshal(b, m, deterministic)
}
func (dst *RequestDTData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestDTData.Merge(dst, src)
}
func (m *RequestDTData) XXX_Size() int {
	return xxx_messageInfo_RequestDTData.Size(m)
}
func (m *RequestDTData) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestDTData.DiscardUnknown(m)
}

var xxx_messageInfo_RequestDTData proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *RequestDTData) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *RequestDTData) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *RequestDTData) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *RequestDTData) GetDtDataType() DTDataType {
	if m != nil {
		return m.DtDataType
	}
	return DTDataType_DT_DT_BUSINESSGAMEREPORT
}

func (m *RequestDTData) GetEnvName() string {
	if m != nil {
		return m.EnvName
	}
	return ""
}

func (m *RequestDTData) GetBusinessid() string {
	if m != nil {
		return m.Businessid
	}
	return ""
}

func (m *RequestDTData) GetGameCode() string {
	if m != nil {
		return m.GameCode
	}
	return ""
}

func (m *RequestDTData) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

func (m *RequestDTData) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// DTBusinessGameReport -
type DTBusinessGameReport struct {
	// businessid
	Businessid string `protobuf:"bytes,1,opt,name=businessid,proto3" json:"businessid,omitempty"`
	// gamecode
	Gamecode string `protobuf:"bytes,2,opt,name=gamecode,proto3" json:"gamecode,omitempty"`
	// totalWin
	TotalWin float32 `protobuf:"fixed32,3,opt,name=totalWin,proto3" json:"totalWin,omitempty"`
	// totalBet
	TotalBet float32 `protobuf:"fixed32,4,opt,name=totalBet,proto3" json:"totalBet,omitempty"`
	// gameNums
	GameNums int32 `protobuf:"varint,5,opt,name=gameNums,proto3" json:"gameNums,omitempty"`
	// currency
	Currency             string   `protobuf:"bytes,6,opt,name=currency,proto3" json:"currency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DTBusinessGameReport) Reset()         { *m = DTBusinessGameReport{} }
func (m *DTBusinessGameReport) String() string { return proto.CompactTextString(m) }
func (*DTBusinessGameReport) ProtoMessage()    {}
func (*DTBusinessGameReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_dt_07c4d1a9cc1c82ce, []int{2}
}
func (m *DTBusinessGameReport) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DTBusinessGameReport.Unmarshal(m, b)
}
func (m *DTBusinessGameReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DTBusinessGameReport.Marshal(b, m, deterministic)
}
func (dst *DTBusinessGameReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DTBusinessGameReport.Merge(dst, src)
}
func (m *DTBusinessGameReport) XXX_Size() int {
	return xxx_messageInfo_DTBusinessGameReport.Size(m)
}
func (m *DTBusinessGameReport) XXX_DiscardUnknown() {
	xxx_messageInfo_DTBusinessGameReport.DiscardUnknown(m)
}

var xxx_messageInfo_DTBusinessGameReport proto.InternalMessageInfo

func (m *DTBusinessGameReport) GetBusinessid() string {
	if m != nil {
		return m.Businessid
	}
	return ""
}

func (m *DTBusinessGameReport) GetGamecode() string {
	if m != nil {
		return m.Gamecode
	}
	return ""
}

func (m *DTBusinessGameReport) GetTotalWin() float32 {
	if m != nil {
		return m.TotalWin
	}
	return 0
}

func (m *DTBusinessGameReport) GetTotalBet() float32 {
	if m != nil {
		return m.TotalBet
	}
	return 0
}

func (m *DTBusinessGameReport) GetGameNums() int32 {
	if m != nil {
		return m.GameNums
	}
	return 0
}

func (m *DTBusinessGameReport) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

// DTTodayGameData -
type DTTodayGameData struct {
	// totalWin
	TotalWin float32 `protobuf:"fixed32,1,opt,name=totalWin,proto3" json:"totalWin,omitempty"`
	// totalBet
	TotalBet float32 `protobuf:"fixed32,2,opt,name=totalBet,proto3" json:"totalBet,omitempty"`
	// gameNums
	GameNums             int32    `protobuf:"varint,3,opt,name=gameNums,proto3" json:"gameNums,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DTTodayGameData) Reset()         { *m = DTTodayGameData{} }
func (m *DTTodayGameData) String() string { return proto.CompactTextString(m) }
func (*DTTodayGameData) ProtoMessage()    {}
func (*DTTodayGameData) Descriptor() ([]byte, []int) {
	return fileDescriptor_dt_07c4d1a9cc1c82ce, []int{3}
}
func (m *DTTodayGameData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DTTodayGameData.Unmarshal(m, b)
}
func (m *DTTodayGameData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DTTodayGameData.Marshal(b, m, deterministic)
}
func (dst *DTTodayGameData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DTTodayGameData.Merge(dst, src)
}
func (m *DTTodayGameData) XXX_Size() int {
	return xxx_messageInfo_DTTodayGameData.Size(m)
}
func (m *DTTodayGameData) XXX_DiscardUnknown() {
	xxx_messageInfo_DTTodayGameData.DiscardUnknown(m)
}

var xxx_messageInfo_DTTodayGameData proto.InternalMessageInfo

func (m *DTTodayGameData) GetTotalWin() float32 {
	if m != nil {
		return m.TotalWin
	}
	return 0
}

func (m *DTTodayGameData) GetTotalBet() float32 {
	if m != nil {
		return m.TotalBet
	}
	return 0
}

func (m *DTTodayGameData) GetGameNums() int32 {
	if m != nil {
		return m.GameNums
	}
	return 0
}

// DTGPKGameResult -
type DTGPKGameResult struct {
	ID                   string             `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	BusinessID           string             `protobuf:"bytes,2,opt,name=businessID,proto3" json:"businessID,omitempty"`
	PlayerName           string             `protobuf:"bytes,3,opt,name=playerName,proto3" json:"playerName,omitempty"`
	GameCode             string             `protobuf:"bytes,4,opt,name=gameCode,proto3" json:"gameCode,omitempty"`
	Win                  float32            `protobuf:"fixed32,5,opt,name=win,proto3" json:"win,omitempty"`
	Bet                  float32            `protobuf:"fixed32,6,opt,name=bet,proto3" json:"bet,omitempty"`
	Off                  float32            `protobuf:"fixed32,7,opt,name=off,proto3" json:"off,omitempty"`
	Lines                int32              `protobuf:"varint,8,opt,name=lines,proto3" json:"lines,omitempty"`
	MoneyStart           float32            `protobuf:"fixed32,9,opt,name=moneyStart,proto3" json:"moneyStart,omitempty"`
	MoneyEnd             float32            `protobuf:"fixed32,10,opt,name=moneyEnd,proto3" json:"moneyEnd,omitempty"`
	PlayerIP             string             `protobuf:"bytes,11,opt,name=playerIP,proto3" json:"playerIP,omitempty"`
	DataState            string             `protobuf:"bytes,12,opt,name=dataState,proto3" json:"dataState,omitempty"`
	GameTime             string             `protobuf:"bytes,13,opt,name=gameTime,proto3" json:"gameTime,omitempty"`
	ClientType           string             `protobuf:"bytes,14,opt,name=clientType,proto3" json:"clientType,omitempty"`
	Currency             string             `protobuf:"bytes,15,opt,name=currency,proto3" json:"currency,omitempty"`
	IsComplete           bool               `protobuf:"varint,16,opt,name=isComplete,proto3" json:"isComplete,omitempty"`
	GiftFreeID           string             `protobuf:"bytes,17,opt,name=giftFreeID,proto3" json:"giftFreeID,omitempty"`
	GameData             string             `protobuf:"bytes,18,opt,name=gameData,proto3" json:"gameData,omitempty"`
	GameResult           string             `protobuf:"bytes,19,opt,name=gameResult,proto3" json:"gameResult,omitempty"`
	HasSubGame           bool               `protobuf:"varint,20,opt,name=hasSubGame,proto3" json:"hasSubGame,omitempty"`
	Dtbaseid             string             `protobuf:"bytes,21,opt,name=dtbaseid,proto3" json:"dtbaseid,omitempty"`
	RootGame             bool               `protobuf:"varint,22,opt,name=rootGame,proto3" json:"rootGame,omitempty"`
	Children             []*DTGPKGameResult `protobuf:"bytes,100,rep,name=children,proto3" json:"children,omitempty"`
	Err                  *DTGameResultErr   `protobuf:"bytes,200,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *DTGPKGameResult) Reset()         { *m = DTGPKGameResult{} }
func (m *DTGPKGameResult) String() string { return proto.CompactTextString(m) }
func (*DTGPKGameResult) ProtoMessage()    {}
func (*DTGPKGameResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_dt_07c4d1a9cc1c82ce, []int{4}
}
func (m *DTGPKGameResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DTGPKGameResult.Unmarshal(m, b)
}
func (m *DTGPKGameResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DTGPKGameResult.Marshal(b, m, deterministic)
}
func (dst *DTGPKGameResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DTGPKGameResult.Merge(dst, src)
}
func (m *DTGPKGameResult) XXX_Size() int {
	return xxx_messageInfo_DTGPKGameResult.Size(m)
}
func (m *DTGPKGameResult) XXX_DiscardUnknown() {
	xxx_messageInfo_DTGPKGameResult.DiscardUnknown(m)
}

var xxx_messageInfo_DTGPKGameResult proto.InternalMessageInfo

func (m *DTGPKGameResult) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *DTGPKGameResult) GetBusinessID() string {
	if m != nil {
		return m.BusinessID
	}
	return ""
}

func (m *DTGPKGameResult) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

func (m *DTGPKGameResult) GetGameCode() string {
	if m != nil {
		return m.GameCode
	}
	return ""
}

func (m *DTGPKGameResult) GetWin() float32 {
	if m != nil {
		return m.Win
	}
	return 0
}

func (m *DTGPKGameResult) GetBet() float32 {
	if m != nil {
		return m.Bet
	}
	return 0
}

func (m *DTGPKGameResult) GetOff() float32 {
	if m != nil {
		return m.Off
	}
	return 0
}

func (m *DTGPKGameResult) GetLines() int32 {
	if m != nil {
		return m.Lines
	}
	return 0
}

func (m *DTGPKGameResult) GetMoneyStart() float32 {
	if m != nil {
		return m.MoneyStart
	}
	return 0
}

func (m *DTGPKGameResult) GetMoneyEnd() float32 {
	if m != nil {
		return m.MoneyEnd
	}
	return 0
}

func (m *DTGPKGameResult) GetPlayerIP() string {
	if m != nil {
		return m.PlayerIP
	}
	return ""
}

func (m *DTGPKGameResult) GetDataState() string {
	if m != nil {
		return m.DataState
	}
	return ""
}

func (m *DTGPKGameResult) GetGameTime() string {
	if m != nil {
		return m.GameTime
	}
	return ""
}

func (m *DTGPKGameResult) GetClientType() string {
	if m != nil {
		return m.ClientType
	}
	return ""
}

func (m *DTGPKGameResult) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *DTGPKGameResult) GetIsComplete() bool {
	if m != nil {
		return m.IsComplete
	}
	return false
}

func (m *DTGPKGameResult) GetGiftFreeID() string {
	if m != nil {
		return m.GiftFreeID
	}
	return ""
}

func (m *DTGPKGameResult) GetGameData() string {
	if m != nil {
		return m.GameData
	}
	return ""
}

func (m *DTGPKGameResult) GetGameResult() string {
	if m != nil {
		return m.GameResult
	}
	return ""
}

func (m *DTGPKGameResult) GetHasSubGame() bool {
	if m != nil {
		return m.HasSubGame
	}
	return false
}

func (m *DTGPKGameResult) GetDtbaseid() string {
	if m != nil {
		return m.Dtbaseid
	}
	return ""
}

func (m *DTGPKGameResult) GetRootGame() bool {
	if m != nil {
		return m.RootGame
	}
	return false
}

func (m *DTGPKGameResult) GetChildren() []*DTGPKGameResult {
	if m != nil {
		return m.Children
	}
	return nil
}

func (m *DTGPKGameResult) GetErr() *DTGameResultErr {
	if m != nil {
		return m.Err
	}
	return nil
}

// DTGPKCheckGameResult -
type DTGPKCheckGameResult struct {
	Lst                  []*DTGPKGameResult `protobuf:"bytes,1,rep,name=lst,proto3" json:"lst,omitempty"`
	ErrNums              int32              `protobuf:"varint,10,opt,name=errNums,proto3" json:"errNums,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *DTGPKCheckGameResult) Reset()         { *m = DTGPKCheckGameResult{} }
func (m *DTGPKCheckGameResult) String() string { return proto.CompactTextString(m) }
func (*DTGPKCheckGameResult) ProtoMessage()    {}
func (*DTGPKCheckGameResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_dt_07c4d1a9cc1c82ce, []int{5}
}
func (m *DTGPKCheckGameResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DTGPKCheckGameResult.Unmarshal(m, b)
}
func (m *DTGPKCheckGameResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DTGPKCheckGameResult.Marshal(b, m, deterministic)
}
func (dst *DTGPKCheckGameResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DTGPKCheckGameResult.Merge(dst, src)
}
func (m *DTGPKCheckGameResult) XXX_Size() int {
	return xxx_messageInfo_DTGPKCheckGameResult.Size(m)
}
func (m *DTGPKCheckGameResult) XXX_DiscardUnknown() {
	xxx_messageInfo_DTGPKCheckGameResult.DiscardUnknown(m)
}

var xxx_messageInfo_DTGPKCheckGameResult proto.InternalMessageInfo

func (m *DTGPKCheckGameResult) GetLst() []*DTGPKGameResult {
	if m != nil {
		return m.Lst
	}
	return nil
}

func (m *DTGPKCheckGameResult) GetErrNums() int32 {
	if m != nil {
		return m.ErrNums
	}
	return 0
}

// ReplyDTData - reply DT Data
type ReplyDTData struct {
	// gameReport
	GameReports []*DTBusinessGameReport `protobuf:"bytes,1,rep,name=gameReports,proto3" json:"gameReports,omitempty"`
	// todayGameData
	TodayGameData *DTTodayGameData `protobuf:"bytes,2,opt,name=todayGameData,proto3" json:"todayGameData,omitempty"`
	// checkGameResultGPK
	CheckGameResultGPK   *DTGPKCheckGameResult `protobuf:"bytes,3,opt,name=checkGameResultGPK,proto3" json:"checkGameResultGPK,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ReplyDTData) Reset()         { *m = ReplyDTData{} }
func (m *ReplyDTData) String() string { return proto.CompactTextString(m) }
func (*ReplyDTData) ProtoMessage()    {}
func (*ReplyDTData) Descriptor() ([]byte, []int) {
	return fileDescriptor_dt_07c4d1a9cc1c82ce, []int{6}
}
func (m *ReplyDTData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReplyDTData.Unmarshal(m, b)
}
func (m *ReplyDTData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReplyDTData.Marshal(b, m, deterministic)
}
func (dst *ReplyDTData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyDTData.Merge(dst, src)
}
func (m *ReplyDTData) XXX_Size() int {
	return xxx_messageInfo_ReplyDTData.Size(m)
}
func (m *ReplyDTData) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyDTData.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyDTData proto.InternalMessageInfo

func (m *ReplyDTData) GetGameReports() []*DTBusinessGameReport {
	if m != nil {
		return m.GameReports
	}
	return nil
}

func (m *ReplyDTData) GetTodayGameData() *DTTodayGameData {
	if m != nil {
		return m.TodayGameData
	}
	return nil
}

func (m *ReplyDTData) GetCheckGameResultGPK() *DTGPKCheckGameResult {
	if m != nil {
		return m.CheckGameResultGPK
	}
	return nil
}

func init() {
	proto.RegisterType((*DTGameResultErr)(nil), "jarviscrawlercore.DTGameResultErr")
	proto.RegisterType((*RequestDTData)(nil), "jarviscrawlercore.RequestDTData")
	proto.RegisterType((*DTBusinessGameReport)(nil), "jarviscrawlercore.DTBusinessGameReport")
	proto.RegisterType((*DTTodayGameData)(nil), "jarviscrawlercore.DTTodayGameData")
	proto.RegisterType((*DTGPKGameResult)(nil), "jarviscrawlercore.DTGPKGameResult")
	proto.RegisterType((*DTGPKCheckGameResult)(nil), "jarviscrawlercore.DTGPKCheckGameResult")
	proto.RegisterType((*ReplyDTData)(nil), "jarviscrawlercore.ReplyDTData")
	proto.RegisterEnum("jarviscrawlercore.DTDataType", DTDataType_name, DTDataType_value)
	proto.RegisterEnum("jarviscrawlercore.DTGameResultErrCode", DTGameResultErrCode_name, DTGameResultErrCode_value)
}

func init() { proto.RegisterFile("dt.proto", fileDescriptor_dt_07c4d1a9cc1c82ce) }

var fileDescriptor_dt_07c4d1a9cc1c82ce = []byte{
	// 1150 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xcb, 0x52, 0xe3, 0x46,
	0x17, 0x1e, 0xc9, 0x18, 0xec, 0xf6, 0x00, 0x4d, 0xc3, 0x40, 0x73, 0x19, 0x86, 0xf2, 0x5f, 0xf5,
	0x87, 0x9a, 0x05, 0xc5, 0x4c, 0xc8, 0x32, 0xa9, 0xd8, 0x56, 0x63, 0x14, 0xb0, 0xe4, 0x6a, 0x89,
	0x50, 0xb3, 0x72, 0x09, 0xab, 0x01, 0x67, 0x64, 0xcb, 0x91, 0xda, 0x4c, 0xf9, 0x61, 0xf2, 0x02,
	0x79, 0x8c, 0xac, 0xb2, 0xc9, 0x4b, 0xe4, 0x35, 0xb2, 0x49, 0x75, 0xeb, 0xd2, 0xf2, 0x85, 0xa9,
	0xec, 0x74, 0xce, 0xd7, 0xdf, 0xe9, 0xaf, 0xcf, 0xcd, 0x06, 0x15, 0x9f, 0x9f, 0x8d, 0xa3, 0x90,
	0x87, 0x68, 0xeb, 0x17, 0x2f, 0x7a, 0x1e, 0xc4, 0xfd, 0xc8, 0xfb, 0x12, 0xb0, 0xa8, 0x1f, 0x46,
	0xac, 0xfe, 0x9b, 0x06, 0x36, 0x0d, 0xb7, 0xed, 0x0d, 0x19, 0x65, 0xf1, 0x24, 0xe0, 0x24, 0x8a,
	0xd0, 0x8f, 0x60, 0x8d, 0x45, 0x51, 0x3f, 0xf4, 0x19, 0xd6, 0x4e, 0xb4, 0xd3, 0x8d, 0x8f, 0xff,
	0x3f, 0x5b, 0x20, 0x9e, 0xcd, 0x91, 0x5a, 0xa1, 0xcf, 0x68, 0x46, 0x43, 0xbb, 0x60, 0xf5, 0xd9,
	0x0b, 0x26, 0xec, 0x1c, 0xeb, 0x27, 0xda, 0x69, 0x89, 0xa6, 0x56, 0xee, 0xff, 0x80, 0x4b, 0x05,
	0xff, 0x07, 0x84, 0xc1, 0x5a, 0xcc, 0xa3, 0x67, 0x2f, 0x38, 0xc7, 0xe0, 0x44, 0x3b, 0xad, 0xd2,
	0xcc, 0xac, 0xff, 0xae, 0x83, 0x75, 0xca, 0x7e, 0x9d, 0xb0, 0x98, 0x1b, 0xae, 0xe1, 0x71, 0x0f,
	0xed, 0x82, 0x95, 0x61, 0x26, 0xad, 0xda, 0xd4, 0xb1, 0x46, 0xa5, 0x8d, 0x8e, 0x40, 0x35, 0xe6,
	0x5e, 0xc4, 0xdd, 0xc1, 0x90, 0xc9, 0x6b, 0xab, 0x54, 0x39, 0xc4, 0x0d, 0x6c, 0xe4, 0x4b, 0xac,
	0x94, 0xdc, 0x90, 0x9a, 0xe8, 0x7b, 0x00, 0x7c, 0x2e, 0x22, 0xbb, 0xd3, 0x31, 0xc3, 0x2b, 0xf2,
	0xc1, 0x6f, 0x97, 0x3e, 0x38, 0x3b, 0x44, 0x0b, 0x84, 0x24, 0xf0, 0xb3, 0xe5, 0x0d, 0x19, 0x2e,
	0x67, 0x81, 0xa5, 0x89, 0x8e, 0x01, 0xb8, 0x9f, 0xc4, 0x83, 0x11, 0x8b, 0xe3, 0x81, 0x8f, 0x57,
	0x25, 0x58, 0xf0, 0xa0, 0x03, 0x50, 0x79, 0xf4, 0x86, 0x4c, 0x64, 0x0e, 0xaf, 0x49, 0x34, 0xb7,
	0x05, 0x77, 0x1c, 0x78, 0x53, 0x16, 0xc9, 0xc0, 0x95, 0x84, 0xab, 0x3c, 0x68, 0x07, 0x94, 0x79,
	0xf8, 0x99, 0x8d, 0xb0, 0x2f, 0xa1, 0xc4, 0xa8, 0xff, 0xa1, 0x81, 0x1d, 0xc3, 0x6d, 0xa6, 0x57,
	0x24, 0xf5, 0x19, 0x87, 0x11, 0x9f, 0x93, 0xa2, 0xbd, 0x24, 0x45, 0x96, 0x5c, 0x57, 0x52, 0x64,
	0x2d, 0x0f, 0x40, 0x85, 0x87, 0xdc, 0x0b, 0xee, 0x06, 0x23, 0x99, 0x3a, 0x9d, 0xe6, 0x76, 0x8e,
	0x35, 0x19, 0x97, 0x99, 0xcb, 0xb0, 0x26, 0xe3, 0x59, 0x4c, 0x6b, 0x32, 0x8c, 0x65, 0x66, 0xca,
	0x34, 0xb7, 0x05, 0xd6, 0x9f, 0x44, 0x11, 0x1b, 0xf5, 0xa7, 0x69, 0x62, 0x72, 0xbb, 0xce, 0x44,
	0x43, 0xba, 0xa1, 0xef, 0x4d, 0xc5, 0x03, 0x64, 0xc9, 0x8b, 0x12, 0xb4, 0xaf, 0x48, 0xd0, 0xbf,
	0x22, 0xa1, 0x34, 0x2b, 0xa1, 0xfe, 0x77, 0x59, 0x36, 0x7e, 0xf7, 0x5a, 0xb5, 0x31, 0xda, 0x00,
	0xba, 0x69, 0xa4, 0xe9, 0xd1, 0x4d, 0xa3, 0x98, 0x36, 0xd3, 0x48, 0x13, 0x53, 0xf0, 0xcc, 0x55,
	0xa9, 0xb4, 0x50, 0xa5, 0x62, 0x85, 0x57, 0xe6, 0x2a, 0x0c, 0x41, 0xe9, 0xcb, 0x60, 0x24, 0x33,
	0xa3, 0x53, 0xf1, 0x29, 0x3c, 0xf7, 0x8c, 0xcb, 0x7c, 0xe8, 0x54, 0x7c, 0x0a, 0x4f, 0xf8, 0xf0,
	0x20, 0x9b, 0x43, 0xa7, 0xe2, 0x53, 0xd4, 0x3d, 0x10, 0xb7, 0xcb, 0x96, 0x28, 0xd3, 0xc4, 0x10,
	0x3a, 0x86, 0xe1, 0x88, 0x4d, 0x1d, 0xd1, 0xee, 0xb8, 0x2a, 0x8f, 0x17, 0x3c, 0x42, 0x87, 0xb4,
	0xc8, 0xc8, 0x97, 0xf3, 0xa5, 0xd3, 0xdc, 0x16, 0x58, 0xa2, 0xd8, 0xec, 0xe2, 0x5a, 0xa2, 0x31,
	0xb3, 0xc5, 0x48, 0xf9, 0x1e, 0xf7, 0x1c, 0xee, 0x71, 0x86, 0x5f, 0x27, 0x23, 0x95, 0x3b, 0xb2,
	0xd7, 0xc9, 0x99, 0x5a, 0x57, 0xaf, 0x93, 0x43, 0x75, 0x0c, 0x40, 0x3f, 0x18, 0xb0, 0x11, 0x97,
	0x43, 0xb5, 0x91, 0x64, 0x46, 0x79, 0x66, 0x1a, 0x60, 0x73, 0xb6, 0x01, 0x04, 0x77, 0x10, 0xb7,
	0xc2, 0xe1, 0x38, 0x60, 0x9c, 0x61, 0x78, 0xa2, 0x9d, 0x56, 0x68, 0xc1, 0x23, 0xf0, 0xc7, 0xc1,
	0x03, 0xbf, 0x8c, 0x18, 0x33, 0x0d, 0xbc, 0x95, 0xc4, 0x56, 0x9e, 0x4c, 0x97, 0xe8, 0x1c, 0x8c,
	0x94, 0x2e, 0xd9, 0x49, 0x82, 0x9b, 0xd7, 0x1b, 0x6f, 0xa7, 0x5c, 0xd5, 0x01, 0xc7, 0x00, 0x3c,
	0x79, 0xb1, 0x33, 0xb9, 0x17, 0x5d, 0x81, 0x77, 0x92, 0xbb, 0x95, 0x47, 0xc4, 0xf6, 0xf9, 0xbd,
	0x17, 0xb3, 0x81, 0x8f, 0xdf, 0x24, 0xb1, 0x33, 0x5b, 0x60, 0x51, 0x18, 0x72, 0xc9, 0xdc, 0x95,
	0xcc, 0xdc, 0x46, 0x3f, 0x80, 0x4a, 0xff, 0x69, 0x10, 0xf8, 0x91, 0x1c, 0xd9, 0xd2, 0x69, 0xed,
	0x63, 0x7d, 0xf9, 0x4e, 0x2d, 0xf6, 0x23, 0xcd, 0x39, 0xe8, 0x3b, 0x50, 0x62, 0x51, 0x84, 0xff,
	0x14, 0xbd, 0xf9, 0x22, 0xb7, 0xb8, 0x8f, 0xa9, 0x38, 0x5f, 0x7f, 0x10, 0xfb, 0xa0, 0xdd, 0xbd,
	0x6e, 0x3d, 0xb1, 0xfe, 0xe7, 0x42, 0xa3, 0x5f, 0x80, 0x52, 0x10, 0x73, 0xac, 0xfd, 0x67, 0x25,
	0xe2, 0xb8, 0x5c, 0x75, 0x51, 0x24, 0xa7, 0x09, 0xc8, 0xf6, 0xcb, 0xcc, 0xfa, 0x3f, 0x1a, 0xa8,
	0x51, 0x36, 0x0e, 0xa6, 0xe9, 0x8e, 0x36, 0x41, 0xed, 0x31, 0xdf, 0x3e, 0x71, 0x7a, 0xcf, 0x37,
	0x4b, 0xef, 0x59, 0xdc, 0x56, 0xb4, 0xc8, 0x45, 0x57, 0x60, 0x9d, 0x17, 0x97, 0x81, 0x1c, 0xc3,
	0x97, 0x44, 0xcf, 0xac, 0x0d, 0x3a, 0x4b, 0x44, 0x77, 0x00, 0xf5, 0x67, 0xf3, 0xd0, 0xee, 0x5e,
	0xcb, 0xa9, 0x7d, 0x49, 0xdb, 0x62, 0xe6, 0xe8, 0x92, 0x10, 0xef, 0x3d, 0x00, 0xd4, 0x8f, 0x03,
	0x3a, 0x02, 0xd8, 0x70, 0x7b, 0x86, 0xdb, 0x6b, 0xde, 0x3a, 0xa6, 0x45, 0x1c, 0xa7, 0xdd, 0xe8,
	0x10, 0x4a, 0xba, 0x36, 0x75, 0xe1, 0x2b, 0xb4, 0x07, 0xb6, 0x13, 0xd4, 0xb5, 0x8d, 0xc6, 0x27,
	0x01, 0x19, 0x0d, 0xb7, 0x01, 0x35, 0x45, 0x13, 0x97, 0x5e, 0x91, 0xd6, 0x75, 0x42, 0x73, 0x6e,
	0x6f, 0x5c, 0xa8, 0xbf, 0xff, 0xab, 0x2c, 0x78, 0x0b, 0xbf, 0xb8, 0x68, 0x13, 0xd4, 0x0c, 0xb7,
	0x4d, 0x49, 0xcf, 0xb2, 0x09, 0xa5, 0xf0, 0x15, 0x42, 0x60, 0x23, 0x71, 0x08, 0x7a, 0xcb, 0x36,
	0x08, 0xd4, 0xd4, 0xa1, 0x1b, 0xa1, 0x07, 0xea, 0xea, 0x50, 0xc7, 0xb6, 0xc8, 0x27, 0xfb, 0xf2,
	0x12, 0x96, 0xd0, 0xb6, 0x5c, 0x87, 0x94, 0xf4, 0xee, 0x4c, 0xab, 0x49, 0x5c, 0xe1, 0x5c, 0x99,
	0x8d, 0x26, 0x85, 0x96, 0x11, 0x96, 0x3d, 0x95, 0xfa, 0x12, 0x81, 0xbd, 0x26, 0x71, 0xe1, 0xea,
	0x52, 0xe4, 0xce, 0xb4, 0xe0, 0x5a, 0xf2, 0xb8, 0x39, 0xc4, 0xb9, 0xed, 0x48, 0xb4, 0x82, 0x76,
	0x00, 0x4c, 0x50, 0xd3, 0x69, 0xd9, 0x9d, 0xee, 0x0d, 0x71, 0x09, 0xac, 0x2a, 0x41, 0x82, 0xe3,
	0xb8, 0x0d, 0x97, 0x40, 0xa0, 0x8e, 0x16, 0xb2, 0x53, 0x43, 0x07, 0x60, 0x77, 0x21, 0x7c, 0xf2,
	0xd6, 0xd7, 0x4b, 0x31, 0xd7, 0xec, 0x10, 0x07, 0xae, 0xab, 0x68, 0x96, 0xdd, 0xba, 0x32, 0x6f,
	0x0c, 0x4a, 0x2c, 0xb8, 0xa9, 0x9e, 0x91, 0xf9, 0x7a, 0x84, 0x52, 0x9b, 0x42, 0x88, 0xde, 0x82,
	0xfd, 0x04, 0x71, 0x6e, 0x9b, 0x22, 0x5c, 0xcf, 0xb2, 0xdd, 0x5c, 0xf1, 0x96, 0x22, 0x1a, 0x6e,
	0xb3, 0xe1, 0x10, 0xd3, 0x48, 0x89, 0xa8, 0x78, 0x51, 0x86, 0xc1, 0x6d, 0x74, 0x08, 0xf6, 0xe6,
	0xce, 0x5b, 0x76, 0x0a, 0xee, 0xa0, 0x77, 0xe0, 0x70, 0x0e, 0x9c, 0x89, 0xf9, 0x26, 0xe9, 0xa4,
	0x99, 0x03, 0x97, 0x94, 0x10, 0xb8, 0x8b, 0xf6, 0xc1, 0x9b, 0x39, 0x80, 0x12, 0xa7, 0x6b, 0x5a,
	0x70, 0x4f, 0x29, 0x34, 0xad, 0x9f, 0x1b, 0x37, 0x82, 0xd2, 0xb6, 0x6e, 0x3b, 0x0e, 0xc4, 0x68,
	0x0b, 0xac, 0xa7, 0x48, 0xcb, 0xb6, 0x2e, 0xce, 0x2f, 0xe0, 0x3e, 0xfa, 0x1f, 0x78, 0x37, 0xfb,
	0x5a, 0x4a, 0xba, 0xa4, 0xe1, 0x12, 0xa3, 0x97, 0xbf, 0xf9, 0x40, 0x55, 0x36, 0x3b, 0x94, 0x45,
	0xfe, 0xa9, 0x0b, 0x0f, 0x95, 0x46, 0xe5, 0x15, 0x25, 0x3f, 0xba, 0x5f, 0x95, 0x7f, 0x48, 0xbf,
	0xfd, 0x37, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x03, 0xca, 0xf7, 0x9c, 0x0a, 0x00, 0x00,
}
